// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LyeInventory is an object representing the database table.
type LyeInventory struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	PurchaseDate  time.Time `boil:"purchase_date" json:"purchase_date" toml:"purchase_date" yaml:"purchase_date"`
	ExpiryDate    time.Time `boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	Cost          float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Weight        float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Concentration float64   `boil:"concentration" json:"concentration" toml:"concentration" yaml:"concentration"`
	LyeID         int       `boil:"lye_id" json:"lye_id" toml:"lye_id" yaml:"lye_id"`
	SupplierID    int       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`

	R *lyeInventoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lyeInventoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LyeInventoryColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	PurchaseDate  string
	ExpiryDate    string
	Cost          string
	Weight        string
	Concentration string
	LyeID         string
	SupplierID    string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	PurchaseDate:  "purchase_date",
	ExpiryDate:    "expiry_date",
	Cost:          "cost",
	Weight:        "weight",
	Concentration: "concentration",
	LyeID:         "lye_id",
	SupplierID:    "supplier_id",
}

// Generated where

var LyeInventoryWhere = struct {
	ID            whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	PurchaseDate  whereHelpertime_Time
	ExpiryDate    whereHelpertime_Time
	Cost          whereHelperfloat64
	Weight        whereHelperfloat64
	Concentration whereHelperfloat64
	LyeID         whereHelperint
	SupplierID    whereHelperint
}{
	ID:            whereHelperint{field: "\"lye_inventory\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"lye_inventory\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"lye_inventory\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"lye_inventory\".\"deleted_at\""},
	PurchaseDate:  whereHelpertime_Time{field: "\"lye_inventory\".\"purchase_date\""},
	ExpiryDate:    whereHelpertime_Time{field: "\"lye_inventory\".\"expiry_date\""},
	Cost:          whereHelperfloat64{field: "\"lye_inventory\".\"cost\""},
	Weight:        whereHelperfloat64{field: "\"lye_inventory\".\"weight\""},
	Concentration: whereHelperfloat64{field: "\"lye_inventory\".\"concentration\""},
	LyeID:         whereHelperint{field: "\"lye_inventory\".\"lye_id\""},
	SupplierID:    whereHelperint{field: "\"lye_inventory\".\"supplier_id\""},
}

// LyeInventoryRels is where relationship names are stored.
var LyeInventoryRels = struct {
	Lye      string
	Supplier string
}{
	Lye:      "Lye",
	Supplier: "Supplier",
}

// lyeInventoryR is where relationships are stored.
type lyeInventoryR struct {
	Lye      *Lye      `boil:"Lye" json:"Lye" toml:"Lye" yaml:"Lye"`
	Supplier *Supplier `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
}

// NewStruct creates a new relationship struct
func (*lyeInventoryR) NewStruct() *lyeInventoryR {
	return &lyeInventoryR{}
}

// lyeInventoryL is where Load methods for each relationship are stored.
type lyeInventoryL struct{}

var (
	lyeInventoryAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "concentration", "lye_id", "supplier_id"}
	lyeInventoryColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "concentration", "lye_id", "supplier_id"}
	lyeInventoryColumnsWithDefault    = []string{"id"}
	lyeInventoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// LyeInventorySlice is an alias for a slice of pointers to LyeInventory.
	// This should generally be used opposed to []LyeInventory.
	LyeInventorySlice []*LyeInventory
	// LyeInventoryHook is the signature for custom LyeInventory hook methods
	LyeInventoryHook func(context.Context, boil.ContextExecutor, *LyeInventory) error

	lyeInventoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lyeInventoryType                 = reflect.TypeOf(&LyeInventory{})
	lyeInventoryMapping              = queries.MakeStructMapping(lyeInventoryType)
	lyeInventoryPrimaryKeyMapping, _ = queries.BindMapping(lyeInventoryType, lyeInventoryMapping, lyeInventoryPrimaryKeyColumns)
	lyeInventoryInsertCacheMut       sync.RWMutex
	lyeInventoryInsertCache          = make(map[string]insertCache)
	lyeInventoryUpdateCacheMut       sync.RWMutex
	lyeInventoryUpdateCache          = make(map[string]updateCache)
	lyeInventoryUpsertCacheMut       sync.RWMutex
	lyeInventoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lyeInventoryBeforeInsertHooks []LyeInventoryHook
var lyeInventoryBeforeUpdateHooks []LyeInventoryHook
var lyeInventoryBeforeDeleteHooks []LyeInventoryHook
var lyeInventoryBeforeUpsertHooks []LyeInventoryHook

var lyeInventoryAfterInsertHooks []LyeInventoryHook
var lyeInventoryAfterSelectHooks []LyeInventoryHook
var lyeInventoryAfterUpdateHooks []LyeInventoryHook
var lyeInventoryAfterDeleteHooks []LyeInventoryHook
var lyeInventoryAfterUpsertHooks []LyeInventoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LyeInventory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LyeInventory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LyeInventory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LyeInventory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LyeInventory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LyeInventory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LyeInventory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LyeInventory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LyeInventory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeInventoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLyeInventoryHook registers your hook function for all future operations.
func AddLyeInventoryHook(hookPoint boil.HookPoint, lyeInventoryHook LyeInventoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lyeInventoryBeforeInsertHooks = append(lyeInventoryBeforeInsertHooks, lyeInventoryHook)
	case boil.BeforeUpdateHook:
		lyeInventoryBeforeUpdateHooks = append(lyeInventoryBeforeUpdateHooks, lyeInventoryHook)
	case boil.BeforeDeleteHook:
		lyeInventoryBeforeDeleteHooks = append(lyeInventoryBeforeDeleteHooks, lyeInventoryHook)
	case boil.BeforeUpsertHook:
		lyeInventoryBeforeUpsertHooks = append(lyeInventoryBeforeUpsertHooks, lyeInventoryHook)
	case boil.AfterInsertHook:
		lyeInventoryAfterInsertHooks = append(lyeInventoryAfterInsertHooks, lyeInventoryHook)
	case boil.AfterSelectHook:
		lyeInventoryAfterSelectHooks = append(lyeInventoryAfterSelectHooks, lyeInventoryHook)
	case boil.AfterUpdateHook:
		lyeInventoryAfterUpdateHooks = append(lyeInventoryAfterUpdateHooks, lyeInventoryHook)
	case boil.AfterDeleteHook:
		lyeInventoryAfterDeleteHooks = append(lyeInventoryAfterDeleteHooks, lyeInventoryHook)
	case boil.AfterUpsertHook:
		lyeInventoryAfterUpsertHooks = append(lyeInventoryAfterUpsertHooks, lyeInventoryHook)
	}
}

// One returns a single lyeInventory record from the query.
func (q lyeInventoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LyeInventory, error) {
	o := &LyeInventory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lye_inventory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LyeInventory records from the query.
func (q lyeInventoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (LyeInventorySlice, error) {
	var o []*LyeInventory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LyeInventory slice")
	}

	if len(lyeInventoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LyeInventory records in the query.
func (q lyeInventoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lye_inventory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lyeInventoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lye_inventory exists")
	}

	return count > 0, nil
}

// Lye pointed to by the foreign key.
func (o *LyeInventory) Lye(mods ...qm.QueryMod) lyeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LyeID),
	}

	queryMods = append(queryMods, mods...)

	query := Lyes(queryMods...)
	queries.SetFrom(query.Query, "\"lye\"")

	return query
}

// Supplier pointed to by the foreign key.
func (o *LyeInventory) Supplier(mods ...qm.QueryMod) supplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
	}

	queryMods = append(queryMods, mods...)

	query := Suppliers(queryMods...)
	queries.SetFrom(query.Query, "\"supplier\"")

	return query
}

// LoadLye allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lyeInventoryL) LoadLye(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLyeInventory interface{}, mods queries.Applicator) error {
	var slice []*LyeInventory
	var object *LyeInventory

	if singular {
		object = maybeLyeInventory.(*LyeInventory)
	} else {
		slice = *maybeLyeInventory.(*[]*LyeInventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lyeInventoryR{}
		}
		args = append(args, object.LyeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lyeInventoryR{}
			}

			for _, a := range args {
				if a == obj.LyeID {
					continue Outer
				}
			}

			args = append(args, obj.LyeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lye`),
		qm.WhereIn(`lye.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Lye")
	}

	var resultSlice []*Lye
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Lye")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for lye")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lye")
	}

	if len(lyeInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lye = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LyeID == foreign.ID {
				local.R.Lye = foreign
				break
			}
		}
	}

	return nil
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (lyeInventoryL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLyeInventory interface{}, mods queries.Applicator) error {
	var slice []*LyeInventory
	var object *LyeInventory

	if singular {
		object = maybeLyeInventory.(*LyeInventory)
	} else {
		slice = *maybeLyeInventory.(*[]*LyeInventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lyeInventoryR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lyeInventoryR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`supplier`),
		qm.WhereIn(`supplier.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Supplier")
	}

	var resultSlice []*Supplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Supplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for supplier")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for supplier")
	}

	if len(lyeInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				break
			}
		}
	}

	return nil
}

// SetLye of the lyeInventory to the related item.
// Sets o.R.Lye to related.
// Adds o to related.R.LyeInventories.
func (o *LyeInventory) SetLye(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Lye) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lye_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lye_id"}),
		strmangle.WhereClause("\"", "\"", 2, lyeInventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LyeID = related.ID
	if o.R == nil {
		o.R = &lyeInventoryR{
			Lye: related,
		}
	} else {
		o.R.Lye = related
	}

	if related.R == nil {
		related.R = &lyeR{
			LyeInventories: LyeInventorySlice{o},
		}
	} else {
		related.R.LyeInventories = append(related.R.LyeInventories, o)
	}

	return nil
}

// SetSupplier of the lyeInventory to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.LyeInventories.
func (o *LyeInventory) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Supplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lye_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, lyeInventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &lyeInventoryR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &supplierR{
			LyeInventories: LyeInventorySlice{o},
		}
	} else {
		related.R.LyeInventories = append(related.R.LyeInventories, o)
	}

	return nil
}

// LyeInventories retrieves all the records using an executor.
func LyeInventories(mods ...qm.QueryMod) lyeInventoryQuery {
	mods = append(mods, qm.From("\"lye_inventory\""))
	return lyeInventoryQuery{NewQuery(mods...)}
}

// FindLyeInventory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLyeInventory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LyeInventory, error) {
	lyeInventoryObj := &LyeInventory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lye_inventory\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lyeInventoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lye_inventory")
	}

	return lyeInventoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LyeInventory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lye_inventory provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lyeInventoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lyeInventoryInsertCacheMut.RLock()
	cache, cached := lyeInventoryInsertCache[key]
	lyeInventoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lyeInventoryAllColumns,
			lyeInventoryColumnsWithDefault,
			lyeInventoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lyeInventoryType, lyeInventoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lyeInventoryType, lyeInventoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lye_inventory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lye_inventory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lye_inventory")
	}

	if !cached {
		lyeInventoryInsertCacheMut.Lock()
		lyeInventoryInsertCache[key] = cache
		lyeInventoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LyeInventory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LyeInventory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lyeInventoryUpdateCacheMut.RLock()
	cache, cached := lyeInventoryUpdateCache[key]
	lyeInventoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lyeInventoryAllColumns,
			lyeInventoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lye_inventory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lye_inventory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lyeInventoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lyeInventoryType, lyeInventoryMapping, append(wl, lyeInventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lye_inventory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lye_inventory")
	}

	if !cached {
		lyeInventoryUpdateCacheMut.Lock()
		lyeInventoryUpdateCache[key] = cache
		lyeInventoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lyeInventoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lye_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lye_inventory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LyeInventorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyeInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lye_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lyeInventoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lyeInventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lyeInventory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LyeInventory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lye_inventory provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lyeInventoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lyeInventoryUpsertCacheMut.RLock()
	cache, cached := lyeInventoryUpsertCache[key]
	lyeInventoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lyeInventoryAllColumns,
			lyeInventoryColumnsWithDefault,
			lyeInventoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lyeInventoryAllColumns,
			lyeInventoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert lye_inventory, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(lyeInventoryPrimaryKeyColumns))
			copy(conflict, lyeInventoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lye_inventory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lyeInventoryType, lyeInventoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lyeInventoryType, lyeInventoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert lye_inventory")
	}

	if !cached {
		lyeInventoryUpsertCacheMut.Lock()
		lyeInventoryUpsertCache[key] = cache
		lyeInventoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LyeInventory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LyeInventory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LyeInventory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lyeInventoryPrimaryKeyMapping)
	sql := "DELETE FROM \"lye_inventory\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lye_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lye_inventory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lyeInventoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lyeInventoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lye_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lye_inventory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LyeInventorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lyeInventoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyeInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lye_inventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lyeInventoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lyeInventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lye_inventory")
	}

	if len(lyeInventoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LyeInventory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLyeInventory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LyeInventorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LyeInventorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyeInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lye_inventory\".* FROM \"lye_inventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lyeInventoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LyeInventorySlice")
	}

	*o = slice

	return nil
}

// LyeInventoryExists checks if the LyeInventory row exists.
func LyeInventoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lye_inventory\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lye_inventory exists")
	}

	return exists, nil
}
