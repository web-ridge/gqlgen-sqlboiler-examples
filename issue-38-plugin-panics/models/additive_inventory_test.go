// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdditiveInventories(t *testing.T) {
	t.Parallel()

	query := AdditiveInventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdditiveInventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdditiveInventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AdditiveInventories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdditiveInventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdditiveInventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdditiveInventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdditiveInventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AdditiveInventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdditiveInventoryExists to return true, but got false.")
	}
}

func testAdditiveInventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	additiveInventoryFound, err := FindAdditiveInventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if additiveInventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdditiveInventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AdditiveInventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdditiveInventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AdditiveInventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdditiveInventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	additiveInventoryOne := &AdditiveInventory{}
	additiveInventoryTwo := &AdditiveInventory{}
	if err = randomize.Struct(seed, additiveInventoryOne, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, additiveInventoryTwo, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = additiveInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = additiveInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AdditiveInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdditiveInventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	additiveInventoryOne := &AdditiveInventory{}
	additiveInventoryTwo := &AdditiveInventory{}
	if err = randomize.Struct(seed, additiveInventoryOne, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, additiveInventoryTwo, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = additiveInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = additiveInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func additiveInventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func additiveInventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AdditiveInventory) error {
	*o = AdditiveInventory{}
	return nil
}

func testAdditiveInventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AdditiveInventory{}
	o := &AdditiveInventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory object: %s", err)
	}

	AddAdditiveInventoryHook(boil.BeforeInsertHook, additiveInventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	additiveInventoryBeforeInsertHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.AfterInsertHook, additiveInventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	additiveInventoryAfterInsertHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.AfterSelectHook, additiveInventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	additiveInventoryAfterSelectHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.BeforeUpdateHook, additiveInventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	additiveInventoryBeforeUpdateHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.AfterUpdateHook, additiveInventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	additiveInventoryAfterUpdateHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.BeforeDeleteHook, additiveInventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	additiveInventoryBeforeDeleteHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.AfterDeleteHook, additiveInventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	additiveInventoryAfterDeleteHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.BeforeUpsertHook, additiveInventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	additiveInventoryBeforeUpsertHooks = []AdditiveInventoryHook{}

	AddAdditiveInventoryHook(boil.AfterUpsertHook, additiveInventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	additiveInventoryAfterUpsertHooks = []AdditiveInventoryHook{}
}

func testAdditiveInventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdditiveInventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(additiveInventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdditiveInventoryToOneAdditiveUsingAdditive(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AdditiveInventory
	var foreign Additive

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, additiveDBTypes, false, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AdditiveID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Additive().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AdditiveInventorySlice{&local}
	if err = local.L.LoadAdditive(ctx, tx, false, (*[]*AdditiveInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Additive = nil
	if err = local.L.LoadAdditive(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAdditiveInventoryToOneSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AdditiveInventory
	var foreign Supplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AdditiveInventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*AdditiveInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAdditiveInventoryToOneSetOpAdditiveUsingAdditive(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AdditiveInventory
	var b, c Additive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, additiveInventoryDBTypes, false, strmangle.SetComplement(additiveInventoryPrimaryKeyColumns, additiveInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, additiveDBTypes, false, strmangle.SetComplement(additivePrimaryKeyColumns, additiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, additiveDBTypes, false, strmangle.SetComplement(additivePrimaryKeyColumns, additiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Additive{&b, &c} {
		err = a.SetAdditive(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Additive != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdditiveInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AdditiveID != x.ID {
			t.Error("foreign key was wrong value", a.AdditiveID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AdditiveID))
		reflect.Indirect(reflect.ValueOf(&a.AdditiveID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AdditiveID != x.ID {
			t.Error("foreign key was wrong value", a.AdditiveID, x.ID)
		}
	}
}
func testAdditiveInventoryToOneSetOpSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AdditiveInventory
	var b, c Supplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, additiveInventoryDBTypes, false, strmangle.SetComplement(additiveInventoryPrimaryKeyColumns, additiveInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Supplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdditiveInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testAdditiveInventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdditiveInventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdditiveInventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdditiveInventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AdditiveInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	additiveInventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `AdditiveID`: `integer`, `SupplierID`: `integer`}
	_                        = bytes.MinRead
)

func testAdditiveInventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(additiveInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(additiveInventoryAllColumns) == len(additiveInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdditiveInventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(additiveInventoryAllColumns) == len(additiveInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AdditiveInventory{}
	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, additiveInventoryDBTypes, true, additiveInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(additiveInventoryAllColumns, additiveInventoryPrimaryKeyColumns) {
		fields = additiveInventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			additiveInventoryAllColumns,
			additiveInventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdditiveInventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdditiveInventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(additiveInventoryAllColumns) == len(additiveInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AdditiveInventory{}
	if err = randomize.Struct(seed, &o, additiveInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AdditiveInventory: %s", err)
	}

	count, err := AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, additiveInventoryDBTypes, false, additiveInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AdditiveInventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AdditiveInventory: %s", err)
	}

	count, err = AdditiveInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
