// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeBatchLipids(t *testing.T) {
	t.Parallel()

	query := RecipeBatchLipids()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeBatchLipidsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchLipidsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeBatchLipids().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchLipidsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchLipidSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchLipidsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeBatchLipidExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeBatchLipid exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeBatchLipidExists to return true, but got false.")
	}
}

func testRecipeBatchLipidsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeBatchLipidFound, err := FindRecipeBatchLipid(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeBatchLipidFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeBatchLipidsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeBatchLipids().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchLipidsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeBatchLipids().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeBatchLipidsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeBatchLipidOne := &RecipeBatchLipid{}
	recipeBatchLipidTwo := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, recipeBatchLipidOne, recipeBatchLipidDBTypes, false, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchLipidTwo, recipeBatchLipidDBTypes, false, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchLipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchLipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatchLipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeBatchLipidsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeBatchLipidOne := &RecipeBatchLipid{}
	recipeBatchLipidTwo := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, recipeBatchLipidOne, recipeBatchLipidDBTypes, false, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchLipidTwo, recipeBatchLipidDBTypes, false, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchLipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchLipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeBatchLipidBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func recipeBatchLipidAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLipid) error {
	*o = RecipeBatchLipid{}
	return nil
}

func testRecipeBatchLipidsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeBatchLipid{}
	o := &RecipeBatchLipid{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid object: %s", err)
	}

	AddRecipeBatchLipidHook(boil.BeforeInsertHook, recipeBatchLipidBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidBeforeInsertHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.AfterInsertHook, recipeBatchLipidAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidAfterInsertHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.AfterSelectHook, recipeBatchLipidAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidAfterSelectHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.BeforeUpdateHook, recipeBatchLipidBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidBeforeUpdateHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.AfterUpdateHook, recipeBatchLipidAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidAfterUpdateHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.BeforeDeleteHook, recipeBatchLipidBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidBeforeDeleteHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.AfterDeleteHook, recipeBatchLipidAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidAfterDeleteHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.BeforeUpsertHook, recipeBatchLipidBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidBeforeUpsertHooks = []RecipeBatchLipidHook{}

	AddRecipeBatchLipidHook(boil.AfterUpsertHook, recipeBatchLipidAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLipidAfterUpsertHooks = []RecipeBatchLipidHook{}
}

func testRecipeBatchLipidsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchLipidsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeBatchLipidColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchLipidToOneRecipeBatchUsingBatch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatchLipid
	var foreign RecipeBatch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchLipidDBTypes, false, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BatchID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Batch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchLipidSlice{&local}
	if err = local.L.LoadBatch(ctx, tx, false, (*[]*RecipeBatchLipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Batch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Batch = nil
	if err = local.L.LoadBatch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Batch == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchLipidToOneLipidUsingLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatchLipid
	var foreign Lipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchLipidDBTypes, false, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lipidDBTypes, false, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LipidID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchLipidSlice{&local}
	if err = local.L.LoadLipid(ctx, tx, false, (*[]*RecipeBatchLipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lipid = nil
	if err = local.L.LoadLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchLipidToOneSetOpRecipeBatchUsingBatch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatchLipid
	var b, c RecipeBatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchLipidDBTypes, false, strmangle.SetComplement(recipeBatchLipidPrimaryKeyColumns, recipeBatchLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeBatch{&b, &c} {
		err = a.SetBatch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Batch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BatchRecipeBatchLipids[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BatchID != x.ID {
			t.Error("foreign key was wrong value", a.BatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BatchID))
		reflect.Indirect(reflect.ValueOf(&a.BatchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BatchID != x.ID {
			t.Error("foreign key was wrong value", a.BatchID, x.ID)
		}
	}
}
func testRecipeBatchLipidToOneSetOpLipidUsingLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatchLipid
	var b, c Lipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchLipidDBTypes, false, strmangle.SetComplement(recipeBatchLipidPrimaryKeyColumns, recipeBatchLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Lipid{&b, &c} {
		err = a.SetLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lipid != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeBatchLipid != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LipidID))
		reflect.Indirect(reflect.ValueOf(&a.LipidID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID, x.ID)
		}
	}
}

func testRecipeBatchLipidsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchLipidsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchLipidSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchLipidsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatchLipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeBatchLipidDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Weight`: `double precision`, `Cost`: `double precision`, `LipidID`: `integer`, `BatchID`: `integer`}
	_                       = bytes.MinRead
)

func testRecipeBatchLipidsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeBatchLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeBatchLipidAllColumns) == len(recipeBatchLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeBatchLipidsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeBatchLipidAllColumns) == len(recipeBatchLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLipid{}
	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchLipidDBTypes, true, recipeBatchLipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeBatchLipidAllColumns, recipeBatchLipidPrimaryKeyColumns) {
		fields = recipeBatchLipidAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeBatchLipidAllColumns,
			recipeBatchLipidPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeBatchLipidSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeBatchLipidsUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeBatchLipidAllColumns) == len(recipeBatchLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeBatchLipid{}
	if err = randomize.Struct(seed, &o, recipeBatchLipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatchLipid: %s", err)
	}

	count, err := RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeBatchLipidDBTypes, false, recipeBatchLipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatchLipid: %s", err)
	}

	count, err = RecipeBatchLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
