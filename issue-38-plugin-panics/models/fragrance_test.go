// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFragrances(t *testing.T) {
	t.Parallel()

	query := Fragrances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFragrancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFragrancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Fragrances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFragrancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FragranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFragrancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FragranceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Fragrance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FragranceExists to return true, but got false.")
	}
}

func testFragrancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fragranceFound, err := FindFragrance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fragranceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFragrancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Fragrances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFragrancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Fragrances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFragrancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fragranceOne := &Fragrance{}
	fragranceTwo := &Fragrance{}
	if err = randomize.Struct(seed, fragranceOne, fragranceDBTypes, false, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, fragranceTwo, fragranceDBTypes, false, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Fragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFragrancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fragranceOne := &Fragrance{}
	fragranceTwo := &Fragrance{}
	if err = randomize.Struct(seed, fragranceOne, fragranceDBTypes, false, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, fragranceTwo, fragranceDBTypes, false, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fragranceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func fragranceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Fragrance) error {
	*o = Fragrance{}
	return nil
}

func testFragrancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Fragrance{}
	o := &Fragrance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fragranceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Fragrance object: %s", err)
	}

	AddFragranceHook(boil.BeforeInsertHook, fragranceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fragranceBeforeInsertHooks = []FragranceHook{}

	AddFragranceHook(boil.AfterInsertHook, fragranceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fragranceAfterInsertHooks = []FragranceHook{}

	AddFragranceHook(boil.AfterSelectHook, fragranceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fragranceAfterSelectHooks = []FragranceHook{}

	AddFragranceHook(boil.BeforeUpdateHook, fragranceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fragranceBeforeUpdateHooks = []FragranceHook{}

	AddFragranceHook(boil.AfterUpdateHook, fragranceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fragranceAfterUpdateHooks = []FragranceHook{}

	AddFragranceHook(boil.BeforeDeleteHook, fragranceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fragranceBeforeDeleteHooks = []FragranceHook{}

	AddFragranceHook(boil.AfterDeleteHook, fragranceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fragranceAfterDeleteHooks = []FragranceHook{}

	AddFragranceHook(boil.BeforeUpsertHook, fragranceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fragranceBeforeUpsertHooks = []FragranceHook{}

	AddFragranceHook(boil.AfterUpsertHook, fragranceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fragranceAfterUpsertHooks = []FragranceHook{}
}

func testFragrancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFragrancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fragranceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFragranceOneToOneRecipeBatchFragranceUsingRecipeBatchFragrance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RecipeBatchFragrance
	var local Fragrance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FragranceID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeBatchFragrance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FragranceID != foreign.FragranceID {
		t.Errorf("want: %v, got %v", foreign.FragranceID, check.FragranceID)
	}

	slice := FragranceSlice{&local}
	if err = local.L.LoadRecipeBatchFragrance(ctx, tx, false, (*[]*Fragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeBatchFragrance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeBatchFragrance = nil
	if err = local.L.LoadRecipeBatchFragrance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeBatchFragrance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFragranceOneToOneRecipeFragranceUsingRecipeFragrance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RecipeFragrance
	var local Fragrance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recipeFragranceDBTypes, true, recipeFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeFragrance struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.FragranceID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeFragrance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.FragranceID != foreign.FragranceID {
		t.Errorf("want: %v, got %v", foreign.FragranceID, check.FragranceID)
	}

	slice := FragranceSlice{&local}
	if err = local.L.LoadRecipeFragrance(ctx, tx, false, (*[]*Fragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeFragrance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeFragrance = nil
	if err = local.L.LoadRecipeFragrance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeFragrance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFragranceOneToOneSetOpRecipeBatchFragranceUsingRecipeBatchFragrance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Fragrance
	var b, c RecipeBatchFragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeBatchFragranceDBTypes, false, strmangle.SetComplement(recipeBatchFragrancePrimaryKeyColumns, recipeBatchFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeBatchFragranceDBTypes, false, strmangle.SetComplement(recipeBatchFragrancePrimaryKeyColumns, recipeBatchFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeBatchFragrance{&b, &c} {
		err = a.SetRecipeBatchFragrance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeBatchFragrance != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Fragrance != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.FragranceID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.FragranceID))
		reflect.Indirect(reflect.ValueOf(&x.FragranceID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.FragranceID {
			t.Error("foreign key was wrong value", a.ID, x.FragranceID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testFragranceOneToOneSetOpRecipeFragranceUsingRecipeFragrance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Fragrance
	var b, c RecipeFragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeFragranceDBTypes, false, strmangle.SetComplement(recipeFragrancePrimaryKeyColumns, recipeFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeFragranceDBTypes, false, strmangle.SetComplement(recipeFragrancePrimaryKeyColumns, recipeFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeFragrance{&b, &c} {
		err = a.SetRecipeFragrance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeFragrance != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Fragrance != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.FragranceID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.FragranceID))
		reflect.Indirect(reflect.ValueOf(&x.FragranceID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.FragranceID {
			t.Error("foreign key was wrong value", a.ID, x.FragranceID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testFragranceToManyFragranceInventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Fragrance
	var b, c FragranceInventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FragranceID = a.ID
	c.FragranceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FragranceInventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FragranceID == b.FragranceID {
			bFound = true
		}
		if v.FragranceID == c.FragranceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FragranceSlice{&a}
	if err = a.L.LoadFragranceInventories(ctx, tx, false, (*[]*Fragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceInventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FragranceInventories = nil
	if err = a.L.LoadFragranceInventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceInventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testFragranceToManyAddOpFragranceInventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Fragrance
	var b, c, d, e FragranceInventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FragranceInventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fragranceInventoryDBTypes, false, strmangle.SetComplement(fragranceInventoryPrimaryKeyColumns, fragranceInventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FragranceInventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFragranceInventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FragranceID {
			t.Error("foreign key was wrong value", a.ID, first.FragranceID)
		}
		if a.ID != second.FragranceID {
			t.Error("foreign key was wrong value", a.ID, second.FragranceID)
		}

		if first.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FragranceInventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FragranceInventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FragranceInventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFragrancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFragrancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FragranceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFragrancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Fragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fragranceDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `Note`: `text`}
	_                = bytes.MinRead
)

func testFragrancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fragranceAllColumns) == len(fragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFragrancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fragranceAllColumns) == len(fragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Fragrance{}
	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fragranceDBTypes, true, fragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fragranceAllColumns, fragrancePrimaryKeyColumns) {
		fields = fragranceAllColumns
	} else {
		fields = strmangle.SetComplement(
			fragranceAllColumns,
			fragrancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FragranceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFragrancesUpsert(t *testing.T) {
	t.Parallel()

	if len(fragranceAllColumns) == len(fragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Fragrance{}
	if err = randomize.Struct(seed, &o, fragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Fragrance: %s", err)
	}

	count, err := Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fragranceDBTypes, false, fragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Fragrance: %s", err)
	}

	count, err = Fragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
