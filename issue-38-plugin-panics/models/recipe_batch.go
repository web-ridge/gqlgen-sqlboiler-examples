// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecipeBatch is an object representing the database table.
type RecipeBatch struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Tag              string    `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`
	ProductionDate   time.Time `boil:"production_date" json:"production_date" toml:"production_date" yaml:"production_date"`
	SellableDate     time.Time `boil:"sellable_date" json:"sellable_date" toml:"sellable_date" yaml:"sellable_date"`
	Note             string    `boil:"note" json:"note" toml:"note" yaml:"note"`
	LipidWeight      float64   `boil:"lipid_weight" json:"lipid_weight" toml:"lipid_weight" yaml:"lipid_weight"`
	ProductionWeight float64   `boil:"production_weight" json:"production_weight" toml:"production_weight" yaml:"production_weight"`
	CuredWeight      float64   `boil:"cured_weight" json:"cured_weight" toml:"cured_weight" yaml:"cured_weight"`
	RecipeID         int       `boil:"recipe_id" json:"recipe_id" toml:"recipe_id" yaml:"recipe_id"`

	R *recipeBatchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeBatchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeBatchColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
	Tag              string
	ProductionDate   string
	SellableDate     string
	Note             string
	LipidWeight      string
	ProductionWeight string
	CuredWeight      string
	RecipeID         string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
	Tag:              "tag",
	ProductionDate:   "production_date",
	SellableDate:     "sellable_date",
	Note:             "note",
	LipidWeight:      "lipid_weight",
	ProductionWeight: "production_weight",
	CuredWeight:      "cured_weight",
	RecipeID:         "recipe_id",
}

// Generated where

var RecipeBatchWhere = struct {
	ID               whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
	Tag              whereHelperstring
	ProductionDate   whereHelpertime_Time
	SellableDate     whereHelpertime_Time
	Note             whereHelperstring
	LipidWeight      whereHelperfloat64
	ProductionWeight whereHelperfloat64
	CuredWeight      whereHelperfloat64
	RecipeID         whereHelperint
}{
	ID:               whereHelperint{field: "\"recipe_batch\".\"id\""},
	CreatedAt:        whereHelpertime_Time{field: "\"recipe_batch\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"recipe_batch\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"recipe_batch\".\"deleted_at\""},
	Tag:              whereHelperstring{field: "\"recipe_batch\".\"tag\""},
	ProductionDate:   whereHelpertime_Time{field: "\"recipe_batch\".\"production_date\""},
	SellableDate:     whereHelpertime_Time{field: "\"recipe_batch\".\"sellable_date\""},
	Note:             whereHelperstring{field: "\"recipe_batch\".\"note\""},
	LipidWeight:      whereHelperfloat64{field: "\"recipe_batch\".\"lipid_weight\""},
	ProductionWeight: whereHelperfloat64{field: "\"recipe_batch\".\"production_weight\""},
	CuredWeight:      whereHelperfloat64{field: "\"recipe_batch\".\"cured_weight\""},
	RecipeID:         whereHelperint{field: "\"recipe_batch\".\"recipe_id\""},
}

// RecipeBatchRels is where relationship names are stored.
var RecipeBatchRels = struct {
	Recipe                     string
	BatchRecipeBatchAdditives  string
	BatchRecipeBatchFragrances string
	BatchRecipeBatchLipids     string
	BatchRecipeBatchLyes       string
	BatchRecipeBatchNotes      string
}{
	Recipe:                     "Recipe",
	BatchRecipeBatchAdditives:  "BatchRecipeBatchAdditives",
	BatchRecipeBatchFragrances: "BatchRecipeBatchFragrances",
	BatchRecipeBatchLipids:     "BatchRecipeBatchLipids",
	BatchRecipeBatchLyes:       "BatchRecipeBatchLyes",
	BatchRecipeBatchNotes:      "BatchRecipeBatchNotes",
}

// recipeBatchR is where relationships are stored.
type recipeBatchR struct {
	Recipe                     *Recipe                   `boil:"Recipe" json:"Recipe" toml:"Recipe" yaml:"Recipe"`
	BatchRecipeBatchAdditives  RecipeBatchAdditiveSlice  `boil:"BatchRecipeBatchAdditives" json:"BatchRecipeBatchAdditives" toml:"BatchRecipeBatchAdditives" yaml:"BatchRecipeBatchAdditives"`
	BatchRecipeBatchFragrances RecipeBatchFragranceSlice `boil:"BatchRecipeBatchFragrances" json:"BatchRecipeBatchFragrances" toml:"BatchRecipeBatchFragrances" yaml:"BatchRecipeBatchFragrances"`
	BatchRecipeBatchLipids     RecipeBatchLipidSlice     `boil:"BatchRecipeBatchLipids" json:"BatchRecipeBatchLipids" toml:"BatchRecipeBatchLipids" yaml:"BatchRecipeBatchLipids"`
	BatchRecipeBatchLyes       RecipeBatchLyeSlice       `boil:"BatchRecipeBatchLyes" json:"BatchRecipeBatchLyes" toml:"BatchRecipeBatchLyes" yaml:"BatchRecipeBatchLyes"`
	BatchRecipeBatchNotes      RecipeBatchNoteSlice      `boil:"BatchRecipeBatchNotes" json:"BatchRecipeBatchNotes" toml:"BatchRecipeBatchNotes" yaml:"BatchRecipeBatchNotes"`
}

// NewStruct creates a new relationship struct
func (*recipeBatchR) NewStruct() *recipeBatchR {
	return &recipeBatchR{}
}

// recipeBatchL is where Load methods for each relationship are stored.
type recipeBatchL struct{}

var (
	recipeBatchAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "tag", "production_date", "sellable_date", "note", "lipid_weight", "production_weight", "cured_weight", "recipe_id"}
	recipeBatchColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "tag", "production_date", "sellable_date", "note", "lipid_weight", "production_weight", "cured_weight", "recipe_id"}
	recipeBatchColumnsWithDefault    = []string{"id"}
	recipeBatchPrimaryKeyColumns     = []string{"id"}
)

type (
	// RecipeBatchSlice is an alias for a slice of pointers to RecipeBatch.
	// This should generally be used opposed to []RecipeBatch.
	RecipeBatchSlice []*RecipeBatch
	// RecipeBatchHook is the signature for custom RecipeBatch hook methods
	RecipeBatchHook func(context.Context, boil.ContextExecutor, *RecipeBatch) error

	recipeBatchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeBatchType                 = reflect.TypeOf(&RecipeBatch{})
	recipeBatchMapping              = queries.MakeStructMapping(recipeBatchType)
	recipeBatchPrimaryKeyMapping, _ = queries.BindMapping(recipeBatchType, recipeBatchMapping, recipeBatchPrimaryKeyColumns)
	recipeBatchInsertCacheMut       sync.RWMutex
	recipeBatchInsertCache          = make(map[string]insertCache)
	recipeBatchUpdateCacheMut       sync.RWMutex
	recipeBatchUpdateCache          = make(map[string]updateCache)
	recipeBatchUpsertCacheMut       sync.RWMutex
	recipeBatchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeBatchBeforeInsertHooks []RecipeBatchHook
var recipeBatchBeforeUpdateHooks []RecipeBatchHook
var recipeBatchBeforeDeleteHooks []RecipeBatchHook
var recipeBatchBeforeUpsertHooks []RecipeBatchHook

var recipeBatchAfterInsertHooks []RecipeBatchHook
var recipeBatchAfterSelectHooks []RecipeBatchHook
var recipeBatchAfterUpdateHooks []RecipeBatchHook
var recipeBatchAfterDeleteHooks []RecipeBatchHook
var recipeBatchAfterUpsertHooks []RecipeBatchHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeBatch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeBatch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeBatch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeBatch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeBatch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeBatch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeBatch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeBatch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeBatch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBatchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeBatchHook registers your hook function for all future operations.
func AddRecipeBatchHook(hookPoint boil.HookPoint, recipeBatchHook RecipeBatchHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recipeBatchBeforeInsertHooks = append(recipeBatchBeforeInsertHooks, recipeBatchHook)
	case boil.BeforeUpdateHook:
		recipeBatchBeforeUpdateHooks = append(recipeBatchBeforeUpdateHooks, recipeBatchHook)
	case boil.BeforeDeleteHook:
		recipeBatchBeforeDeleteHooks = append(recipeBatchBeforeDeleteHooks, recipeBatchHook)
	case boil.BeforeUpsertHook:
		recipeBatchBeforeUpsertHooks = append(recipeBatchBeforeUpsertHooks, recipeBatchHook)
	case boil.AfterInsertHook:
		recipeBatchAfterInsertHooks = append(recipeBatchAfterInsertHooks, recipeBatchHook)
	case boil.AfterSelectHook:
		recipeBatchAfterSelectHooks = append(recipeBatchAfterSelectHooks, recipeBatchHook)
	case boil.AfterUpdateHook:
		recipeBatchAfterUpdateHooks = append(recipeBatchAfterUpdateHooks, recipeBatchHook)
	case boil.AfterDeleteHook:
		recipeBatchAfterDeleteHooks = append(recipeBatchAfterDeleteHooks, recipeBatchHook)
	case boil.AfterUpsertHook:
		recipeBatchAfterUpsertHooks = append(recipeBatchAfterUpsertHooks, recipeBatchHook)
	}
}

// One returns a single recipeBatch record from the query.
func (q recipeBatchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeBatch, error) {
	o := &RecipeBatch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_batch")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecipeBatch records from the query.
func (q recipeBatchQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeBatchSlice, error) {
	var o []*RecipeBatch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeBatch slice")
	}

	if len(recipeBatchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecipeBatch records in the query.
func (q recipeBatchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_batch rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeBatchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_batch exists")
	}

	return count > 0, nil
}

// Recipe pointed to by the foreign key.
func (o *RecipeBatch) Recipe(mods ...qm.QueryMod) recipeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RecipeID),
	}

	queryMods = append(queryMods, mods...)

	query := Recipes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe\"")

	return query
}

// BatchRecipeBatchAdditives retrieves all the recipe_batch_additive's RecipeBatchAdditives with an executor via batch_id column.
func (o *RecipeBatch) BatchRecipeBatchAdditives(mods ...qm.QueryMod) recipeBatchAdditiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_batch_additive\".\"batch_id\"=?", o.ID),
	)

	query := RecipeBatchAdditives(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_additive\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_batch_additive\".*"})
	}

	return query
}

// BatchRecipeBatchFragrances retrieves all the recipe_batch_fragrance's RecipeBatchFragrances with an executor via batch_id column.
func (o *RecipeBatch) BatchRecipeBatchFragrances(mods ...qm.QueryMod) recipeBatchFragranceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_batch_fragrance\".\"batch_id\"=?", o.ID),
	)

	query := RecipeBatchFragrances(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_fragrance\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_batch_fragrance\".*"})
	}

	return query
}

// BatchRecipeBatchLipids retrieves all the recipe_batch_lipid's RecipeBatchLipids with an executor via batch_id column.
func (o *RecipeBatch) BatchRecipeBatchLipids(mods ...qm.QueryMod) recipeBatchLipidQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_batch_lipid\".\"batch_id\"=?", o.ID),
	)

	query := RecipeBatchLipids(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_lipid\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_batch_lipid\".*"})
	}

	return query
}

// BatchRecipeBatchLyes retrieves all the recipe_batch_lye's RecipeBatchLyes with an executor via batch_id column.
func (o *RecipeBatch) BatchRecipeBatchLyes(mods ...qm.QueryMod) recipeBatchLyeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_batch_lye\".\"batch_id\"=?", o.ID),
	)

	query := RecipeBatchLyes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_lye\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_batch_lye\".*"})
	}

	return query
}

// BatchRecipeBatchNotes retrieves all the recipe_batch_note's RecipeBatchNotes with an executor via batch_id column.
func (o *RecipeBatch) BatchRecipeBatchNotes(mods ...qm.QueryMod) recipeBatchNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_batch_note\".\"batch_id\"=?", o.ID),
	)

	query := RecipeBatchNotes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_note\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_batch_note\".*"})
	}

	return query
}

// LoadRecipe allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeBatchL) LoadRecipe(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeBatch interface{}, mods queries.Applicator) error {
	var slice []*RecipeBatch
	var object *RecipeBatch

	if singular {
		object = maybeRecipeBatch.(*RecipeBatch)
	} else {
		slice = *maybeRecipeBatch.(*[]*RecipeBatch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeBatchR{}
		}
		args = append(args, object.RecipeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeBatchR{}
			}

			for _, a := range args {
				if a == obj.RecipeID {
					continue Outer
				}
			}

			args = append(args, obj.RecipeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe`),
		qm.WhereIn(`recipe.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recipe")
	}

	var resultSlice []*Recipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe")
	}

	if len(recipeBatchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Recipe = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecipeID == foreign.ID {
				local.R.Recipe = foreign
				break
			}
		}
	}

	return nil
}

// LoadBatchRecipeBatchAdditives allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeBatchL) LoadBatchRecipeBatchAdditives(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeBatch interface{}, mods queries.Applicator) error {
	var slice []*RecipeBatch
	var object *RecipeBatch

	if singular {
		object = maybeRecipeBatch.(*RecipeBatch)
	} else {
		slice = *maybeRecipeBatch.(*[]*RecipeBatch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeBatchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeBatchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_additive`),
		qm.WhereIn(`recipe_batch_additive.batch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_batch_additive")
	}

	var resultSlice []*RecipeBatchAdditive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_batch_additive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_batch_additive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_additive")
	}

	if len(recipeBatchAdditiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BatchRecipeBatchAdditives = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BatchID {
				local.R.BatchRecipeBatchAdditives = append(local.R.BatchRecipeBatchAdditives, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBatchRecipeBatchFragrances allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeBatchL) LoadBatchRecipeBatchFragrances(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeBatch interface{}, mods queries.Applicator) error {
	var slice []*RecipeBatch
	var object *RecipeBatch

	if singular {
		object = maybeRecipeBatch.(*RecipeBatch)
	} else {
		slice = *maybeRecipeBatch.(*[]*RecipeBatch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeBatchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeBatchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_fragrance`),
		qm.WhereIn(`recipe_batch_fragrance.batch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_batch_fragrance")
	}

	var resultSlice []*RecipeBatchFragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_batch_fragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_batch_fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_fragrance")
	}

	if len(recipeBatchFragranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BatchRecipeBatchFragrances = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BatchID {
				local.R.BatchRecipeBatchFragrances = append(local.R.BatchRecipeBatchFragrances, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBatchRecipeBatchLipids allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeBatchL) LoadBatchRecipeBatchLipids(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeBatch interface{}, mods queries.Applicator) error {
	var slice []*RecipeBatch
	var object *RecipeBatch

	if singular {
		object = maybeRecipeBatch.(*RecipeBatch)
	} else {
		slice = *maybeRecipeBatch.(*[]*RecipeBatch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeBatchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeBatchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_lipid`),
		qm.WhereIn(`recipe_batch_lipid.batch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_batch_lipid")
	}

	var resultSlice []*RecipeBatchLipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_batch_lipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_batch_lipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_lipid")
	}

	if len(recipeBatchLipidAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BatchRecipeBatchLipids = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BatchID {
				local.R.BatchRecipeBatchLipids = append(local.R.BatchRecipeBatchLipids, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBatchRecipeBatchLyes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeBatchL) LoadBatchRecipeBatchLyes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeBatch interface{}, mods queries.Applicator) error {
	var slice []*RecipeBatch
	var object *RecipeBatch

	if singular {
		object = maybeRecipeBatch.(*RecipeBatch)
	} else {
		slice = *maybeRecipeBatch.(*[]*RecipeBatch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeBatchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeBatchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_lye`),
		qm.WhereIn(`recipe_batch_lye.batch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_batch_lye")
	}

	var resultSlice []*RecipeBatchLye
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_batch_lye")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_batch_lye")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_lye")
	}

	if len(recipeBatchLyeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BatchRecipeBatchLyes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BatchID {
				local.R.BatchRecipeBatchLyes = append(local.R.BatchRecipeBatchLyes, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBatchRecipeBatchNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeBatchL) LoadBatchRecipeBatchNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeBatch interface{}, mods queries.Applicator) error {
	var slice []*RecipeBatch
	var object *RecipeBatch

	if singular {
		object = maybeRecipeBatch.(*RecipeBatch)
	} else {
		slice = *maybeRecipeBatch.(*[]*RecipeBatch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeBatchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeBatchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_note`),
		qm.WhereIn(`recipe_batch_note.batch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_batch_note")
	}

	var resultSlice []*RecipeBatchNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_batch_note")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_batch_note")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_note")
	}

	if len(recipeBatchNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BatchRecipeBatchNotes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BatchID {
				local.R.BatchRecipeBatchNotes = append(local.R.BatchRecipeBatchNotes, foreign)
				break
			}
		}
	}

	return nil
}

// SetRecipe of the recipeBatch to the related item.
// Sets o.R.Recipe to related.
// Adds o to related.R.RecipeBatches.
func (o *RecipeBatch) SetRecipe(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Recipe) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_batch\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeBatchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecipeID = related.ID
	if o.R == nil {
		o.R = &recipeBatchR{
			Recipe: related,
		}
	} else {
		o.R.Recipe = related
	}

	if related.R == nil {
		related.R = &recipeR{
			RecipeBatches: RecipeBatchSlice{o},
		}
	} else {
		related.R.RecipeBatches = append(related.R.RecipeBatches, o)
	}

	return nil
}

// AddBatchRecipeBatchAdditives adds the given related objects to the existing relationships
// of the recipe_batch, optionally inserting them as new records.
// Appends related to o.R.BatchRecipeBatchAdditives.
// Sets related.R.Batch appropriately.
func (o *RecipeBatch) AddBatchRecipeBatchAdditives(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeBatchAdditive) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BatchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_batch_additive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"batch_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeBatchAdditivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BatchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeBatchR{
			BatchRecipeBatchAdditives: related,
		}
	} else {
		o.R.BatchRecipeBatchAdditives = append(o.R.BatchRecipeBatchAdditives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeBatchAdditiveR{
				Batch: o,
			}
		} else {
			rel.R.Batch = o
		}
	}
	return nil
}

// AddBatchRecipeBatchFragrances adds the given related objects to the existing relationships
// of the recipe_batch, optionally inserting them as new records.
// Appends related to o.R.BatchRecipeBatchFragrances.
// Sets related.R.Batch appropriately.
func (o *RecipeBatch) AddBatchRecipeBatchFragrances(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeBatchFragrance) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BatchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_batch_fragrance\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"batch_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeBatchFragrancePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BatchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeBatchR{
			BatchRecipeBatchFragrances: related,
		}
	} else {
		o.R.BatchRecipeBatchFragrances = append(o.R.BatchRecipeBatchFragrances, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeBatchFragranceR{
				Batch: o,
			}
		} else {
			rel.R.Batch = o
		}
	}
	return nil
}

// AddBatchRecipeBatchLipids adds the given related objects to the existing relationships
// of the recipe_batch, optionally inserting them as new records.
// Appends related to o.R.BatchRecipeBatchLipids.
// Sets related.R.Batch appropriately.
func (o *RecipeBatch) AddBatchRecipeBatchLipids(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeBatchLipid) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BatchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_batch_lipid\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"batch_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeBatchLipidPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BatchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeBatchR{
			BatchRecipeBatchLipids: related,
		}
	} else {
		o.R.BatchRecipeBatchLipids = append(o.R.BatchRecipeBatchLipids, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeBatchLipidR{
				Batch: o,
			}
		} else {
			rel.R.Batch = o
		}
	}
	return nil
}

// AddBatchRecipeBatchLyes adds the given related objects to the existing relationships
// of the recipe_batch, optionally inserting them as new records.
// Appends related to o.R.BatchRecipeBatchLyes.
// Sets related.R.Batch appropriately.
func (o *RecipeBatch) AddBatchRecipeBatchLyes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeBatchLye) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BatchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_batch_lye\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"batch_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeBatchLyePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BatchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeBatchR{
			BatchRecipeBatchLyes: related,
		}
	} else {
		o.R.BatchRecipeBatchLyes = append(o.R.BatchRecipeBatchLyes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeBatchLyeR{
				Batch: o,
			}
		} else {
			rel.R.Batch = o
		}
	}
	return nil
}

// AddBatchRecipeBatchNotes adds the given related objects to the existing relationships
// of the recipe_batch, optionally inserting them as new records.
// Appends related to o.R.BatchRecipeBatchNotes.
// Sets related.R.Batch appropriately.
func (o *RecipeBatch) AddBatchRecipeBatchNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeBatchNote) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BatchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_batch_note\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"batch_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeBatchNotePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BatchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeBatchR{
			BatchRecipeBatchNotes: related,
		}
	} else {
		o.R.BatchRecipeBatchNotes = append(o.R.BatchRecipeBatchNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeBatchNoteR{
				Batch: o,
			}
		} else {
			rel.R.Batch = o
		}
	}
	return nil
}

// RecipeBatches retrieves all the records using an executor.
func RecipeBatches(mods ...qm.QueryMod) recipeBatchQuery {
	mods = append(mods, qm.From("\"recipe_batch\""))
	return recipeBatchQuery{NewQuery(mods...)}
}

// FindRecipeBatch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeBatch(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RecipeBatch, error) {
	recipeBatchObj := &RecipeBatch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_batch\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeBatchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_batch")
	}

	return recipeBatchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeBatch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_batch provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeBatchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeBatchInsertCacheMut.RLock()
	cache, cached := recipeBatchInsertCache[key]
	recipeBatchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeBatchAllColumns,
			recipeBatchColumnsWithDefault,
			recipeBatchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeBatchType, recipeBatchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeBatchType, recipeBatchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_batch\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_batch\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_batch")
	}

	if !cached {
		recipeBatchInsertCacheMut.Lock()
		recipeBatchInsertCache[key] = cache
		recipeBatchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecipeBatch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeBatch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeBatchUpdateCacheMut.RLock()
	cache, cached := recipeBatchUpdateCache[key]
	recipeBatchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeBatchAllColumns,
			recipeBatchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_batch, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_batch\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeBatchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeBatchType, recipeBatchMapping, append(wl, recipeBatchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_batch row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_batch")
	}

	if !cached {
		recipeBatchUpdateCacheMut.Lock()
		recipeBatchUpdateCache[key] = cache
		recipeBatchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeBatchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_batch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_batch")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeBatchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeBatchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_batch\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeBatchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeBatch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeBatch")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeBatch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_batch provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeBatchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeBatchUpsertCacheMut.RLock()
	cache, cached := recipeBatchUpsertCache[key]
	recipeBatchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeBatchAllColumns,
			recipeBatchColumnsWithDefault,
			recipeBatchColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeBatchAllColumns,
			recipeBatchPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_batch, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeBatchPrimaryKeyColumns))
			copy(conflict, recipeBatchPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_batch\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeBatchType, recipeBatchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeBatchType, recipeBatchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_batch")
	}

	if !cached {
		recipeBatchUpsertCacheMut.Lock()
		recipeBatchUpsertCache[key] = cache
		recipeBatchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecipeBatch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeBatch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeBatch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeBatchPrimaryKeyMapping)
	sql := "DELETE FROM \"recipe_batch\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_batch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_batch")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeBatchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeBatchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_batch")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_batch")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeBatchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeBatchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeBatchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipe_batch\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeBatchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeBatch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_batch")
	}

	if len(recipeBatchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeBatch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeBatch(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeBatchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeBatchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeBatchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_batch\".* FROM \"recipe_batch\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeBatchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeBatchSlice")
	}

	*o = slice

	return nil
}

// RecipeBatchExists checks if the RecipeBatch row exists.
func RecipeBatchExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_batch\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_batch exists")
	}

	return exists, nil
}
