// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLyeInventories(t *testing.T) {
	t.Parallel()

	query := LyeInventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLyeInventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLyeInventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LyeInventories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLyeInventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LyeInventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLyeInventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LyeInventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LyeInventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LyeInventoryExists to return true, but got false.")
	}
}

func testLyeInventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lyeInventoryFound, err := FindLyeInventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lyeInventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLyeInventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LyeInventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLyeInventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LyeInventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLyeInventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lyeInventoryOne := &LyeInventory{}
	lyeInventoryTwo := &LyeInventory{}
	if err = randomize.Struct(seed, lyeInventoryOne, lyeInventoryDBTypes, false, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, lyeInventoryTwo, lyeInventoryDBTypes, false, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lyeInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lyeInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LyeInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLyeInventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lyeInventoryOne := &LyeInventory{}
	lyeInventoryTwo := &LyeInventory{}
	if err = randomize.Struct(seed, lyeInventoryOne, lyeInventoryDBTypes, false, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, lyeInventoryTwo, lyeInventoryDBTypes, false, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lyeInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lyeInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lyeInventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func lyeInventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LyeInventory) error {
	*o = LyeInventory{}
	return nil
}

func testLyeInventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LyeInventory{}
	o := &LyeInventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LyeInventory object: %s", err)
	}

	AddLyeInventoryHook(boil.BeforeInsertHook, lyeInventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lyeInventoryBeforeInsertHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.AfterInsertHook, lyeInventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lyeInventoryAfterInsertHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.AfterSelectHook, lyeInventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lyeInventoryAfterSelectHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.BeforeUpdateHook, lyeInventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lyeInventoryBeforeUpdateHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.AfterUpdateHook, lyeInventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lyeInventoryAfterUpdateHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.BeforeDeleteHook, lyeInventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lyeInventoryBeforeDeleteHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.AfterDeleteHook, lyeInventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lyeInventoryAfterDeleteHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.BeforeUpsertHook, lyeInventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lyeInventoryBeforeUpsertHooks = []LyeInventoryHook{}

	AddLyeInventoryHook(boil.AfterUpsertHook, lyeInventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lyeInventoryAfterUpsertHooks = []LyeInventoryHook{}
}

func testLyeInventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLyeInventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lyeInventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLyeInventoryToOneLyeUsingLye(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LyeInventory
	var foreign Lye

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lyeInventoryDBTypes, false, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lyeDBTypes, false, lyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lye struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LyeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lye().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LyeInventorySlice{&local}
	if err = local.L.LoadLye(ctx, tx, false, (*[]*LyeInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lye = nil
	if err = local.L.LoadLye(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLyeInventoryToOneSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LyeInventory
	var foreign Supplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lyeInventoryDBTypes, false, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LyeInventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*LyeInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLyeInventoryToOneSetOpLyeUsingLye(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LyeInventory
	var b, c Lye

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lyeInventoryDBTypes, false, strmangle.SetComplement(lyeInventoryPrimaryKeyColumns, lyeInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lyeDBTypes, false, strmangle.SetComplement(lyePrimaryKeyColumns, lyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lyeDBTypes, false, strmangle.SetComplement(lyePrimaryKeyColumns, lyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Lye{&b, &c} {
		err = a.SetLye(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lye != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LyeInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LyeID))
		reflect.Indirect(reflect.ValueOf(&a.LyeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID, x.ID)
		}
	}
}
func testLyeInventoryToOneSetOpSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LyeInventory
	var b, c Supplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lyeInventoryDBTypes, false, strmangle.SetComplement(lyeInventoryPrimaryKeyColumns, lyeInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Supplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LyeInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testLyeInventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLyeInventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LyeInventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLyeInventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LyeInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lyeInventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `Concentration`: `double precision`, `LyeID`: `integer`, `SupplierID`: `integer`}
	_                   = bytes.MinRead
)

func testLyeInventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lyeInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lyeInventoryAllColumns) == len(lyeInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLyeInventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lyeInventoryAllColumns) == len(lyeInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LyeInventory{}
	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lyeInventoryDBTypes, true, lyeInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lyeInventoryAllColumns, lyeInventoryPrimaryKeyColumns) {
		fields = lyeInventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			lyeInventoryAllColumns,
			lyeInventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LyeInventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLyeInventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(lyeInventoryAllColumns) == len(lyeInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LyeInventory{}
	if err = randomize.Struct(seed, &o, lyeInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LyeInventory: %s", err)
	}

	count, err := LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lyeInventoryDBTypes, false, lyeInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LyeInventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LyeInventory: %s", err)
	}

	count, err = LyeInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
