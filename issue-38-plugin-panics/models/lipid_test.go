// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLipids(t *testing.T) {
	t.Parallel()

	query := Lipids()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLipidsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLipidsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Lipids().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLipidsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LipidSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLipidsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LipidExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Lipid exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LipidExists to return true, but got false.")
	}
}

func testLipidsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lipidFound, err := FindLipid(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lipidFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLipidsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Lipids().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLipidsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Lipids().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLipidsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lipidOne := &Lipid{}
	lipidTwo := &Lipid{}
	if err = randomize.Struct(seed, lipidOne, lipidDBTypes, false, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}
	if err = randomize.Struct(seed, lipidTwo, lipidDBTypes, false, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLipidsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lipidOne := &Lipid{}
	lipidTwo := &Lipid{}
	if err = randomize.Struct(seed, lipidOne, lipidDBTypes, false, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}
	if err = randomize.Struct(seed, lipidTwo, lipidDBTypes, false, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lipidBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func lipidAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Lipid) error {
	*o = Lipid{}
	return nil
}

func testLipidsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Lipid{}
	o := &Lipid{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lipidDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Lipid object: %s", err)
	}

	AddLipidHook(boil.BeforeInsertHook, lipidBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lipidBeforeInsertHooks = []LipidHook{}

	AddLipidHook(boil.AfterInsertHook, lipidAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lipidAfterInsertHooks = []LipidHook{}

	AddLipidHook(boil.AfterSelectHook, lipidAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lipidAfterSelectHooks = []LipidHook{}

	AddLipidHook(boil.BeforeUpdateHook, lipidBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lipidBeforeUpdateHooks = []LipidHook{}

	AddLipidHook(boil.AfterUpdateHook, lipidAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lipidAfterUpdateHooks = []LipidHook{}

	AddLipidHook(boil.BeforeDeleteHook, lipidBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lipidBeforeDeleteHooks = []LipidHook{}

	AddLipidHook(boil.AfterDeleteHook, lipidAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lipidAfterDeleteHooks = []LipidHook{}

	AddLipidHook(boil.BeforeUpsertHook, lipidBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lipidBeforeUpsertHooks = []LipidHook{}

	AddLipidHook(boil.AfterUpsertHook, lipidAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lipidAfterUpsertHooks = []LipidHook{}
}

func testLipidsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLipidsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lipidColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLipidOneToOneRecipeBatchLipidUsingRecipeBatchLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RecipeBatchLipid
	var local Lipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recipeBatchLipidDBTypes, true, recipeBatchLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLipid struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.LipidID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeBatchLipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.LipidID != foreign.LipidID {
		t.Errorf("want: %v, got %v", foreign.LipidID, check.LipidID)
	}

	slice := LipidSlice{&local}
	if err = local.L.LoadRecipeBatchLipid(ctx, tx, false, (*[]*Lipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeBatchLipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeBatchLipid = nil
	if err = local.L.LoadRecipeBatchLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeBatchLipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLipidOneToOneRecipeLipidUsingRecipeLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RecipeLipid
	var local Lipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recipeLipidDBTypes, true, recipeLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeLipid struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.LipidID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeLipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.LipidID != foreign.LipidID {
		t.Errorf("want: %v, got %v", foreign.LipidID, check.LipidID)
	}

	slice := LipidSlice{&local}
	if err = local.L.LoadRecipeLipid(ctx, tx, false, (*[]*Lipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeLipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeLipid = nil
	if err = local.L.LoadRecipeLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeLipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLipidOneToOneSetOpRecipeBatchLipidUsingRecipeBatchLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lipid
	var b, c RecipeBatchLipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeBatchLipidDBTypes, false, strmangle.SetComplement(recipeBatchLipidPrimaryKeyColumns, recipeBatchLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeBatchLipidDBTypes, false, strmangle.SetComplement(recipeBatchLipidPrimaryKeyColumns, recipeBatchLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeBatchLipid{&b, &c} {
		err = a.SetRecipeBatchLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeBatchLipid != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Lipid != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.LipidID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.LipidID))
		reflect.Indirect(reflect.ValueOf(&x.LipidID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.LipidID {
			t.Error("foreign key was wrong value", a.ID, x.LipidID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testLipidOneToOneSetOpRecipeLipidUsingRecipeLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lipid
	var b, c RecipeLipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeLipidDBTypes, false, strmangle.SetComplement(recipeLipidPrimaryKeyColumns, recipeLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeLipidDBTypes, false, strmangle.SetComplement(recipeLipidPrimaryKeyColumns, recipeLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeLipid{&b, &c} {
		err = a.SetRecipeLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeLipid != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Lipid != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.LipidID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.LipidID))
		reflect.Indirect(reflect.ValueOf(&x.LipidID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.LipidID {
			t.Error("foreign key was wrong value", a.ID, x.LipidID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testLipidToManyLipidInventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lipid
	var b, c LipidInventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LipidID = a.ID
	c.LipidID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LipidInventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LipidID == b.LipidID {
			bFound = true
		}
		if v.LipidID == c.LipidID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := LipidSlice{&a}
	if err = a.L.LoadLipidInventories(ctx, tx, false, (*[]*Lipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidInventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LipidInventories = nil
	if err = a.L.LoadLipidInventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidInventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testLipidToManyAddOpLipidInventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Lipid
	var b, c, d, e LipidInventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LipidInventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, lipidInventoryDBTypes, false, strmangle.SetComplement(lipidInventoryPrimaryKeyColumns, lipidInventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*LipidInventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLipidInventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LipidID {
			t.Error("foreign key was wrong value", a.ID, first.LipidID)
		}
		if a.ID != second.LipidID {
			t.Error("foreign key was wrong value", a.ID, second.LipidID)
		}

		if first.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LipidInventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LipidInventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LipidInventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testLipidsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLipidsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LipidSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLipidsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Lipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lipidDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `Lauric`: `integer`, `Myristic`: `integer`, `Palmitic`: `integer`, `Stearic`: `integer`, `Ricinoleic`: `integer`, `Oleic`: `integer`, `Linoleic`: `integer`, `Linolenic`: `integer`, `Hardness`: `integer`, `Cleansing`: `integer`, `Conditioning`: `integer`, `Bubbly`: `integer`, `Creamy`: `integer`, `Iodine`: `integer`, `Ins`: `integer`, `InciName`: `character varying`, `Family`: `character varying`, `Naoh`: `double precision`}
	_            = bytes.MinRead
)

func testLipidsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lipidPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lipidAllColumns) == len(lipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLipidsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lipidAllColumns) == len(lipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Lipid{}
	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lipidDBTypes, true, lipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lipidAllColumns, lipidPrimaryKeyColumns) {
		fields = lipidAllColumns
	} else {
		fields = strmangle.SetComplement(
			lipidAllColumns,
			lipidPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LipidSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLipidsUpsert(t *testing.T) {
	t.Parallel()

	if len(lipidAllColumns) == len(lipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Lipid{}
	if err = randomize.Struct(seed, &o, lipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Lipid: %s", err)
	}

	count, err := Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lipidDBTypes, false, lipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Lipid: %s", err)
	}

	count, err = Lipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
