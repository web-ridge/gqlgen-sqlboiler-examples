// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeBatchLyes(t *testing.T) {
	t.Parallel()

	query := RecipeBatchLyes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeBatchLyesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchLyesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeBatchLyes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchLyesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchLyeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchLyesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeBatchLyeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeBatchLye exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeBatchLyeExists to return true, but got false.")
	}
}

func testRecipeBatchLyesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeBatchLyeFound, err := FindRecipeBatchLye(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeBatchLyeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeBatchLyesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeBatchLyes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchLyesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeBatchLyes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeBatchLyesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeBatchLyeOne := &RecipeBatchLye{}
	recipeBatchLyeTwo := &RecipeBatchLye{}
	if err = randomize.Struct(seed, recipeBatchLyeOne, recipeBatchLyeDBTypes, false, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchLyeTwo, recipeBatchLyeDBTypes, false, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchLyeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchLyeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatchLyes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeBatchLyesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeBatchLyeOne := &RecipeBatchLye{}
	recipeBatchLyeTwo := &RecipeBatchLye{}
	if err = randomize.Struct(seed, recipeBatchLyeOne, recipeBatchLyeDBTypes, false, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchLyeTwo, recipeBatchLyeDBTypes, false, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchLyeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchLyeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeBatchLyeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func recipeBatchLyeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchLye) error {
	*o = RecipeBatchLye{}
	return nil
}

func testRecipeBatchLyesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeBatchLye{}
	o := &RecipeBatchLye{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye object: %s", err)
	}

	AddRecipeBatchLyeHook(boil.BeforeInsertHook, recipeBatchLyeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeBeforeInsertHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.AfterInsertHook, recipeBatchLyeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeAfterInsertHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.AfterSelectHook, recipeBatchLyeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeAfterSelectHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.BeforeUpdateHook, recipeBatchLyeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeBeforeUpdateHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.AfterUpdateHook, recipeBatchLyeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeAfterUpdateHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.BeforeDeleteHook, recipeBatchLyeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeBeforeDeleteHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.AfterDeleteHook, recipeBatchLyeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeAfterDeleteHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.BeforeUpsertHook, recipeBatchLyeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeBeforeUpsertHooks = []RecipeBatchLyeHook{}

	AddRecipeBatchLyeHook(boil.AfterUpsertHook, recipeBatchLyeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchLyeAfterUpsertHooks = []RecipeBatchLyeHook{}
}

func testRecipeBatchLyesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchLyesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeBatchLyeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchLyeToOneRecipeBatchUsingBatch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatchLye
	var foreign RecipeBatch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchLyeDBTypes, false, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BatchID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Batch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchLyeSlice{&local}
	if err = local.L.LoadBatch(ctx, tx, false, (*[]*RecipeBatchLye)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Batch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Batch = nil
	if err = local.L.LoadBatch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Batch == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchLyeToOneLyeUsingLye(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatchLye
	var foreign Lye

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchLyeDBTypes, false, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lyeDBTypes, false, lyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lye struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LyeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lye().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchLyeSlice{&local}
	if err = local.L.LoadLye(ctx, tx, false, (*[]*RecipeBatchLye)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lye = nil
	if err = local.L.LoadLye(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchLyeToOneSetOpRecipeBatchUsingBatch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatchLye
	var b, c RecipeBatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchLyeDBTypes, false, strmangle.SetComplement(recipeBatchLyePrimaryKeyColumns, recipeBatchLyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeBatch{&b, &c} {
		err = a.SetBatch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Batch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BatchRecipeBatchLyes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BatchID != x.ID {
			t.Error("foreign key was wrong value", a.BatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BatchID))
		reflect.Indirect(reflect.ValueOf(&a.BatchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BatchID != x.ID {
			t.Error("foreign key was wrong value", a.BatchID, x.ID)
		}
	}
}
func testRecipeBatchLyeToOneSetOpLyeUsingLye(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatchLye
	var b, c Lye

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchLyeDBTypes, false, strmangle.SetComplement(recipeBatchLyePrimaryKeyColumns, recipeBatchLyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lyeDBTypes, false, strmangle.SetComplement(lyePrimaryKeyColumns, lyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lyeDBTypes, false, strmangle.SetComplement(lyePrimaryKeyColumns, lyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Lye{&b, &c} {
		err = a.SetLye(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lye != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeBatchLye != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LyeID))
		reflect.Indirect(reflect.ValueOf(&a.LyeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID, x.ID)
		}
	}
}

func testRecipeBatchLyesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchLyesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchLyeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchLyesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatchLyes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeBatchLyeDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Weight`: `double precision`, `Discount`: `double precision`, `Cost`: `double precision`, `LyeID`: `integer`, `BatchID`: `integer`}
	_                     = bytes.MinRead
)

func testRecipeBatchLyesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeBatchLyePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeBatchLyeAllColumns) == len(recipeBatchLyePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeBatchLyesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeBatchLyeAllColumns) == len(recipeBatchLyePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchLye{}
	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchLyeDBTypes, true, recipeBatchLyePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeBatchLyeAllColumns, recipeBatchLyePrimaryKeyColumns) {
		fields = recipeBatchLyeAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeBatchLyeAllColumns,
			recipeBatchLyePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeBatchLyeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeBatchLyesUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeBatchLyeAllColumns) == len(recipeBatchLyePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeBatchLye{}
	if err = randomize.Struct(seed, &o, recipeBatchLyeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatchLye: %s", err)
	}

	count, err := RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeBatchLyeDBTypes, false, recipeBatchLyePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchLye struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatchLye: %s", err)
	}

	count, err = RecipeBatchLyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
