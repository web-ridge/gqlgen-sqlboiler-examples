// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthGroupPermissions(t *testing.T) {
	t.Parallel()

	query := AuthGroupPermissions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthGroupPermissionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthGroupPermissionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthGroupPermissions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthGroupPermissionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthGroupPermissionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthGroupPermissionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthGroupPermissionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthGroupPermission exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthGroupPermissionExists to return true, but got false.")
	}
}

func testAuthGroupPermissionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authGroupPermissionFound, err := FindAuthGroupPermission(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authGroupPermissionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthGroupPermissionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthGroupPermissions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthGroupPermissionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthGroupPermissions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthGroupPermissionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authGroupPermissionOne := &AuthGroupPermission{}
	authGroupPermissionTwo := &AuthGroupPermission{}
	if err = randomize.Struct(seed, authGroupPermissionOne, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, authGroupPermissionTwo, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authGroupPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authGroupPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthGroupPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthGroupPermissionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authGroupPermissionOne := &AuthGroupPermission{}
	authGroupPermissionTwo := &AuthGroupPermission{}
	if err = randomize.Struct(seed, authGroupPermissionOne, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}
	if err = randomize.Struct(seed, authGroupPermissionTwo, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authGroupPermissionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authGroupPermissionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authGroupPermissionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func authGroupPermissionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroupPermission) error {
	*o = AuthGroupPermission{}
	return nil
}

func testAuthGroupPermissionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuthGroupPermission{}
	o := &AuthGroupPermission{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission object: %s", err)
	}

	AddAuthGroupPermissionHook(boil.BeforeInsertHook, authGroupPermissionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionBeforeInsertHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.AfterInsertHook, authGroupPermissionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionAfterInsertHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.AfterSelectHook, authGroupPermissionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionAfterSelectHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.BeforeUpdateHook, authGroupPermissionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionBeforeUpdateHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.AfterUpdateHook, authGroupPermissionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionAfterUpdateHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.BeforeDeleteHook, authGroupPermissionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionBeforeDeleteHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.AfterDeleteHook, authGroupPermissionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionAfterDeleteHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.BeforeUpsertHook, authGroupPermissionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionBeforeUpsertHooks = []AuthGroupPermissionHook{}

	AddAuthGroupPermissionHook(boil.AfterUpsertHook, authGroupPermissionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authGroupPermissionAfterUpsertHooks = []AuthGroupPermissionHook{}
}

func testAuthGroupPermissionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthGroupPermissionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authGroupPermissionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthGroupPermissionToOneAuthPermissionUsingPermission(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AuthGroupPermission
	var foreign AuthPermission

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authPermissionDBTypes, false, authPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthPermission struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PermissionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Permission().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthGroupPermissionSlice{&local}
	if err = local.L.LoadPermission(ctx, tx, false, (*[]*AuthGroupPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Permission == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Permission = nil
	if err = local.L.LoadPermission(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Permission == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAuthGroupPermissionToOneAuthGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AuthGroupPermission
	var foreign AuthGroup

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, authGroupDBTypes, false, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthGroupPermissionSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*AuthGroupPermission)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAuthGroupPermissionToOneSetOpAuthPermissionUsingPermission(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AuthGroupPermission
	var b, c AuthPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authGroupPermissionDBTypes, false, strmangle.SetComplement(authGroupPermissionPrimaryKeyColumns, authGroupPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authPermissionDBTypes, false, strmangle.SetComplement(authPermissionPrimaryKeyColumns, authPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authPermissionDBTypes, false, strmangle.SetComplement(authPermissionPrimaryKeyColumns, authPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AuthPermission{&b, &c} {
		err = a.SetPermission(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Permission != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PermissionAuthGroupPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PermissionID != x.ID {
			t.Error("foreign key was wrong value", a.PermissionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PermissionID))
		reflect.Indirect(reflect.ValueOf(&a.PermissionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PermissionID != x.ID {
			t.Error("foreign key was wrong value", a.PermissionID, x.ID)
		}
	}
}
func testAuthGroupPermissionToOneSetOpAuthGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AuthGroupPermission
	var b, c AuthGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authGroupPermissionDBTypes, false, strmangle.SetComplement(authGroupPermissionPrimaryKeyColumns, authGroupPermissionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, authGroupDBTypes, false, strmangle.SetComplement(authGroupPrimaryKeyColumns, authGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authGroupDBTypes, false, strmangle.SetComplement(authGroupPrimaryKeyColumns, authGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AuthGroup{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupAuthGroupPermissions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}

func testAuthGroupPermissionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthGroupPermissionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthGroupPermissionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthGroupPermissionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthGroupPermissions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authGroupPermissionDBTypes = map[string]string{`ID`: `integer`, `GroupID`: `integer`, `PermissionID`: `integer`}
	_                          = bytes.MinRead
)

func testAuthGroupPermissionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authGroupPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authGroupPermissionAllColumns) == len(authGroupPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthGroupPermissionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authGroupPermissionAllColumns) == len(authGroupPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroupPermission{}
	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authGroupPermissionDBTypes, true, authGroupPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authGroupPermissionAllColumns, authGroupPermissionPrimaryKeyColumns) {
		fields = authGroupPermissionAllColumns
	} else {
		fields = strmangle.SetComplement(
			authGroupPermissionAllColumns,
			authGroupPermissionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthGroupPermissionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthGroupPermissionsUpsert(t *testing.T) {
	t.Parallel()

	if len(authGroupPermissionAllColumns) == len(authGroupPermissionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthGroupPermission{}
	if err = randomize.Struct(seed, &o, authGroupPermissionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthGroupPermission: %s", err)
	}

	count, err := AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authGroupPermissionDBTypes, false, authGroupPermissionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthGroupPermission struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthGroupPermission: %s", err)
	}

	count, err = AuthGroupPermissions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
