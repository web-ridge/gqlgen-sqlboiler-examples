// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoContentType is an object representing the database table.
type DjangoContentType struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AppLabel string `boil:"app_label" json:"app_label" toml:"app_label" yaml:"app_label"`
	Model    string `boil:"model" json:"model" toml:"model" yaml:"model"`

	R *djangoContentTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoContentTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoContentTypeColumns = struct {
	ID       string
	AppLabel string
	Model    string
}{
	ID:       "id",
	AppLabel: "app_label",
	Model:    "model",
}

// Generated where

var DjangoContentTypeWhere = struct {
	ID       whereHelperint
	AppLabel whereHelperstring
	Model    whereHelperstring
}{
	ID:       whereHelperint{field: "\"django_content_type\".\"id\""},
	AppLabel: whereHelperstring{field: "\"django_content_type\".\"app_label\""},
	Model:    whereHelperstring{field: "\"django_content_type\".\"model\""},
}

// DjangoContentTypeRels is where relationship names are stored.
var DjangoContentTypeRels = struct {
	ContentTypeAuthPermissions string
	ContentTypeDjangoAdminLogs string
}{
	ContentTypeAuthPermissions: "ContentTypeAuthPermissions",
	ContentTypeDjangoAdminLogs: "ContentTypeDjangoAdminLogs",
}

// djangoContentTypeR is where relationships are stored.
type djangoContentTypeR struct {
	ContentTypeAuthPermissions AuthPermissionSlice `boil:"ContentTypeAuthPermissions" json:"ContentTypeAuthPermissions" toml:"ContentTypeAuthPermissions" yaml:"ContentTypeAuthPermissions"`
	ContentTypeDjangoAdminLogs DjangoAdminLogSlice `boil:"ContentTypeDjangoAdminLogs" json:"ContentTypeDjangoAdminLogs" toml:"ContentTypeDjangoAdminLogs" yaml:"ContentTypeDjangoAdminLogs"`
}

// NewStruct creates a new relationship struct
func (*djangoContentTypeR) NewStruct() *djangoContentTypeR {
	return &djangoContentTypeR{}
}

// djangoContentTypeL is where Load methods for each relationship are stored.
type djangoContentTypeL struct{}

var (
	djangoContentTypeAllColumns            = []string{"id", "app_label", "model"}
	djangoContentTypeColumnsWithoutDefault = []string{"app_label", "model"}
	djangoContentTypeColumnsWithDefault    = []string{"id"}
	djangoContentTypePrimaryKeyColumns     = []string{"id"}
)

type (
	// DjangoContentTypeSlice is an alias for a slice of pointers to DjangoContentType.
	// This should generally be used opposed to []DjangoContentType.
	DjangoContentTypeSlice []*DjangoContentType
	// DjangoContentTypeHook is the signature for custom DjangoContentType hook methods
	DjangoContentTypeHook func(context.Context, boil.ContextExecutor, *DjangoContentType) error

	djangoContentTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoContentTypeType                 = reflect.TypeOf(&DjangoContentType{})
	djangoContentTypeMapping              = queries.MakeStructMapping(djangoContentTypeType)
	djangoContentTypePrimaryKeyMapping, _ = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, djangoContentTypePrimaryKeyColumns)
	djangoContentTypeInsertCacheMut       sync.RWMutex
	djangoContentTypeInsertCache          = make(map[string]insertCache)
	djangoContentTypeUpdateCacheMut       sync.RWMutex
	djangoContentTypeUpdateCache          = make(map[string]updateCache)
	djangoContentTypeUpsertCacheMut       sync.RWMutex
	djangoContentTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var djangoContentTypeBeforeInsertHooks []DjangoContentTypeHook
var djangoContentTypeBeforeUpdateHooks []DjangoContentTypeHook
var djangoContentTypeBeforeDeleteHooks []DjangoContentTypeHook
var djangoContentTypeBeforeUpsertHooks []DjangoContentTypeHook

var djangoContentTypeAfterInsertHooks []DjangoContentTypeHook
var djangoContentTypeAfterSelectHooks []DjangoContentTypeHook
var djangoContentTypeAfterUpdateHooks []DjangoContentTypeHook
var djangoContentTypeAfterDeleteHooks []DjangoContentTypeHook
var djangoContentTypeAfterUpsertHooks []DjangoContentTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DjangoContentType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DjangoContentType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DjangoContentType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DjangoContentType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DjangoContentType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DjangoContentType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DjangoContentType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DjangoContentType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DjangoContentType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoContentTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDjangoContentTypeHook registers your hook function for all future operations.
func AddDjangoContentTypeHook(hookPoint boil.HookPoint, djangoContentTypeHook DjangoContentTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		djangoContentTypeBeforeInsertHooks = append(djangoContentTypeBeforeInsertHooks, djangoContentTypeHook)
	case boil.BeforeUpdateHook:
		djangoContentTypeBeforeUpdateHooks = append(djangoContentTypeBeforeUpdateHooks, djangoContentTypeHook)
	case boil.BeforeDeleteHook:
		djangoContentTypeBeforeDeleteHooks = append(djangoContentTypeBeforeDeleteHooks, djangoContentTypeHook)
	case boil.BeforeUpsertHook:
		djangoContentTypeBeforeUpsertHooks = append(djangoContentTypeBeforeUpsertHooks, djangoContentTypeHook)
	case boil.AfterInsertHook:
		djangoContentTypeAfterInsertHooks = append(djangoContentTypeAfterInsertHooks, djangoContentTypeHook)
	case boil.AfterSelectHook:
		djangoContentTypeAfterSelectHooks = append(djangoContentTypeAfterSelectHooks, djangoContentTypeHook)
	case boil.AfterUpdateHook:
		djangoContentTypeAfterUpdateHooks = append(djangoContentTypeAfterUpdateHooks, djangoContentTypeHook)
	case boil.AfterDeleteHook:
		djangoContentTypeAfterDeleteHooks = append(djangoContentTypeAfterDeleteHooks, djangoContentTypeHook)
	case boil.AfterUpsertHook:
		djangoContentTypeAfterUpsertHooks = append(djangoContentTypeAfterUpsertHooks, djangoContentTypeHook)
	}
}

// One returns a single djangoContentType record from the query.
func (q djangoContentTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DjangoContentType, error) {
	o := &DjangoContentType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for django_content_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DjangoContentType records from the query.
func (q djangoContentTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (DjangoContentTypeSlice, error) {
	var o []*DjangoContentType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DjangoContentType slice")
	}

	if len(djangoContentTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DjangoContentType records in the query.
func (q djangoContentTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count django_content_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoContentTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if django_content_type exists")
	}

	return count > 0, nil
}

// ContentTypeAuthPermissions retrieves all the auth_permission's AuthPermissions with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeAuthPermissions(mods ...qm.QueryMod) authPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_permission\".\"content_type_id\"=?", o.ID),
	)

	query := AuthPermissions(queryMods...)
	queries.SetFrom(query.Query, "\"auth_permission\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auth_permission\".*"})
	}

	return query
}

// ContentTypeDjangoAdminLogs retrieves all the django_admin_log's DjangoAdminLogs with an executor via content_type_id column.
func (o *DjangoContentType) ContentTypeDjangoAdminLogs(mods ...qm.QueryMod) djangoAdminLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"django_admin_log\".\"content_type_id\"=?", o.ID),
	)

	query := DjangoAdminLogs(queryMods...)
	queries.SetFrom(query.Query, "\"django_admin_log\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"django_admin_log\".*"})
	}

	return query
}

// LoadContentTypeAuthPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoContentTypeL) LoadContentTypeAuthPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDjangoContentType interface{}, mods queries.Applicator) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	if singular {
		object = maybeDjangoContentType.(*DjangoContentType)
	} else {
		slice = *maybeDjangoContentType.(*[]*DjangoContentType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auth_permission`),
		qm.WhereIn(`auth_permission.content_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_permission")
	}

	var resultSlice []*AuthPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_permission")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_permission")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_permission")
	}

	if len(authPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContentTypeAuthPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentTypeID {
				local.R.ContentTypeAuthPermissions = append(local.R.ContentTypeAuthPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContentTypeDjangoAdminLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (djangoContentTypeL) LoadContentTypeDjangoAdminLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDjangoContentType interface{}, mods queries.Applicator) error {
	var slice []*DjangoContentType
	var object *DjangoContentType

	if singular {
		object = maybeDjangoContentType.(*DjangoContentType)
	} else {
		slice = *maybeDjangoContentType.(*[]*DjangoContentType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &djangoContentTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoContentTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`django_admin_log`),
		qm.WhereIn(`django_admin_log.content_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load django_admin_log")
	}

	var resultSlice []*DjangoAdminLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice django_admin_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on django_admin_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_admin_log")
	}

	if len(djangoAdminLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContentTypeDjangoAdminLogs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ContentTypeID) {
				local.R.ContentTypeDjangoAdminLogs = append(local.R.ContentTypeDjangoAdminLogs, foreign)
				break
			}
		}
	}

	return nil
}

// AddContentTypeAuthPermissions adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeAuthPermissions.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeAuthPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuthPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentTypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_permission\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, authPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeAuthPermissions: related,
		}
	} else {
		o.R.ContentTypeAuthPermissions = append(o.R.ContentTypeAuthPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authPermissionR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// AddContentTypeDjangoAdminLogs adds the given related objects to the existing relationships
// of the django_content_type, optionally inserting them as new records.
// Appends related to o.R.ContentTypeDjangoAdminLogs.
// Sets related.R.ContentType appropriately.
func (o *DjangoContentType) AddContentTypeDjangoAdminLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ContentTypeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"django_admin_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, djangoAdminLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ContentTypeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &djangoContentTypeR{
			ContentTypeDjangoAdminLogs: related,
		}
	} else {
		o.R.ContentTypeDjangoAdminLogs = append(o.R.ContentTypeDjangoAdminLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &djangoAdminLogR{
				ContentType: o,
			}
		} else {
			rel.R.ContentType = o
		}
	}
	return nil
}

// SetContentTypeDjangoAdminLogs removes all previously related items of the
// django_content_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
// Replaces o.R.ContentTypeDjangoAdminLogs with related.
// Sets related.R.ContentType's ContentTypeDjangoAdminLogs accordingly.
func (o *DjangoContentType) SetContentTypeDjangoAdminLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DjangoAdminLog) error {
	query := "update \"django_admin_log\" set \"content_type_id\" = null where \"content_type_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ContentTypeDjangoAdminLogs {
			queries.SetScanner(&rel.ContentTypeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ContentType = nil
		}

		o.R.ContentTypeDjangoAdminLogs = nil
	}
	return o.AddContentTypeDjangoAdminLogs(ctx, exec, insert, related...)
}

// RemoveContentTypeDjangoAdminLogs relationships from objects passed in.
// Removes related items from R.ContentTypeDjangoAdminLogs (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentType.
func (o *DjangoContentType) RemoveContentTypeDjangoAdminLogs(ctx context.Context, exec boil.ContextExecutor, related ...*DjangoAdminLog) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ContentTypeID, nil)
		if rel.R != nil {
			rel.R.ContentType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("content_type_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContentTypeDjangoAdminLogs {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContentTypeDjangoAdminLogs)
			if ln > 1 && i < ln-1 {
				o.R.ContentTypeDjangoAdminLogs[i] = o.R.ContentTypeDjangoAdminLogs[ln-1]
			}
			o.R.ContentTypeDjangoAdminLogs = o.R.ContentTypeDjangoAdminLogs[:ln-1]
			break
		}
	}

	return nil
}

// DjangoContentTypes retrieves all the records using an executor.
func DjangoContentTypes(mods ...qm.QueryMod) djangoContentTypeQuery {
	mods = append(mods, qm.From("\"django_content_type\""))
	return djangoContentTypeQuery{NewQuery(mods...)}
}

// FindDjangoContentType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoContentType(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DjangoContentType, error) {
	djangoContentTypeObj := &DjangoContentType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_content_type\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, djangoContentTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from django_content_type")
	}

	return djangoContentTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoContentType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no django_content_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoContentTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoContentTypeInsertCacheMut.RLock()
	cache, cached := djangoContentTypeInsertCache[key]
	djangoContentTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypeColumnsWithDefault,
			djangoContentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_content_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_content_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into django_content_type")
	}

	if !cached {
		djangoContentTypeInsertCacheMut.Lock()
		djangoContentTypeInsertCache[key] = cache
		djangoContentTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DjangoContentType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoContentType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	djangoContentTypeUpdateCacheMut.RLock()
	cache, cached := djangoContentTypeUpdateCache[key]
	djangoContentTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update django_content_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_content_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoContentTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, append(wl, djangoContentTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update django_content_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for django_content_type")
	}

	if !cached {
		djangoContentTypeUpdateCacheMut.Lock()
		djangoContentTypeUpdateCache[key] = cache
		djangoContentTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q djangoContentTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for django_content_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for django_content_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoContentTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_content_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoContentTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in djangoContentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all djangoContentType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoContentType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no django_content_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoContentTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoContentTypeUpsertCacheMut.RLock()
	cache, cached := djangoContentTypeUpsertCache[key]
	djangoContentTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypeColumnsWithDefault,
			djangoContentTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			djangoContentTypeAllColumns,
			djangoContentTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert django_content_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(djangoContentTypePrimaryKeyColumns))
			copy(conflict, djangoContentTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_content_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoContentTypeType, djangoContentTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert django_content_type")
	}

	if !cached {
		djangoContentTypeUpsertCacheMut.Lock()
		djangoContentTypeUpsertCache[key] = cache
		djangoContentTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DjangoContentType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoContentType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DjangoContentType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoContentTypePrimaryKeyMapping)
	sql := "DELETE FROM \"django_content_type\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from django_content_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for django_content_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoContentTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no djangoContentTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from django_content_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for django_content_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoContentTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(djangoContentTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_content_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoContentTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from djangoContentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for django_content_type")
	}

	if len(djangoContentTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoContentType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDjangoContentType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoContentTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoContentTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoContentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_content_type\".* FROM \"django_content_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoContentTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DjangoContentTypeSlice")
	}

	*o = slice

	return nil
}

// DjangoContentTypeExists checks if the DjangoContentType row exists.
func DjangoContentTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_content_type\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if django_content_type exists")
	}

	return exists, nil
}
