// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FragranceInventory is an object representing the database table.
type FragranceInventory struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	PurchaseDate time.Time `boil:"purchase_date" json:"purchase_date" toml:"purchase_date" yaml:"purchase_date"`
	ExpiryDate   time.Time `boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	Cost         float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Weight       float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	FragranceID  int       `boil:"fragrance_id" json:"fragrance_id" toml:"fragrance_id" yaml:"fragrance_id"`
	SupplierID   int       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`

	R *fragranceInventoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fragranceInventoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FragranceInventoryColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	PurchaseDate string
	ExpiryDate   string
	Cost         string
	Weight       string
	FragranceID  string
	SupplierID   string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	PurchaseDate: "purchase_date",
	ExpiryDate:   "expiry_date",
	Cost:         "cost",
	Weight:       "weight",
	FragranceID:  "fragrance_id",
	SupplierID:   "supplier_id",
}

// Generated where

var FragranceInventoryWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	PurchaseDate whereHelpertime_Time
	ExpiryDate   whereHelpertime_Time
	Cost         whereHelperfloat64
	Weight       whereHelperfloat64
	FragranceID  whereHelperint
	SupplierID   whereHelperint
}{
	ID:           whereHelperint{field: "\"fragrance_inventory\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"fragrance_inventory\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"fragrance_inventory\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"fragrance_inventory\".\"deleted_at\""},
	PurchaseDate: whereHelpertime_Time{field: "\"fragrance_inventory\".\"purchase_date\""},
	ExpiryDate:   whereHelpertime_Time{field: "\"fragrance_inventory\".\"expiry_date\""},
	Cost:         whereHelperfloat64{field: "\"fragrance_inventory\".\"cost\""},
	Weight:       whereHelperfloat64{field: "\"fragrance_inventory\".\"weight\""},
	FragranceID:  whereHelperint{field: "\"fragrance_inventory\".\"fragrance_id\""},
	SupplierID:   whereHelperint{field: "\"fragrance_inventory\".\"supplier_id\""},
}

// FragranceInventoryRels is where relationship names are stored.
var FragranceInventoryRels = struct {
	Fragrance string
	Supplier  string
}{
	Fragrance: "Fragrance",
	Supplier:  "Supplier",
}

// fragranceInventoryR is where relationships are stored.
type fragranceInventoryR struct {
	Fragrance *Fragrance `boil:"Fragrance" json:"Fragrance" toml:"Fragrance" yaml:"Fragrance"`
	Supplier  *Supplier  `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
}

// NewStruct creates a new relationship struct
func (*fragranceInventoryR) NewStruct() *fragranceInventoryR {
	return &fragranceInventoryR{}
}

// fragranceInventoryL is where Load methods for each relationship are stored.
type fragranceInventoryL struct{}

var (
	fragranceInventoryAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "fragrance_id", "supplier_id"}
	fragranceInventoryColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "fragrance_id", "supplier_id"}
	fragranceInventoryColumnsWithDefault    = []string{"id"}
	fragranceInventoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// FragranceInventorySlice is an alias for a slice of pointers to FragranceInventory.
	// This should generally be used opposed to []FragranceInventory.
	FragranceInventorySlice []*FragranceInventory
	// FragranceInventoryHook is the signature for custom FragranceInventory hook methods
	FragranceInventoryHook func(context.Context, boil.ContextExecutor, *FragranceInventory) error

	fragranceInventoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fragranceInventoryType                 = reflect.TypeOf(&FragranceInventory{})
	fragranceInventoryMapping              = queries.MakeStructMapping(fragranceInventoryType)
	fragranceInventoryPrimaryKeyMapping, _ = queries.BindMapping(fragranceInventoryType, fragranceInventoryMapping, fragranceInventoryPrimaryKeyColumns)
	fragranceInventoryInsertCacheMut       sync.RWMutex
	fragranceInventoryInsertCache          = make(map[string]insertCache)
	fragranceInventoryUpdateCacheMut       sync.RWMutex
	fragranceInventoryUpdateCache          = make(map[string]updateCache)
	fragranceInventoryUpsertCacheMut       sync.RWMutex
	fragranceInventoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fragranceInventoryBeforeInsertHooks []FragranceInventoryHook
var fragranceInventoryBeforeUpdateHooks []FragranceInventoryHook
var fragranceInventoryBeforeDeleteHooks []FragranceInventoryHook
var fragranceInventoryBeforeUpsertHooks []FragranceInventoryHook

var fragranceInventoryAfterInsertHooks []FragranceInventoryHook
var fragranceInventoryAfterSelectHooks []FragranceInventoryHook
var fragranceInventoryAfterUpdateHooks []FragranceInventoryHook
var fragranceInventoryAfterDeleteHooks []FragranceInventoryHook
var fragranceInventoryAfterUpsertHooks []FragranceInventoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FragranceInventory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FragranceInventory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FragranceInventory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FragranceInventory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FragranceInventory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FragranceInventory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FragranceInventory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FragranceInventory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FragranceInventory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceInventoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFragranceInventoryHook registers your hook function for all future operations.
func AddFragranceInventoryHook(hookPoint boil.HookPoint, fragranceInventoryHook FragranceInventoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fragranceInventoryBeforeInsertHooks = append(fragranceInventoryBeforeInsertHooks, fragranceInventoryHook)
	case boil.BeforeUpdateHook:
		fragranceInventoryBeforeUpdateHooks = append(fragranceInventoryBeforeUpdateHooks, fragranceInventoryHook)
	case boil.BeforeDeleteHook:
		fragranceInventoryBeforeDeleteHooks = append(fragranceInventoryBeforeDeleteHooks, fragranceInventoryHook)
	case boil.BeforeUpsertHook:
		fragranceInventoryBeforeUpsertHooks = append(fragranceInventoryBeforeUpsertHooks, fragranceInventoryHook)
	case boil.AfterInsertHook:
		fragranceInventoryAfterInsertHooks = append(fragranceInventoryAfterInsertHooks, fragranceInventoryHook)
	case boil.AfterSelectHook:
		fragranceInventoryAfterSelectHooks = append(fragranceInventoryAfterSelectHooks, fragranceInventoryHook)
	case boil.AfterUpdateHook:
		fragranceInventoryAfterUpdateHooks = append(fragranceInventoryAfterUpdateHooks, fragranceInventoryHook)
	case boil.AfterDeleteHook:
		fragranceInventoryAfterDeleteHooks = append(fragranceInventoryAfterDeleteHooks, fragranceInventoryHook)
	case boil.AfterUpsertHook:
		fragranceInventoryAfterUpsertHooks = append(fragranceInventoryAfterUpsertHooks, fragranceInventoryHook)
	}
}

// One returns a single fragranceInventory record from the query.
func (q fragranceInventoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FragranceInventory, error) {
	o := &FragranceInventory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fragrance_inventory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FragranceInventory records from the query.
func (q fragranceInventoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (FragranceInventorySlice, error) {
	var o []*FragranceInventory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FragranceInventory slice")
	}

	if len(fragranceInventoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FragranceInventory records in the query.
func (q fragranceInventoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fragrance_inventory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fragranceInventoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fragrance_inventory exists")
	}

	return count > 0, nil
}

// Fragrance pointed to by the foreign key.
func (o *FragranceInventory) Fragrance(mods ...qm.QueryMod) fragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FragranceID),
	}

	queryMods = append(queryMods, mods...)

	query := Fragrances(queryMods...)
	queries.SetFrom(query.Query, "\"fragrance\"")

	return query
}

// Supplier pointed to by the foreign key.
func (o *FragranceInventory) Supplier(mods ...qm.QueryMod) supplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
	}

	queryMods = append(queryMods, mods...)

	query := Suppliers(queryMods...)
	queries.SetFrom(query.Query, "\"supplier\"")

	return query
}

// LoadFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fragranceInventoryL) LoadFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFragranceInventory interface{}, mods queries.Applicator) error {
	var slice []*FragranceInventory
	var object *FragranceInventory

	if singular {
		object = maybeFragranceInventory.(*FragranceInventory)
	} else {
		slice = *maybeFragranceInventory.(*[]*FragranceInventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fragranceInventoryR{}
		}
		args = append(args, object.FragranceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fragranceInventoryR{}
			}

			for _, a := range args {
				if a == obj.FragranceID {
					continue Outer
				}
			}

			args = append(args, obj.FragranceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fragrance`),
		qm.WhereIn(`fragrance.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Fragrance")
	}

	var resultSlice []*Fragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Fragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fragrance")
	}

	if len(fragranceInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fragrance = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FragranceID == foreign.ID {
				local.R.Fragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fragranceInventoryL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFragranceInventory interface{}, mods queries.Applicator) error {
	var slice []*FragranceInventory
	var object *FragranceInventory

	if singular {
		object = maybeFragranceInventory.(*FragranceInventory)
	} else {
		slice = *maybeFragranceInventory.(*[]*FragranceInventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fragranceInventoryR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fragranceInventoryR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`supplier`),
		qm.WhereIn(`supplier.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Supplier")
	}

	var resultSlice []*Supplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Supplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for supplier")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for supplier")
	}

	if len(fragranceInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				break
			}
		}
	}

	return nil
}

// SetFragrance of the fragranceInventory to the related item.
// Sets o.R.Fragrance to related.
// Adds o to related.R.FragranceInventories.
func (o *FragranceInventory) SetFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Fragrance) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fragrance_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
		strmangle.WhereClause("\"", "\"", 2, fragranceInventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FragranceID = related.ID
	if o.R == nil {
		o.R = &fragranceInventoryR{
			Fragrance: related,
		}
	} else {
		o.R.Fragrance = related
	}

	if related.R == nil {
		related.R = &fragranceR{
			FragranceInventories: FragranceInventorySlice{o},
		}
	} else {
		related.R.FragranceInventories = append(related.R.FragranceInventories, o)
	}

	return nil
}

// SetSupplier of the fragranceInventory to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.FragranceInventories.
func (o *FragranceInventory) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Supplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fragrance_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, fragranceInventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &fragranceInventoryR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &supplierR{
			FragranceInventories: FragranceInventorySlice{o},
		}
	} else {
		related.R.FragranceInventories = append(related.R.FragranceInventories, o)
	}

	return nil
}

// FragranceInventories retrieves all the records using an executor.
func FragranceInventories(mods ...qm.QueryMod) fragranceInventoryQuery {
	mods = append(mods, qm.From("\"fragrance_inventory\""))
	return fragranceInventoryQuery{NewQuery(mods...)}
}

// FindFragranceInventory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFragranceInventory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*FragranceInventory, error) {
	fragranceInventoryObj := &FragranceInventory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fragrance_inventory\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fragranceInventoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fragrance_inventory")
	}

	return fragranceInventoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FragranceInventory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fragrance_inventory provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fragranceInventoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fragranceInventoryInsertCacheMut.RLock()
	cache, cached := fragranceInventoryInsertCache[key]
	fragranceInventoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fragranceInventoryAllColumns,
			fragranceInventoryColumnsWithDefault,
			fragranceInventoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fragranceInventoryType, fragranceInventoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fragranceInventoryType, fragranceInventoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fragrance_inventory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fragrance_inventory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fragrance_inventory")
	}

	if !cached {
		fragranceInventoryInsertCacheMut.Lock()
		fragranceInventoryInsertCache[key] = cache
		fragranceInventoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FragranceInventory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FragranceInventory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fragranceInventoryUpdateCacheMut.RLock()
	cache, cached := fragranceInventoryUpdateCache[key]
	fragranceInventoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fragranceInventoryAllColumns,
			fragranceInventoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fragrance_inventory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fragrance_inventory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fragranceInventoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fragranceInventoryType, fragranceInventoryMapping, append(wl, fragranceInventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fragrance_inventory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fragrance_inventory")
	}

	if !cached {
		fragranceInventoryUpdateCacheMut.Lock()
		fragranceInventoryUpdateCache[key] = cache
		fragranceInventoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fragranceInventoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fragrance_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fragrance_inventory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FragranceInventorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fragranceInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fragrance_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fragranceInventoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fragranceInventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fragranceInventory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FragranceInventory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fragrance_inventory provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fragranceInventoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fragranceInventoryUpsertCacheMut.RLock()
	cache, cached := fragranceInventoryUpsertCache[key]
	fragranceInventoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fragranceInventoryAllColumns,
			fragranceInventoryColumnsWithDefault,
			fragranceInventoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fragranceInventoryAllColumns,
			fragranceInventoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert fragrance_inventory, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fragranceInventoryPrimaryKeyColumns))
			copy(conflict, fragranceInventoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fragrance_inventory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fragranceInventoryType, fragranceInventoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fragranceInventoryType, fragranceInventoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert fragrance_inventory")
	}

	if !cached {
		fragranceInventoryUpsertCacheMut.Lock()
		fragranceInventoryUpsertCache[key] = cache
		fragranceInventoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FragranceInventory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FragranceInventory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FragranceInventory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fragranceInventoryPrimaryKeyMapping)
	sql := "DELETE FROM \"fragrance_inventory\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fragrance_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fragrance_inventory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fragranceInventoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fragranceInventoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fragrance_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fragrance_inventory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FragranceInventorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fragranceInventoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fragranceInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fragrance_inventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fragranceInventoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fragranceInventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fragrance_inventory")
	}

	if len(fragranceInventoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FragranceInventory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFragranceInventory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FragranceInventorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FragranceInventorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fragranceInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fragrance_inventory\".* FROM \"fragrance_inventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fragranceInventoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FragranceInventorySlice")
	}

	*o = slice

	return nil
}

// FragranceInventoryExists checks if the FragranceInventory row exists.
func FragranceInventoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fragrance_inventory\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fragrance_inventory exists")
	}

	return exists, nil
}
