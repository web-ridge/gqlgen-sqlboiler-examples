// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Supplier is an object representing the database table.
type Supplier struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Website   string    `boil:"website" json:"website" toml:"website" yaml:"website"`
	Note      string    `boil:"note" json:"note" toml:"note" yaml:"note"`

	R *supplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L supplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SupplierColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Name      string
	Website   string
	Note      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Name:      "name",
	Website:   "website",
	Note:      "note",
}

// Generated where

var SupplierWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Name      whereHelperstring
	Website   whereHelperstring
	Note      whereHelperstring
}{
	ID:        whereHelperint{field: "\"supplier\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"supplier\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"supplier\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"supplier\".\"deleted_at\""},
	Name:      whereHelperstring{field: "\"supplier\".\"name\""},
	Website:   whereHelperstring{field: "\"supplier\".\"website\""},
	Note:      whereHelperstring{field: "\"supplier\".\"note\""},
}

// SupplierRels is where relationship names are stored.
var SupplierRels = struct {
	AdditiveInventories  string
	FragranceInventories string
	LipidInventories     string
	LyeInventories       string
}{
	AdditiveInventories:  "AdditiveInventories",
	FragranceInventories: "FragranceInventories",
	LipidInventories:     "LipidInventories",
	LyeInventories:       "LyeInventories",
}

// supplierR is where relationships are stored.
type supplierR struct {
	AdditiveInventories  AdditiveInventorySlice  `boil:"AdditiveInventories" json:"AdditiveInventories" toml:"AdditiveInventories" yaml:"AdditiveInventories"`
	FragranceInventories FragranceInventorySlice `boil:"FragranceInventories" json:"FragranceInventories" toml:"FragranceInventories" yaml:"FragranceInventories"`
	LipidInventories     LipidInventorySlice     `boil:"LipidInventories" json:"LipidInventories" toml:"LipidInventories" yaml:"LipidInventories"`
	LyeInventories       LyeInventorySlice       `boil:"LyeInventories" json:"LyeInventories" toml:"LyeInventories" yaml:"LyeInventories"`
}

// NewStruct creates a new relationship struct
func (*supplierR) NewStruct() *supplierR {
	return &supplierR{}
}

// supplierL is where Load methods for each relationship are stored.
type supplierL struct{}

var (
	supplierAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "website", "note"}
	supplierColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "website", "note"}
	supplierColumnsWithDefault    = []string{"id"}
	supplierPrimaryKeyColumns     = []string{"id"}
)

type (
	// SupplierSlice is an alias for a slice of pointers to Supplier.
	// This should generally be used opposed to []Supplier.
	SupplierSlice []*Supplier
	// SupplierHook is the signature for custom Supplier hook methods
	SupplierHook func(context.Context, boil.ContextExecutor, *Supplier) error

	supplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	supplierType                 = reflect.TypeOf(&Supplier{})
	supplierMapping              = queries.MakeStructMapping(supplierType)
	supplierPrimaryKeyMapping, _ = queries.BindMapping(supplierType, supplierMapping, supplierPrimaryKeyColumns)
	supplierInsertCacheMut       sync.RWMutex
	supplierInsertCache          = make(map[string]insertCache)
	supplierUpdateCacheMut       sync.RWMutex
	supplierUpdateCache          = make(map[string]updateCache)
	supplierUpsertCacheMut       sync.RWMutex
	supplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var supplierBeforeInsertHooks []SupplierHook
var supplierBeforeUpdateHooks []SupplierHook
var supplierBeforeDeleteHooks []SupplierHook
var supplierBeforeUpsertHooks []SupplierHook

var supplierAfterInsertHooks []SupplierHook
var supplierAfterSelectHooks []SupplierHook
var supplierAfterUpdateHooks []SupplierHook
var supplierAfterDeleteHooks []SupplierHook
var supplierAfterUpsertHooks []SupplierHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Supplier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Supplier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Supplier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Supplier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Supplier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Supplier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Supplier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Supplier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Supplier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range supplierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSupplierHook registers your hook function for all future operations.
func AddSupplierHook(hookPoint boil.HookPoint, supplierHook SupplierHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		supplierBeforeInsertHooks = append(supplierBeforeInsertHooks, supplierHook)
	case boil.BeforeUpdateHook:
		supplierBeforeUpdateHooks = append(supplierBeforeUpdateHooks, supplierHook)
	case boil.BeforeDeleteHook:
		supplierBeforeDeleteHooks = append(supplierBeforeDeleteHooks, supplierHook)
	case boil.BeforeUpsertHook:
		supplierBeforeUpsertHooks = append(supplierBeforeUpsertHooks, supplierHook)
	case boil.AfterInsertHook:
		supplierAfterInsertHooks = append(supplierAfterInsertHooks, supplierHook)
	case boil.AfterSelectHook:
		supplierAfterSelectHooks = append(supplierAfterSelectHooks, supplierHook)
	case boil.AfterUpdateHook:
		supplierAfterUpdateHooks = append(supplierAfterUpdateHooks, supplierHook)
	case boil.AfterDeleteHook:
		supplierAfterDeleteHooks = append(supplierAfterDeleteHooks, supplierHook)
	case boil.AfterUpsertHook:
		supplierAfterUpsertHooks = append(supplierAfterUpsertHooks, supplierHook)
	}
}

// One returns a single supplier record from the query.
func (q supplierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Supplier, error) {
	o := &Supplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for supplier")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Supplier records from the query.
func (q supplierQuery) All(ctx context.Context, exec boil.ContextExecutor) (SupplierSlice, error) {
	var o []*Supplier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Supplier slice")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Supplier records in the query.
func (q supplierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count supplier rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q supplierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if supplier exists")
	}

	return count > 0, nil
}

// AdditiveInventories retrieves all the additive_inventory's AdditiveInventories with an executor.
func (o *Supplier) AdditiveInventories(mods ...qm.QueryMod) additiveInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"additive_inventory\".\"supplier_id\"=?", o.ID),
	)

	query := AdditiveInventories(queryMods...)
	queries.SetFrom(query.Query, "\"additive_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"additive_inventory\".*"})
	}

	return query
}

// FragranceInventories retrieves all the fragrance_inventory's FragranceInventories with an executor.
func (o *Supplier) FragranceInventories(mods ...qm.QueryMod) fragranceInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fragrance_inventory\".\"supplier_id\"=?", o.ID),
	)

	query := FragranceInventories(queryMods...)
	queries.SetFrom(query.Query, "\"fragrance_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"fragrance_inventory\".*"})
	}

	return query
}

// LipidInventories retrieves all the lipid_inventory's LipidInventories with an executor.
func (o *Supplier) LipidInventories(mods ...qm.QueryMod) lipidInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lipid_inventory\".\"supplier_id\"=?", o.ID),
	)

	query := LipidInventories(queryMods...)
	queries.SetFrom(query.Query, "\"lipid_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"lipid_inventory\".*"})
	}

	return query
}

// LyeInventories retrieves all the lye_inventory's LyeInventories with an executor.
func (o *Supplier) LyeInventories(mods ...qm.QueryMod) lyeInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lye_inventory\".\"supplier_id\"=?", o.ID),
	)

	query := LyeInventories(queryMods...)
	queries.SetFrom(query.Query, "\"lye_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"lye_inventory\".*"})
	}

	return query
}

// LoadAdditiveInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadAdditiveInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`additive_inventory`),
		qm.WhereIn(`additive_inventory.supplier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load additive_inventory")
	}

	var resultSlice []*AdditiveInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice additive_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on additive_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for additive_inventory")
	}

	if len(additiveInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AdditiveInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.AdditiveInventories = append(local.R.AdditiveInventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFragranceInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadFragranceInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fragrance_inventory`),
		qm.WhereIn(`fragrance_inventory.supplier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fragrance_inventory")
	}

	var resultSlice []*FragranceInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fragrance_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fragrance_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fragrance_inventory")
	}

	if len(fragranceInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FragranceInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.FragranceInventories = append(local.R.FragranceInventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLipidInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadLipidInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lipid_inventory`),
		qm.WhereIn(`lipid_inventory.supplier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lipid_inventory")
	}

	var resultSlice []*LipidInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lipid_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lipid_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lipid_inventory")
	}

	if len(lipidInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LipidInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.LipidInventories = append(local.R.LipidInventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLyeInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (supplierL) LoadLyeInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSupplier interface{}, mods queries.Applicator) error {
	var slice []*Supplier
	var object *Supplier

	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lye_inventory`),
		qm.WhereIn(`lye_inventory.supplier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lye_inventory")
	}

	var resultSlice []*LyeInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lye_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lye_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lye_inventory")
	}

	if len(lyeInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LyeInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.LyeInventories = append(local.R.LyeInventories, foreign)
				break
			}
		}
	}

	return nil
}

// AddAdditiveInventories adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.AdditiveInventories.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddAdditiveInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AdditiveInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"additive_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, additiveInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			AdditiveInventories: related,
		}
	} else {
		o.R.AdditiveInventories = append(o.R.AdditiveInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &additiveInventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddFragranceInventories adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.FragranceInventories.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddFragranceInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FragranceInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fragrance_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, fragranceInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			FragranceInventories: related,
		}
	} else {
		o.R.FragranceInventories = append(o.R.FragranceInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fragranceInventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddLipidInventories adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.LipidInventories.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddLipidInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LipidInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lipid_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, lipidInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			LipidInventories: related,
		}
	} else {
		o.R.LipidInventories = append(o.R.LipidInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lipidInventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddLyeInventories adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.LyeInventories.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddLyeInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LyeInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lye_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, lyeInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			LyeInventories: related,
		}
	} else {
		o.R.LyeInventories = append(o.R.LyeInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lyeInventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// Suppliers retrieves all the records using an executor.
func Suppliers(mods ...qm.QueryMod) supplierQuery {
	mods = append(mods, qm.From("\"supplier\""))
	return supplierQuery{NewQuery(mods...)}
}

// FindSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSupplier(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Supplier, error) {
	supplierObj := &Supplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"supplier\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, supplierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from supplier")
	}

	return supplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Supplier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no supplier provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	supplierInsertCacheMut.RLock()
	cache, cached := supplierInsertCache[key]
	supplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"supplier\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"supplier\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into supplier")
	}

	if !cached {
		supplierInsertCacheMut.Lock()
		supplierInsertCache[key] = cache
		supplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Supplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Supplier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	supplierUpdateCacheMut.RLock()
	cache, cached := supplierUpdateCache[key]
	supplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update supplier, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"supplier\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, supplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, append(wl, supplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update supplier row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for supplier")
	}

	if !cached {
		supplierUpdateCacheMut.Lock()
		supplierUpdateCache[key] = cache
		supplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q supplierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for supplier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for supplier")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SupplierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"supplier\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, supplierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all supplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Supplier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no supplier provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	supplierUpsertCacheMut.RLock()
	cache, cached := supplierUpsertCache[key]
	supplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			supplierAllColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			supplierAllColumns,
			supplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert supplier, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(supplierPrimaryKeyColumns))
			copy(conflict, supplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"supplier\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert supplier")
	}

	if !cached {
		supplierUpsertCacheMut.Lock()
		supplierUpsertCache[key] = cache
		supplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Supplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Supplier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Supplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), supplierPrimaryKeyMapping)
	sql := "DELETE FROM \"supplier\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from supplier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for supplier")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q supplierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no supplierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supplier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for supplier")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SupplierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(supplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"supplier\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from supplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for supplier")
	}

	if len(supplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Supplier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSupplier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupplierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"supplier\".* FROM \"supplier\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, supplierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SupplierSlice")
	}

	*o = slice

	return nil
}

// SupplierExists checks if the Supplier row exists.
func SupplierExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"supplier\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if supplier exists")
	}

	return exists, nil
}
