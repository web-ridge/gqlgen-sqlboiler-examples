// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFragranceInventories(t *testing.T) {
	t.Parallel()

	query := FragranceInventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFragranceInventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFragranceInventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FragranceInventories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFragranceInventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FragranceInventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFragranceInventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FragranceInventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FragranceInventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FragranceInventoryExists to return true, but got false.")
	}
}

func testFragranceInventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fragranceInventoryFound, err := FindFragranceInventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fragranceInventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFragranceInventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FragranceInventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFragranceInventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FragranceInventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFragranceInventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fragranceInventoryOne := &FragranceInventory{}
	fragranceInventoryTwo := &FragranceInventory{}
	if err = randomize.Struct(seed, fragranceInventoryOne, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, fragranceInventoryTwo, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fragranceInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fragranceInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FragranceInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFragranceInventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fragranceInventoryOne := &FragranceInventory{}
	fragranceInventoryTwo := &FragranceInventory{}
	if err = randomize.Struct(seed, fragranceInventoryOne, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, fragranceInventoryTwo, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fragranceInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fragranceInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fragranceInventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func fragranceInventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FragranceInventory) error {
	*o = FragranceInventory{}
	return nil
}

func testFragranceInventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FragranceInventory{}
	o := &FragranceInventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FragranceInventory object: %s", err)
	}

	AddFragranceInventoryHook(boil.BeforeInsertHook, fragranceInventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryBeforeInsertHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.AfterInsertHook, fragranceInventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryAfterInsertHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.AfterSelectHook, fragranceInventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryAfterSelectHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.BeforeUpdateHook, fragranceInventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryBeforeUpdateHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.AfterUpdateHook, fragranceInventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryAfterUpdateHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.BeforeDeleteHook, fragranceInventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryBeforeDeleteHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.AfterDeleteHook, fragranceInventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryAfterDeleteHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.BeforeUpsertHook, fragranceInventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryBeforeUpsertHooks = []FragranceInventoryHook{}

	AddFragranceInventoryHook(boil.AfterUpsertHook, fragranceInventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fragranceInventoryAfterUpsertHooks = []FragranceInventoryHook{}
}

func testFragranceInventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFragranceInventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fragranceInventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFragranceInventoryToOneFragranceUsingFragrance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FragranceInventory
	var foreign Fragrance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fragranceDBTypes, false, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FragranceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Fragrance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FragranceInventorySlice{&local}
	if err = local.L.LoadFragrance(ctx, tx, false, (*[]*FragranceInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Fragrance = nil
	if err = local.L.LoadFragrance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFragranceInventoryToOneSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FragranceInventory
	var foreign Supplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fragranceInventoryDBTypes, false, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := FragranceInventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*FragranceInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testFragranceInventoryToOneSetOpFragranceUsingFragrance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FragranceInventory
	var b, c Fragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fragranceInventoryDBTypes, false, strmangle.SetComplement(fragranceInventoryPrimaryKeyColumns, fragranceInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Fragrance{&b, &c} {
		err = a.SetFragrance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Fragrance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FragranceInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FragranceID != x.ID {
			t.Error("foreign key was wrong value", a.FragranceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FragranceID))
		reflect.Indirect(reflect.ValueOf(&a.FragranceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FragranceID != x.ID {
			t.Error("foreign key was wrong value", a.FragranceID, x.ID)
		}
	}
}
func testFragranceInventoryToOneSetOpSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FragranceInventory
	var b, c Supplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fragranceInventoryDBTypes, false, strmangle.SetComplement(fragranceInventoryPrimaryKeyColumns, fragranceInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Supplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FragranceInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testFragranceInventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFragranceInventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FragranceInventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFragranceInventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FragranceInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fragranceInventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `FragranceID`: `integer`, `SupplierID`: `integer`}
	_                         = bytes.MinRead
)

func testFragranceInventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fragranceInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fragranceInventoryAllColumns) == len(fragranceInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFragranceInventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fragranceInventoryAllColumns) == len(fragranceInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FragranceInventory{}
	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fragranceInventoryDBTypes, true, fragranceInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fragranceInventoryAllColumns, fragranceInventoryPrimaryKeyColumns) {
		fields = fragranceInventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			fragranceInventoryAllColumns,
			fragranceInventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FragranceInventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFragranceInventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(fragranceInventoryAllColumns) == len(fragranceInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FragranceInventory{}
	if err = randomize.Struct(seed, &o, fragranceInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FragranceInventory: %s", err)
	}

	count, err := FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fragranceInventoryDBTypes, false, fragranceInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FragranceInventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FragranceInventory: %s", err)
	}

	count, err = FragranceInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
