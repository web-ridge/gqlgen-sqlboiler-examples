// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Lye is an object representing the database table.
type Lye struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Kind      string    `boil:"kind" json:"kind" toml:"kind" yaml:"kind"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Note      string    `boil:"note" json:"note" toml:"note" yaml:"note"`

	R *lyeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lyeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LyeColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Kind      string
	Name      string
	Note      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Kind:      "kind",
	Name:      "name",
	Note:      "note",
}

// Generated where

var LyeWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Kind      whereHelperstring
	Name      whereHelperstring
	Note      whereHelperstring
}{
	ID:        whereHelperint{field: "\"lye\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"lye\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"lye\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"lye\".\"deleted_at\""},
	Kind:      whereHelperstring{field: "\"lye\".\"kind\""},
	Name:      whereHelperstring{field: "\"lye\".\"name\""},
	Note:      whereHelperstring{field: "\"lye\".\"note\""},
}

// LyeRels is where relationship names are stored.
var LyeRels = struct {
	RecipeBatchLye string
	LyeInventories string
}{
	RecipeBatchLye: "RecipeBatchLye",
	LyeInventories: "LyeInventories",
}

// lyeR is where relationships are stored.
type lyeR struct {
	RecipeBatchLye *RecipeBatchLye   `boil:"RecipeBatchLye" json:"RecipeBatchLye" toml:"RecipeBatchLye" yaml:"RecipeBatchLye"`
	LyeInventories LyeInventorySlice `boil:"LyeInventories" json:"LyeInventories" toml:"LyeInventories" yaml:"LyeInventories"`
}

// NewStruct creates a new relationship struct
func (*lyeR) NewStruct() *lyeR {
	return &lyeR{}
}

// lyeL is where Load methods for each relationship are stored.
type lyeL struct{}

var (
	lyeAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "kind", "name", "note"}
	lyeColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "kind", "name", "note"}
	lyeColumnsWithDefault    = []string{"id"}
	lyePrimaryKeyColumns     = []string{"id"}
)

type (
	// LyeSlice is an alias for a slice of pointers to Lye.
	// This should generally be used opposed to []Lye.
	LyeSlice []*Lye
	// LyeHook is the signature for custom Lye hook methods
	LyeHook func(context.Context, boil.ContextExecutor, *Lye) error

	lyeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lyeType                 = reflect.TypeOf(&Lye{})
	lyeMapping              = queries.MakeStructMapping(lyeType)
	lyePrimaryKeyMapping, _ = queries.BindMapping(lyeType, lyeMapping, lyePrimaryKeyColumns)
	lyeInsertCacheMut       sync.RWMutex
	lyeInsertCache          = make(map[string]insertCache)
	lyeUpdateCacheMut       sync.RWMutex
	lyeUpdateCache          = make(map[string]updateCache)
	lyeUpsertCacheMut       sync.RWMutex
	lyeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lyeBeforeInsertHooks []LyeHook
var lyeBeforeUpdateHooks []LyeHook
var lyeBeforeDeleteHooks []LyeHook
var lyeBeforeUpsertHooks []LyeHook

var lyeAfterInsertHooks []LyeHook
var lyeAfterSelectHooks []LyeHook
var lyeAfterUpdateHooks []LyeHook
var lyeAfterDeleteHooks []LyeHook
var lyeAfterUpsertHooks []LyeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Lye) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Lye) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Lye) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Lye) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Lye) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Lye) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Lye) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Lye) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Lye) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lyeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLyeHook registers your hook function for all future operations.
func AddLyeHook(hookPoint boil.HookPoint, lyeHook LyeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lyeBeforeInsertHooks = append(lyeBeforeInsertHooks, lyeHook)
	case boil.BeforeUpdateHook:
		lyeBeforeUpdateHooks = append(lyeBeforeUpdateHooks, lyeHook)
	case boil.BeforeDeleteHook:
		lyeBeforeDeleteHooks = append(lyeBeforeDeleteHooks, lyeHook)
	case boil.BeforeUpsertHook:
		lyeBeforeUpsertHooks = append(lyeBeforeUpsertHooks, lyeHook)
	case boil.AfterInsertHook:
		lyeAfterInsertHooks = append(lyeAfterInsertHooks, lyeHook)
	case boil.AfterSelectHook:
		lyeAfterSelectHooks = append(lyeAfterSelectHooks, lyeHook)
	case boil.AfterUpdateHook:
		lyeAfterUpdateHooks = append(lyeAfterUpdateHooks, lyeHook)
	case boil.AfterDeleteHook:
		lyeAfterDeleteHooks = append(lyeAfterDeleteHooks, lyeHook)
	case boil.AfterUpsertHook:
		lyeAfterUpsertHooks = append(lyeAfterUpsertHooks, lyeHook)
	}
}

// One returns a single lye record from the query.
func (q lyeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Lye, error) {
	o := &Lye{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lye")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Lye records from the query.
func (q lyeQuery) All(ctx context.Context, exec boil.ContextExecutor) (LyeSlice, error) {
	var o []*Lye

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Lye slice")
	}

	if len(lyeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Lye records in the query.
func (q lyeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lye rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lyeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lye exists")
	}

	return count > 0, nil
}

// RecipeBatchLye pointed to by the foreign key.
func (o *Lye) RecipeBatchLye(mods ...qm.QueryMod) recipeBatchLyeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"lye_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeBatchLyes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_lye\"")

	return query
}

// LyeInventories retrieves all the lye_inventory's LyeInventories with an executor.
func (o *Lye) LyeInventories(mods ...qm.QueryMod) lyeInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lye_inventory\".\"lye_id\"=?", o.ID),
	)

	query := LyeInventories(queryMods...)
	queries.SetFrom(query.Query, "\"lye_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"lye_inventory\".*"})
	}

	return query
}

// LoadRecipeBatchLye allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (lyeL) LoadRecipeBatchLye(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLye interface{}, mods queries.Applicator) error {
	var slice []*Lye
	var object *Lye

	if singular {
		object = maybeLye.(*Lye)
	} else {
		slice = *maybeLye.(*[]*Lye)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lyeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lyeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_lye`),
		qm.WhereIn(`recipe_batch_lye.lye_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeBatchLye")
	}

	var resultSlice []*RecipeBatchLye
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeBatchLye")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_batch_lye")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_lye")
	}

	if len(lyeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RecipeBatchLye = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.LyeID {
				local.R.RecipeBatchLye = foreign
				break
			}
		}
	}

	return nil
}

// LoadLyeInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lyeL) LoadLyeInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLye interface{}, mods queries.Applicator) error {
	var slice []*Lye
	var object *Lye

	if singular {
		object = maybeLye.(*Lye)
	} else {
		slice = *maybeLye.(*[]*Lye)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lyeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lyeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lye_inventory`),
		qm.WhereIn(`lye_inventory.lye_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lye_inventory")
	}

	var resultSlice []*LyeInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lye_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lye_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lye_inventory")
	}

	if len(lyeInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LyeInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LyeID {
				local.R.LyeInventories = append(local.R.LyeInventories, foreign)
				break
			}
		}
	}

	return nil
}

// SetRecipeBatchLye of the lye to the related item.
// Sets o.R.RecipeBatchLye to related.
// Adds o to related.R.Lye.
func (o *Lye) SetRecipeBatchLye(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeBatchLye) error {
	var err error

	if insert {
		related.LyeID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"recipe_batch_lye\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"lye_id"}),
			strmangle.WhereClause("\"", "\"", 2, recipeBatchLyePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.LyeID = o.ID

	}

	if o.R == nil {
		o.R = &lyeR{
			RecipeBatchLye: related,
		}
	} else {
		o.R.RecipeBatchLye = related
	}

	if related.R == nil {
		related.R = &recipeBatchLyeR{
			Lye: o,
		}
	} else {
		related.R.Lye = o
	}
	return nil
}

// AddLyeInventories adds the given related objects to the existing relationships
// of the lye, optionally inserting them as new records.
// Appends related to o.R.LyeInventories.
// Sets related.R.Lye appropriately.
func (o *Lye) AddLyeInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LyeInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LyeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lye_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lye_id"}),
				strmangle.WhereClause("\"", "\"", 2, lyeInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LyeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lyeR{
			LyeInventories: related,
		}
	} else {
		o.R.LyeInventories = append(o.R.LyeInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lyeInventoryR{
				Lye: o,
			}
		} else {
			rel.R.Lye = o
		}
	}
	return nil
}

// Lyes retrieves all the records using an executor.
func Lyes(mods ...qm.QueryMod) lyeQuery {
	mods = append(mods, qm.From("\"lye\""))
	return lyeQuery{NewQuery(mods...)}
}

// FindLye retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLye(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Lye, error) {
	lyeObj := &Lye{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lye\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lyeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lye")
	}

	return lyeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lye) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lye provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lyeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lyeInsertCacheMut.RLock()
	cache, cached := lyeInsertCache[key]
	lyeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lyeAllColumns,
			lyeColumnsWithDefault,
			lyeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lyeType, lyeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lyeType, lyeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lye\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lye\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lye")
	}

	if !cached {
		lyeInsertCacheMut.Lock()
		lyeInsertCache[key] = cache
		lyeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Lye.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lye) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lyeUpdateCacheMut.RLock()
	cache, cached := lyeUpdateCache[key]
	lyeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lyeAllColumns,
			lyePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lye, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lye\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lyePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lyeType, lyeMapping, append(wl, lyePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lye row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lye")
	}

	if !cached {
		lyeUpdateCacheMut.Lock()
		lyeUpdateCache[key] = cache
		lyeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lyeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lye")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lye")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LyeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lye\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lyePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lye slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lye")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Lye) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lye provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lyeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lyeUpsertCacheMut.RLock()
	cache, cached := lyeUpsertCache[key]
	lyeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lyeAllColumns,
			lyeColumnsWithDefault,
			lyeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lyeAllColumns,
			lyePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert lye, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(lyePrimaryKeyColumns))
			copy(conflict, lyePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lye\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lyeType, lyeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lyeType, lyeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert lye")
	}

	if !cached {
		lyeUpsertCacheMut.Lock()
		lyeUpsertCache[key] = cache
		lyeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Lye record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lye) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Lye provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lyePrimaryKeyMapping)
	sql := "DELETE FROM \"lye\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lye")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lye")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lyeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lyeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lye")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lye")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LyeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lyeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lye\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lyePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lye slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lye")
	}

	if len(lyeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lye) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLye(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LyeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LyeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lyePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lye\".* FROM \"lye\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lyePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LyeSlice")
	}

	*o = slice

	return nil
}

// LyeExists checks if the Lye row exists.
func LyeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lye\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lye exists")
	}

	return exists, nil
}
