// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AuthPermission is an object representing the database table.
type AuthPermission struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name          string `boil:"name" json:"name" toml:"name" yaml:"name"`
	ContentTypeID int    `boil:"content_type_id" json:"content_type_id" toml:"content_type_id" yaml:"content_type_id"`
	Codename      string `boil:"codename" json:"codename" toml:"codename" yaml:"codename"`

	R *authPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L authPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuthPermissionColumns = struct {
	ID            string
	Name          string
	ContentTypeID string
	Codename      string
}{
	ID:            "id",
	Name:          "name",
	ContentTypeID: "content_type_id",
	Codename:      "codename",
}

// Generated where

var AuthPermissionWhere = struct {
	ID            whereHelperint
	Name          whereHelperstring
	ContentTypeID whereHelperint
	Codename      whereHelperstring
}{
	ID:            whereHelperint{field: "\"auth_permission\".\"id\""},
	Name:          whereHelperstring{field: "\"auth_permission\".\"name\""},
	ContentTypeID: whereHelperint{field: "\"auth_permission\".\"content_type_id\""},
	Codename:      whereHelperstring{field: "\"auth_permission\".\"codename\""},
}

// AuthPermissionRels is where relationship names are stored.
var AuthPermissionRels = struct {
	ContentType                       string
	PermissionAuthGroupPermissions    string
	PermissionAuthUserUserPermissions string
}{
	ContentType:                       "ContentType",
	PermissionAuthGroupPermissions:    "PermissionAuthGroupPermissions",
	PermissionAuthUserUserPermissions: "PermissionAuthUserUserPermissions",
}

// authPermissionR is where relationships are stored.
type authPermissionR struct {
	ContentType                       *DjangoContentType          `boil:"ContentType" json:"ContentType" toml:"ContentType" yaml:"ContentType"`
	PermissionAuthGroupPermissions    AuthGroupPermissionSlice    `boil:"PermissionAuthGroupPermissions" json:"PermissionAuthGroupPermissions" toml:"PermissionAuthGroupPermissions" yaml:"PermissionAuthGroupPermissions"`
	PermissionAuthUserUserPermissions AuthUserUserPermissionSlice `boil:"PermissionAuthUserUserPermissions" json:"PermissionAuthUserUserPermissions" toml:"PermissionAuthUserUserPermissions" yaml:"PermissionAuthUserUserPermissions"`
}

// NewStruct creates a new relationship struct
func (*authPermissionR) NewStruct() *authPermissionR {
	return &authPermissionR{}
}

// authPermissionL is where Load methods for each relationship are stored.
type authPermissionL struct{}

var (
	authPermissionAllColumns            = []string{"id", "name", "content_type_id", "codename"}
	authPermissionColumnsWithoutDefault = []string{"name", "content_type_id", "codename"}
	authPermissionColumnsWithDefault    = []string{"id"}
	authPermissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// AuthPermissionSlice is an alias for a slice of pointers to AuthPermission.
	// This should generally be used opposed to []AuthPermission.
	AuthPermissionSlice []*AuthPermission
	// AuthPermissionHook is the signature for custom AuthPermission hook methods
	AuthPermissionHook func(context.Context, boil.ContextExecutor, *AuthPermission) error

	authPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authPermissionType                 = reflect.TypeOf(&AuthPermission{})
	authPermissionMapping              = queries.MakeStructMapping(authPermissionType)
	authPermissionPrimaryKeyMapping, _ = queries.BindMapping(authPermissionType, authPermissionMapping, authPermissionPrimaryKeyColumns)
	authPermissionInsertCacheMut       sync.RWMutex
	authPermissionInsertCache          = make(map[string]insertCache)
	authPermissionUpdateCacheMut       sync.RWMutex
	authPermissionUpdateCache          = make(map[string]updateCache)
	authPermissionUpsertCacheMut       sync.RWMutex
	authPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var authPermissionBeforeInsertHooks []AuthPermissionHook
var authPermissionBeforeUpdateHooks []AuthPermissionHook
var authPermissionBeforeDeleteHooks []AuthPermissionHook
var authPermissionBeforeUpsertHooks []AuthPermissionHook

var authPermissionAfterInsertHooks []AuthPermissionHook
var authPermissionAfterSelectHooks []AuthPermissionHook
var authPermissionAfterUpdateHooks []AuthPermissionHook
var authPermissionAfterDeleteHooks []AuthPermissionHook
var authPermissionAfterUpsertHooks []AuthPermissionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range authPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthPermissionHook registers your hook function for all future operations.
func AddAuthPermissionHook(hookPoint boil.HookPoint, authPermissionHook AuthPermissionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		authPermissionBeforeInsertHooks = append(authPermissionBeforeInsertHooks, authPermissionHook)
	case boil.BeforeUpdateHook:
		authPermissionBeforeUpdateHooks = append(authPermissionBeforeUpdateHooks, authPermissionHook)
	case boil.BeforeDeleteHook:
		authPermissionBeforeDeleteHooks = append(authPermissionBeforeDeleteHooks, authPermissionHook)
	case boil.BeforeUpsertHook:
		authPermissionBeforeUpsertHooks = append(authPermissionBeforeUpsertHooks, authPermissionHook)
	case boil.AfterInsertHook:
		authPermissionAfterInsertHooks = append(authPermissionAfterInsertHooks, authPermissionHook)
	case boil.AfterSelectHook:
		authPermissionAfterSelectHooks = append(authPermissionAfterSelectHooks, authPermissionHook)
	case boil.AfterUpdateHook:
		authPermissionAfterUpdateHooks = append(authPermissionAfterUpdateHooks, authPermissionHook)
	case boil.AfterDeleteHook:
		authPermissionAfterDeleteHooks = append(authPermissionAfterDeleteHooks, authPermissionHook)
	case boil.AfterUpsertHook:
		authPermissionAfterUpsertHooks = append(authPermissionAfterUpsertHooks, authPermissionHook)
	}
}

// One returns a single authPermission record from the query.
func (q authPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuthPermission, error) {
	o := &AuthPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auth_permission")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AuthPermission records from the query.
func (q authPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuthPermissionSlice, error) {
	var o []*AuthPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuthPermission slice")
	}

	if len(authPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AuthPermission records in the query.
func (q authPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auth_permission rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q authPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auth_permission exists")
	}

	return count > 0, nil
}

// ContentType pointed to by the foreign key.
func (o *AuthPermission) ContentType(mods ...qm.QueryMod) djangoContentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := DjangoContentTypes(queryMods...)
	queries.SetFrom(query.Query, "\"django_content_type\"")

	return query
}

// PermissionAuthGroupPermissions retrieves all the auth_group_permission's AuthGroupPermissions with an executor via permission_id column.
func (o *AuthPermission) PermissionAuthGroupPermissions(mods ...qm.QueryMod) authGroupPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_group_permissions\".\"permission_id\"=?", o.ID),
	)

	query := AuthGroupPermissions(queryMods...)
	queries.SetFrom(query.Query, "\"auth_group_permissions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auth_group_permissions\".*"})
	}

	return query
}

// PermissionAuthUserUserPermissions retrieves all the auth_user_user_permission's AuthUserUserPermissions with an executor via permission_id column.
func (o *AuthPermission) PermissionAuthUserUserPermissions(mods ...qm.QueryMod) authUserUserPermissionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auth_user_user_permissions\".\"permission_id\"=?", o.ID),
	)

	query := AuthUserUserPermissions(queryMods...)
	queries.SetFrom(query.Query, "\"auth_user_user_permissions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"auth_user_user_permissions\".*"})
	}

	return query
}

// LoadContentType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (authPermissionL) LoadContentType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthPermission interface{}, mods queries.Applicator) error {
	var slice []*AuthPermission
	var object *AuthPermission

	if singular {
		object = maybeAuthPermission.(*AuthPermission)
	} else {
		slice = *maybeAuthPermission.(*[]*AuthPermission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authPermissionR{}
		}
		args = append(args, object.ContentTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authPermissionR{}
			}

			for _, a := range args {
				if a == obj.ContentTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ContentTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`django_content_type`),
		qm.WhereIn(`django_content_type.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DjangoContentType")
	}

	var resultSlice []*DjangoContentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DjangoContentType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for django_content_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_content_type")
	}

	if len(authPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentType = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentTypeID == foreign.ID {
				local.R.ContentType = foreign
				break
			}
		}
	}

	return nil
}

// LoadPermissionAuthGroupPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authPermissionL) LoadPermissionAuthGroupPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthPermission interface{}, mods queries.Applicator) error {
	var slice []*AuthPermission
	var object *AuthPermission

	if singular {
		object = maybeAuthPermission.(*AuthPermission)
	} else {
		slice = *maybeAuthPermission.(*[]*AuthPermission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authPermissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authPermissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auth_group_permissions`),
		qm.WhereIn(`auth_group_permissions.permission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_group_permissions")
	}

	var resultSlice []*AuthGroupPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_group_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_group_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_group_permissions")
	}

	if len(authGroupPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PermissionAuthGroupPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PermissionID {
				local.R.PermissionAuthGroupPermissions = append(local.R.PermissionAuthGroupPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPermissionAuthUserUserPermissions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (authPermissionL) LoadPermissionAuthUserUserPermissions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuthPermission interface{}, mods queries.Applicator) error {
	var slice []*AuthPermission
	var object *AuthPermission

	if singular {
		object = maybeAuthPermission.(*AuthPermission)
	} else {
		slice = *maybeAuthPermission.(*[]*AuthPermission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &authPermissionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &authPermissionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auth_user_user_permissions`),
		qm.WhereIn(`auth_user_user_permissions.permission_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auth_user_user_permissions")
	}

	var resultSlice []*AuthUserUserPermission
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auth_user_user_permissions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auth_user_user_permissions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_user_user_permissions")
	}

	if len(authUserUserPermissionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PermissionAuthUserUserPermissions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PermissionID {
				local.R.PermissionAuthUserUserPermissions = append(local.R.PermissionAuthUserUserPermissions, foreign)
				break
			}
		}
	}

	return nil
}

// SetContentType of the authPermission to the related item.
// Sets o.R.ContentType to related.
// Adds o to related.R.ContentTypeAuthPermissions.
func (o *AuthPermission) SetContentType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DjangoContentType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auth_permission\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, authPermissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentTypeID = related.ID
	if o.R == nil {
		o.R = &authPermissionR{
			ContentType: related,
		}
	} else {
		o.R.ContentType = related
	}

	if related.R == nil {
		related.R = &djangoContentTypeR{
			ContentTypeAuthPermissions: AuthPermissionSlice{o},
		}
	} else {
		related.R.ContentTypeAuthPermissions = append(related.R.ContentTypeAuthPermissions, o)
	}

	return nil
}

// AddPermissionAuthGroupPermissions adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthGroupPermissions.
// Sets related.R.Permission appropriately.
func (o *AuthPermission) AddPermissionAuthGroupPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuthGroupPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PermissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_group_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"permission_id"}),
				strmangle.WhereClause("\"", "\"", 2, authGroupPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PermissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authPermissionR{
			PermissionAuthGroupPermissions: related,
		}
	} else {
		o.R.PermissionAuthGroupPermissions = append(o.R.PermissionAuthGroupPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authGroupPermissionR{
				Permission: o,
			}
		} else {
			rel.R.Permission = o
		}
	}
	return nil
}

// AddPermissionAuthUserUserPermissions adds the given related objects to the existing relationships
// of the auth_permission, optionally inserting them as new records.
// Appends related to o.R.PermissionAuthUserUserPermissions.
// Sets related.R.Permission appropriately.
func (o *AuthPermission) AddPermissionAuthUserUserPermissions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuthUserUserPermission) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PermissionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auth_user_user_permissions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"permission_id"}),
				strmangle.WhereClause("\"", "\"", 2, authUserUserPermissionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PermissionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &authPermissionR{
			PermissionAuthUserUserPermissions: related,
		}
	} else {
		o.R.PermissionAuthUserUserPermissions = append(o.R.PermissionAuthUserUserPermissions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authUserUserPermissionR{
				Permission: o,
			}
		} else {
			rel.R.Permission = o
		}
	}
	return nil
}

// AuthPermissions retrieves all the records using an executor.
func AuthPermissions(mods ...qm.QueryMod) authPermissionQuery {
	mods = append(mods, qm.From("\"auth_permission\""))
	return authPermissionQuery{NewQuery(mods...)}
}

// FindAuthPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuthPermission(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AuthPermission, error) {
	authPermissionObj := &AuthPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auth_permission\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, authPermissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auth_permission")
	}

	return authPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuthPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_permission provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	authPermissionInsertCacheMut.RLock()
	cache, cached := authPermissionInsertCache[key]
	authPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			authPermissionAllColumns,
			authPermissionColumnsWithDefault,
			authPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auth_permission\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auth_permission\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auth_permission")
	}

	if !cached {
		authPermissionInsertCacheMut.Lock()
		authPermissionInsertCache[key] = cache
		authPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AuthPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuthPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	authPermissionUpdateCacheMut.RLock()
	cache, cached := authPermissionUpdateCache[key]
	authPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			authPermissionAllColumns,
			authPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auth_permission, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auth_permission\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, authPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, append(wl, authPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auth_permission row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auth_permission")
	}

	if !cached {
		authPermissionUpdateCacheMut.Lock()
		authPermissionUpdateCache[key] = cache
		authPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q authPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auth_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auth_permission")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuthPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auth_permission\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, authPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in authPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all authPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuthPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auth_permission provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	authPermissionUpsertCacheMut.RLock()
	cache, cached := authPermissionUpsertCache[key]
	authPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			authPermissionAllColumns,
			authPermissionColumnsWithDefault,
			authPermissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			authPermissionAllColumns,
			authPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auth_permission, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(authPermissionPrimaryKeyColumns))
			copy(conflict, authPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auth_permission\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(authPermissionType, authPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auth_permission")
	}

	if !cached {
		authPermissionUpsertCacheMut.Lock()
		authPermissionUpsertCache[key] = cache
		authPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AuthPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuthPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuthPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), authPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"auth_permission\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auth_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auth_permission")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q authPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no authPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auth_permission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_permission")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuthPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(authPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auth_permission\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from authPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auth_permission")
	}

	if len(authPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuthPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuthPermission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuthPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuthPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), authPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auth_permission\".* FROM \"auth_permission\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, authPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuthPermissionSlice")
	}

	*o = slice

	return nil
}

// AuthPermissionExists checks if the AuthPermission row exists.
func AuthPermissionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auth_permission\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auth_permission exists")
	}

	return exists, nil
}
