// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DjangoAdminLog is an object representing the database table.
type DjangoAdminLog struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	ActionTime    time.Time   `boil:"action_time" json:"action_time" toml:"action_time" yaml:"action_time"`
	ObjectID      null.String `boil:"object_id" json:"object_id,omitempty" toml:"object_id" yaml:"object_id,omitempty"`
	ObjectRepr    string      `boil:"object_repr" json:"object_repr" toml:"object_repr" yaml:"object_repr"`
	ActionFlag    int16       `boil:"action_flag" json:"action_flag" toml:"action_flag" yaml:"action_flag"`
	ChangeMessage string      `boil:"change_message" json:"change_message" toml:"change_message" yaml:"change_message"`
	ContentTypeID null.Int    `boil:"content_type_id" json:"content_type_id,omitempty" toml:"content_type_id" yaml:"content_type_id,omitempty"`
	UserID        int         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	R *djangoAdminLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L djangoAdminLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DjangoAdminLogColumns = struct {
	ID            string
	ActionTime    string
	ObjectID      string
	ObjectRepr    string
	ActionFlag    string
	ChangeMessage string
	ContentTypeID string
	UserID        string
}{
	ID:            "id",
	ActionTime:    "action_time",
	ObjectID:      "object_id",
	ObjectRepr:    "object_repr",
	ActionFlag:    "action_flag",
	ChangeMessage: "change_message",
	ContentTypeID: "content_type_id",
	UserID:        "user_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DjangoAdminLogWhere = struct {
	ID            whereHelperint
	ActionTime    whereHelpertime_Time
	ObjectID      whereHelpernull_String
	ObjectRepr    whereHelperstring
	ActionFlag    whereHelperint16
	ChangeMessage whereHelperstring
	ContentTypeID whereHelpernull_Int
	UserID        whereHelperint
}{
	ID:            whereHelperint{field: "\"django_admin_log\".\"id\""},
	ActionTime:    whereHelpertime_Time{field: "\"django_admin_log\".\"action_time\""},
	ObjectID:      whereHelpernull_String{field: "\"django_admin_log\".\"object_id\""},
	ObjectRepr:    whereHelperstring{field: "\"django_admin_log\".\"object_repr\""},
	ActionFlag:    whereHelperint16{field: "\"django_admin_log\".\"action_flag\""},
	ChangeMessage: whereHelperstring{field: "\"django_admin_log\".\"change_message\""},
	ContentTypeID: whereHelpernull_Int{field: "\"django_admin_log\".\"content_type_id\""},
	UserID:        whereHelperint{field: "\"django_admin_log\".\"user_id\""},
}

// DjangoAdminLogRels is where relationship names are stored.
var DjangoAdminLogRels = struct {
	ContentType string
	User        string
}{
	ContentType: "ContentType",
	User:        "User",
}

// djangoAdminLogR is where relationships are stored.
type djangoAdminLogR struct {
	ContentType *DjangoContentType `boil:"ContentType" json:"ContentType" toml:"ContentType" yaml:"ContentType"`
	User        *AuthUser          `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*djangoAdminLogR) NewStruct() *djangoAdminLogR {
	return &djangoAdminLogR{}
}

// djangoAdminLogL is where Load methods for each relationship are stored.
type djangoAdminLogL struct{}

var (
	djangoAdminLogAllColumns            = []string{"id", "action_time", "object_id", "object_repr", "action_flag", "change_message", "content_type_id", "user_id"}
	djangoAdminLogColumnsWithoutDefault = []string{"action_time", "object_id", "object_repr", "action_flag", "change_message", "content_type_id", "user_id"}
	djangoAdminLogColumnsWithDefault    = []string{"id"}
	djangoAdminLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// DjangoAdminLogSlice is an alias for a slice of pointers to DjangoAdminLog.
	// This should generally be used opposed to []DjangoAdminLog.
	DjangoAdminLogSlice []*DjangoAdminLog
	// DjangoAdminLogHook is the signature for custom DjangoAdminLog hook methods
	DjangoAdminLogHook func(context.Context, boil.ContextExecutor, *DjangoAdminLog) error

	djangoAdminLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	djangoAdminLogType                 = reflect.TypeOf(&DjangoAdminLog{})
	djangoAdminLogMapping              = queries.MakeStructMapping(djangoAdminLogType)
	djangoAdminLogPrimaryKeyMapping, _ = queries.BindMapping(djangoAdminLogType, djangoAdminLogMapping, djangoAdminLogPrimaryKeyColumns)
	djangoAdminLogInsertCacheMut       sync.RWMutex
	djangoAdminLogInsertCache          = make(map[string]insertCache)
	djangoAdminLogUpdateCacheMut       sync.RWMutex
	djangoAdminLogUpdateCache          = make(map[string]updateCache)
	djangoAdminLogUpsertCacheMut       sync.RWMutex
	djangoAdminLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var djangoAdminLogBeforeInsertHooks []DjangoAdminLogHook
var djangoAdminLogBeforeUpdateHooks []DjangoAdminLogHook
var djangoAdminLogBeforeDeleteHooks []DjangoAdminLogHook
var djangoAdminLogBeforeUpsertHooks []DjangoAdminLogHook

var djangoAdminLogAfterInsertHooks []DjangoAdminLogHook
var djangoAdminLogAfterSelectHooks []DjangoAdminLogHook
var djangoAdminLogAfterUpdateHooks []DjangoAdminLogHook
var djangoAdminLogAfterDeleteHooks []DjangoAdminLogHook
var djangoAdminLogAfterUpsertHooks []DjangoAdminLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DjangoAdminLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DjangoAdminLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DjangoAdminLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DjangoAdminLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DjangoAdminLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DjangoAdminLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DjangoAdminLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DjangoAdminLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DjangoAdminLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range djangoAdminLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDjangoAdminLogHook registers your hook function for all future operations.
func AddDjangoAdminLogHook(hookPoint boil.HookPoint, djangoAdminLogHook DjangoAdminLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		djangoAdminLogBeforeInsertHooks = append(djangoAdminLogBeforeInsertHooks, djangoAdminLogHook)
	case boil.BeforeUpdateHook:
		djangoAdminLogBeforeUpdateHooks = append(djangoAdminLogBeforeUpdateHooks, djangoAdminLogHook)
	case boil.BeforeDeleteHook:
		djangoAdminLogBeforeDeleteHooks = append(djangoAdminLogBeforeDeleteHooks, djangoAdminLogHook)
	case boil.BeforeUpsertHook:
		djangoAdminLogBeforeUpsertHooks = append(djangoAdminLogBeforeUpsertHooks, djangoAdminLogHook)
	case boil.AfterInsertHook:
		djangoAdminLogAfterInsertHooks = append(djangoAdminLogAfterInsertHooks, djangoAdminLogHook)
	case boil.AfterSelectHook:
		djangoAdminLogAfterSelectHooks = append(djangoAdminLogAfterSelectHooks, djangoAdminLogHook)
	case boil.AfterUpdateHook:
		djangoAdminLogAfterUpdateHooks = append(djangoAdminLogAfterUpdateHooks, djangoAdminLogHook)
	case boil.AfterDeleteHook:
		djangoAdminLogAfterDeleteHooks = append(djangoAdminLogAfterDeleteHooks, djangoAdminLogHook)
	case boil.AfterUpsertHook:
		djangoAdminLogAfterUpsertHooks = append(djangoAdminLogAfterUpsertHooks, djangoAdminLogHook)
	}
}

// One returns a single djangoAdminLog record from the query.
func (q djangoAdminLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DjangoAdminLog, error) {
	o := &DjangoAdminLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for django_admin_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DjangoAdminLog records from the query.
func (q djangoAdminLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (DjangoAdminLogSlice, error) {
	var o []*DjangoAdminLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DjangoAdminLog slice")
	}

	if len(djangoAdminLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DjangoAdminLog records in the query.
func (q djangoAdminLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count django_admin_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q djangoAdminLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if django_admin_log exists")
	}

	return count > 0, nil
}

// ContentType pointed to by the foreign key.
func (o *DjangoAdminLog) ContentType(mods ...qm.QueryMod) djangoContentTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := DjangoContentTypes(queryMods...)
	queries.SetFrom(query.Query, "\"django_content_type\"")

	return query
}

// User pointed to by the foreign key.
func (o *DjangoAdminLog) User(mods ...qm.QueryMod) authUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := AuthUsers(queryMods...)
	queries.SetFrom(query.Query, "\"auth_user\"")

	return query
}

// LoadContentType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (djangoAdminLogL) LoadContentType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDjangoAdminLog interface{}, mods queries.Applicator) error {
	var slice []*DjangoAdminLog
	var object *DjangoAdminLog

	if singular {
		object = maybeDjangoAdminLog.(*DjangoAdminLog)
	} else {
		slice = *maybeDjangoAdminLog.(*[]*DjangoAdminLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &djangoAdminLogR{}
		}
		if !queries.IsNil(object.ContentTypeID) {
			args = append(args, object.ContentTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoAdminLogR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ContentTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ContentTypeID) {
				args = append(args, obj.ContentTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`django_content_type`),
		qm.WhereIn(`django_content_type.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DjangoContentType")
	}

	var resultSlice []*DjangoContentType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DjangoContentType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for django_content_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for django_content_type")
	}

	if len(djangoAdminLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentType = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ContentTypeID, foreign.ID) {
				local.R.ContentType = foreign
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (djangoAdminLogL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDjangoAdminLog interface{}, mods queries.Applicator) error {
	var slice []*DjangoAdminLog
	var object *DjangoAdminLog

	if singular {
		object = maybeDjangoAdminLog.(*DjangoAdminLog)
	} else {
		slice = *maybeDjangoAdminLog.(*[]*DjangoAdminLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &djangoAdminLogR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &djangoAdminLogR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`auth_user`),
		qm.WhereIn(`auth_user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuthUser")
	}

	var resultSlice []*AuthUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuthUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auth_user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auth_user")
	}

	if len(djangoAdminLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// SetContentType of the djangoAdminLog to the related item.
// Sets o.R.ContentType to related.
// Adds o to related.R.ContentTypeDjangoAdminLogs.
func (o *DjangoAdminLog) SetContentType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DjangoContentType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"django_admin_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, djangoAdminLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ContentTypeID, related.ID)
	if o.R == nil {
		o.R = &djangoAdminLogR{
			ContentType: related,
		}
	} else {
		o.R.ContentType = related
	}

	if related.R == nil {
		related.R = &djangoContentTypeR{
			ContentTypeDjangoAdminLogs: DjangoAdminLogSlice{o},
		}
	} else {
		related.R.ContentTypeDjangoAdminLogs = append(related.R.ContentTypeDjangoAdminLogs, o)
	}

	return nil
}

// RemoveContentType relationship.
// Sets o.R.ContentType to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DjangoAdminLog) RemoveContentType(ctx context.Context, exec boil.ContextExecutor, related *DjangoContentType) error {
	var err error

	queries.SetScanner(&o.ContentTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("content_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ContentType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ContentTypeDjangoAdminLogs {
		if queries.Equal(o.ContentTypeID, ri.ContentTypeID) {
			continue
		}

		ln := len(related.R.ContentTypeDjangoAdminLogs)
		if ln > 1 && i < ln-1 {
			related.R.ContentTypeDjangoAdminLogs[i] = related.R.ContentTypeDjangoAdminLogs[ln-1]
		}
		related.R.ContentTypeDjangoAdminLogs = related.R.ContentTypeDjangoAdminLogs[:ln-1]
		break
	}
	return nil
}

// SetUser of the djangoAdminLog to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserDjangoAdminLogs.
func (o *DjangoAdminLog) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AuthUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"django_admin_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, djangoAdminLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &djangoAdminLogR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &authUserR{
			UserDjangoAdminLogs: DjangoAdminLogSlice{o},
		}
	} else {
		related.R.UserDjangoAdminLogs = append(related.R.UserDjangoAdminLogs, o)
	}

	return nil
}

// DjangoAdminLogs retrieves all the records using an executor.
func DjangoAdminLogs(mods ...qm.QueryMod) djangoAdminLogQuery {
	mods = append(mods, qm.From("\"django_admin_log\""))
	return djangoAdminLogQuery{NewQuery(mods...)}
}

// FindDjangoAdminLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDjangoAdminLog(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DjangoAdminLog, error) {
	djangoAdminLogObj := &DjangoAdminLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"django_admin_log\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, djangoAdminLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from django_admin_log")
	}

	return djangoAdminLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DjangoAdminLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no django_admin_log provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoAdminLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	djangoAdminLogInsertCacheMut.RLock()
	cache, cached := djangoAdminLogInsertCache[key]
	djangoAdminLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			djangoAdminLogAllColumns,
			djangoAdminLogColumnsWithDefault,
			djangoAdminLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(djangoAdminLogType, djangoAdminLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(djangoAdminLogType, djangoAdminLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"django_admin_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"django_admin_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into django_admin_log")
	}

	if !cached {
		djangoAdminLogInsertCacheMut.Lock()
		djangoAdminLogInsertCache[key] = cache
		djangoAdminLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DjangoAdminLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DjangoAdminLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	djangoAdminLogUpdateCacheMut.RLock()
	cache, cached := djangoAdminLogUpdateCache[key]
	djangoAdminLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			djangoAdminLogAllColumns,
			djangoAdminLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update django_admin_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"django_admin_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, djangoAdminLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(djangoAdminLogType, djangoAdminLogMapping, append(wl, djangoAdminLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update django_admin_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for django_admin_log")
	}

	if !cached {
		djangoAdminLogUpdateCacheMut.Lock()
		djangoAdminLogUpdateCache[key] = cache
		djangoAdminLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q djangoAdminLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for django_admin_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for django_admin_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DjangoAdminLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoAdminLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"django_admin_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, djangoAdminLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in djangoAdminLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all djangoAdminLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DjangoAdminLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no django_admin_log provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(djangoAdminLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	djangoAdminLogUpsertCacheMut.RLock()
	cache, cached := djangoAdminLogUpsertCache[key]
	djangoAdminLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			djangoAdminLogAllColumns,
			djangoAdminLogColumnsWithDefault,
			djangoAdminLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			djangoAdminLogAllColumns,
			djangoAdminLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert django_admin_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(djangoAdminLogPrimaryKeyColumns))
			copy(conflict, djangoAdminLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"django_admin_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(djangoAdminLogType, djangoAdminLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(djangoAdminLogType, djangoAdminLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert django_admin_log")
	}

	if !cached {
		djangoAdminLogUpsertCacheMut.Lock()
		djangoAdminLogUpsertCache[key] = cache
		djangoAdminLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DjangoAdminLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DjangoAdminLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DjangoAdminLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), djangoAdminLogPrimaryKeyMapping)
	sql := "DELETE FROM \"django_admin_log\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from django_admin_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for django_admin_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q djangoAdminLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no djangoAdminLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from django_admin_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for django_admin_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DjangoAdminLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(djangoAdminLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoAdminLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"django_admin_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoAdminLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from djangoAdminLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for django_admin_log")
	}

	if len(djangoAdminLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DjangoAdminLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDjangoAdminLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DjangoAdminLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DjangoAdminLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), djangoAdminLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"django_admin_log\".* FROM \"django_admin_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, djangoAdminLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DjangoAdminLogSlice")
	}

	*o = slice

	return nil
}

// DjangoAdminLogExists checks if the DjangoAdminLog row exists.
func DjangoAdminLogExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"django_admin_log\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if django_admin_log exists")
	}

	return exists, nil
}
