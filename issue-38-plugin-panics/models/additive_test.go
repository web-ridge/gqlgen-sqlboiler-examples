// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAdditives(t *testing.T) {
	t.Parallel()

	query := Additives()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAdditivesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdditivesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Additives().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdditivesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdditiveSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAdditivesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AdditiveExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Additive exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AdditiveExists to return true, but got false.")
	}
}

func testAdditivesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	additiveFound, err := FindAdditive(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if additiveFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAdditivesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Additives().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAdditivesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Additives().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAdditivesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	additiveOne := &Additive{}
	additiveTwo := &Additive{}
	if err = randomize.Struct(seed, additiveOne, additiveDBTypes, false, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}
	if err = randomize.Struct(seed, additiveTwo, additiveDBTypes, false, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = additiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = additiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Additives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAdditivesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	additiveOne := &Additive{}
	additiveTwo := &Additive{}
	if err = randomize.Struct(seed, additiveOne, additiveDBTypes, false, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}
	if err = randomize.Struct(seed, additiveTwo, additiveDBTypes, false, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = additiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = additiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func additiveBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func additiveAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Additive) error {
	*o = Additive{}
	return nil
}

func testAdditivesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Additive{}
	o := &Additive{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, additiveDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Additive object: %s", err)
	}

	AddAdditiveHook(boil.BeforeInsertHook, additiveBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	additiveBeforeInsertHooks = []AdditiveHook{}

	AddAdditiveHook(boil.AfterInsertHook, additiveAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	additiveAfterInsertHooks = []AdditiveHook{}

	AddAdditiveHook(boil.AfterSelectHook, additiveAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	additiveAfterSelectHooks = []AdditiveHook{}

	AddAdditiveHook(boil.BeforeUpdateHook, additiveBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	additiveBeforeUpdateHooks = []AdditiveHook{}

	AddAdditiveHook(boil.AfterUpdateHook, additiveAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	additiveAfterUpdateHooks = []AdditiveHook{}

	AddAdditiveHook(boil.BeforeDeleteHook, additiveBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	additiveBeforeDeleteHooks = []AdditiveHook{}

	AddAdditiveHook(boil.AfterDeleteHook, additiveAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	additiveAfterDeleteHooks = []AdditiveHook{}

	AddAdditiveHook(boil.BeforeUpsertHook, additiveBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	additiveBeforeUpsertHooks = []AdditiveHook{}

	AddAdditiveHook(boil.AfterUpsertHook, additiveAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	additiveAfterUpsertHooks = []AdditiveHook{}
}

func testAdditivesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdditivesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(additiveColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAdditiveOneToOneRecipeAdditiveUsingRecipeAdditive(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RecipeAdditive
	var local Additive

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recipeAdditiveDBTypes, true, recipeAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeAdditive struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.AdditiveID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeAdditive().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AdditiveID != foreign.AdditiveID {
		t.Errorf("want: %v, got %v", foreign.AdditiveID, check.AdditiveID)
	}

	slice := AdditiveSlice{&local}
	if err = local.L.LoadRecipeAdditive(ctx, tx, false, (*[]*Additive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeAdditive == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeAdditive = nil
	if err = local.L.LoadRecipeAdditive(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeAdditive == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAdditiveOneToOneRecipeBatchAdditiveUsingRecipeBatchAdditive(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign RecipeBatchAdditive
	var local Additive

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recipeBatchAdditiveDBTypes, true, recipeBatchAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchAdditive struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.AdditiveID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecipeBatchAdditive().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.AdditiveID != foreign.AdditiveID {
		t.Errorf("want: %v, got %v", foreign.AdditiveID, check.AdditiveID)
	}

	slice := AdditiveSlice{&local}
	if err = local.L.LoadRecipeBatchAdditive(ctx, tx, false, (*[]*Additive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeBatchAdditive == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.RecipeBatchAdditive = nil
	if err = local.L.LoadRecipeBatchAdditive(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.RecipeBatchAdditive == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAdditiveOneToOneSetOpRecipeAdditiveUsingRecipeAdditive(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Additive
	var b, c RecipeAdditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, additiveDBTypes, false, strmangle.SetComplement(additivePrimaryKeyColumns, additiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeAdditiveDBTypes, false, strmangle.SetComplement(recipeAdditivePrimaryKeyColumns, recipeAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeAdditiveDBTypes, false, strmangle.SetComplement(recipeAdditivePrimaryKeyColumns, recipeAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeAdditive{&b, &c} {
		err = a.SetRecipeAdditive(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeAdditive != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Additive != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.AdditiveID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.AdditiveID))
		reflect.Indirect(reflect.ValueOf(&x.AdditiveID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, x.AdditiveID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testAdditiveOneToOneSetOpRecipeBatchAdditiveUsingRecipeBatchAdditive(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Additive
	var b, c RecipeBatchAdditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, additiveDBTypes, false, strmangle.SetComplement(additivePrimaryKeyColumns, additiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeBatchAdditiveDBTypes, false, strmangle.SetComplement(recipeBatchAdditivePrimaryKeyColumns, recipeBatchAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeBatchAdditiveDBTypes, false, strmangle.SetComplement(recipeBatchAdditivePrimaryKeyColumns, recipeBatchAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeBatchAdditive{&b, &c} {
		err = a.SetRecipeBatchAdditive(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.RecipeBatchAdditive != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Additive != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.AdditiveID {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.AdditiveID))
		reflect.Indirect(reflect.ValueOf(&x.AdditiveID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, x.AdditiveID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testAdditiveToManyAdditiveInventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Additive
	var b, c AdditiveInventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, additiveInventoryDBTypes, false, additiveInventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AdditiveID = a.ID
	c.AdditiveID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AdditiveInventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AdditiveID == b.AdditiveID {
			bFound = true
		}
		if v.AdditiveID == c.AdditiveID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AdditiveSlice{&a}
	if err = a.L.LoadAdditiveInventories(ctx, tx, false, (*[]*Additive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveInventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AdditiveInventories = nil
	if err = a.L.LoadAdditiveInventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveInventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAdditiveToManyAddOpAdditiveInventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Additive
	var b, c, d, e AdditiveInventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, additiveDBTypes, false, strmangle.SetComplement(additivePrimaryKeyColumns, additiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AdditiveInventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, additiveInventoryDBTypes, false, strmangle.SetComplement(additiveInventoryPrimaryKeyColumns, additiveInventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AdditiveInventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAdditiveInventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, first.AdditiveID)
		}
		if a.ID != second.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, second.AdditiveID)
		}

		if first.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AdditiveInventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AdditiveInventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AdditiveInventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAdditivesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdditivesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AdditiveSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAdditivesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Additives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	additiveDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `Note`: `text`}
	_               = bytes.MinRead
)

func testAdditivesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(additivePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(additiveAllColumns) == len(additivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, additiveDBTypes, true, additivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAdditivesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(additiveAllColumns) == len(additivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Additive{}
	if err = randomize.Struct(seed, o, additiveDBTypes, true, additiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, additiveDBTypes, true, additivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(additiveAllColumns, additivePrimaryKeyColumns) {
		fields = additiveAllColumns
	} else {
		fields = strmangle.SetComplement(
			additiveAllColumns,
			additivePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AdditiveSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAdditivesUpsert(t *testing.T) {
	t.Parallel()

	if len(additiveAllColumns) == len(additivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Additive{}
	if err = randomize.Struct(seed, &o, additiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Additive: %s", err)
	}

	count, err := Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, additiveDBTypes, false, additivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Additive struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Additive: %s", err)
	}

	count, err = Additives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
