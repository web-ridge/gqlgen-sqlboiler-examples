// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testLipidInventories(t *testing.T) {
	t.Parallel()

	query := LipidInventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testLipidInventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLipidInventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := LipidInventories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLipidInventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LipidInventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testLipidInventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := LipidInventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if LipidInventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected LipidInventoryExists to return true, but got false.")
	}
}

func testLipidInventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	lipidInventoryFound, err := FindLipidInventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if lipidInventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testLipidInventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = LipidInventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testLipidInventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := LipidInventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testLipidInventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	lipidInventoryOne := &LipidInventory{}
	lipidInventoryTwo := &LipidInventory{}
	if err = randomize.Struct(seed, lipidInventoryOne, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, lipidInventoryTwo, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lipidInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lipidInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LipidInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testLipidInventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	lipidInventoryOne := &LipidInventory{}
	lipidInventoryTwo := &LipidInventory{}
	if err = randomize.Struct(seed, lipidInventoryOne, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}
	if err = randomize.Struct(seed, lipidInventoryTwo, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = lipidInventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = lipidInventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func lipidInventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func lipidInventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *LipidInventory) error {
	*o = LipidInventory{}
	return nil
}

func testLipidInventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &LipidInventory{}
	o := &LipidInventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize LipidInventory object: %s", err)
	}

	AddLipidInventoryHook(boil.BeforeInsertHook, lipidInventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	lipidInventoryBeforeInsertHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.AfterInsertHook, lipidInventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	lipidInventoryAfterInsertHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.AfterSelectHook, lipidInventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	lipidInventoryAfterSelectHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.BeforeUpdateHook, lipidInventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	lipidInventoryBeforeUpdateHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.AfterUpdateHook, lipidInventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	lipidInventoryAfterUpdateHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.BeforeDeleteHook, lipidInventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	lipidInventoryBeforeDeleteHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.AfterDeleteHook, lipidInventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	lipidInventoryAfterDeleteHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.BeforeUpsertHook, lipidInventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	lipidInventoryBeforeUpsertHooks = []LipidInventoryHook{}

	AddLipidInventoryHook(boil.AfterUpsertHook, lipidInventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	lipidInventoryAfterUpsertHooks = []LipidInventoryHook{}
}

func testLipidInventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLipidInventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(lipidInventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testLipidInventoryToOneLipidUsingLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LipidInventory
	var foreign Lipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, lipidDBTypes, false, lipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Lipid struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LipidID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LipidInventorySlice{&local}
	if err = local.L.LoadLipid(ctx, tx, false, (*[]*LipidInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lipid = nil
	if err = local.L.LoadLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLipidInventoryToOneSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local LipidInventory
	var foreign Supplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, lipidInventoryDBTypes, false, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := LipidInventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*LipidInventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testLipidInventoryToOneSetOpLipidUsingLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LipidInventory
	var b, c Lipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lipidInventoryDBTypes, false, strmangle.SetComplement(lipidInventoryPrimaryKeyColumns, lipidInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, lipidDBTypes, false, strmangle.SetComplement(lipidPrimaryKeyColumns, lipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Lipid{&b, &c} {
		err = a.SetLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lipid != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LipidInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LipidID))
		reflect.Indirect(reflect.ValueOf(&a.LipidID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID, x.ID)
		}
	}
}
func testLipidInventoryToOneSetOpSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a LipidInventory
	var b, c Supplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, lipidInventoryDBTypes, false, strmangle.SetComplement(lipidInventoryPrimaryKeyColumns, lipidInventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Supplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LipidInventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testLipidInventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLipidInventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := LipidInventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testLipidInventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := LipidInventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	lipidInventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `Sap`: `double precision`, `Naoh`: `double precision`, `Koh`: `double precision`, `GramsPerLiter`: `double precision`, `LipidID`: `integer`, `SupplierID`: `integer`}
	_                     = bytes.MinRead
)

func testLipidInventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(lipidInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(lipidInventoryAllColumns) == len(lipidInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testLipidInventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(lipidInventoryAllColumns) == len(lipidInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &LipidInventory{}
	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, lipidInventoryDBTypes, true, lipidInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(lipidInventoryAllColumns, lipidInventoryPrimaryKeyColumns) {
		fields = lipidInventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			lipidInventoryAllColumns,
			lipidInventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := LipidInventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testLipidInventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(lipidInventoryAllColumns) == len(lipidInventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := LipidInventory{}
	if err = randomize.Struct(seed, &o, lipidInventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LipidInventory: %s", err)
	}

	count, err := LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, lipidInventoryDBTypes, false, lipidInventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize LipidInventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert LipidInventory: %s", err)
	}

	count, err = LipidInventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
