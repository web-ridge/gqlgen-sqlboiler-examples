// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecipeFragrance is an object representing the database table.
type RecipeFragrance struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Percentage  float64   `boil:"percentage" json:"percentage" toml:"percentage" yaml:"percentage"`
	FragranceID int       `boil:"fragrance_id" json:"fragrance_id" toml:"fragrance_id" yaml:"fragrance_id"`
	RecipeID    int       `boil:"recipe_id" json:"recipe_id" toml:"recipe_id" yaml:"recipe_id"`

	R *recipeFragranceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeFragranceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeFragranceColumns = struct {
	ID          string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	Percentage  string
	FragranceID string
	RecipeID    string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	Percentage:  "percentage",
	FragranceID: "fragrance_id",
	RecipeID:    "recipe_id",
}

// Generated where

var RecipeFragranceWhere = struct {
	ID          whereHelperint
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	Percentage  whereHelperfloat64
	FragranceID whereHelperint
	RecipeID    whereHelperint
}{
	ID:          whereHelperint{field: "\"recipe_fragrance\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"recipe_fragrance\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"recipe_fragrance\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"recipe_fragrance\".\"deleted_at\""},
	Percentage:  whereHelperfloat64{field: "\"recipe_fragrance\".\"percentage\""},
	FragranceID: whereHelperint{field: "\"recipe_fragrance\".\"fragrance_id\""},
	RecipeID:    whereHelperint{field: "\"recipe_fragrance\".\"recipe_id\""},
}

// RecipeFragranceRels is where relationship names are stored.
var RecipeFragranceRels = struct {
	Fragrance string
	Recipe    string
}{
	Fragrance: "Fragrance",
	Recipe:    "Recipe",
}

// recipeFragranceR is where relationships are stored.
type recipeFragranceR struct {
	Fragrance *Fragrance `boil:"Fragrance" json:"Fragrance" toml:"Fragrance" yaml:"Fragrance"`
	Recipe    *Recipe    `boil:"Recipe" json:"Recipe" toml:"Recipe" yaml:"Recipe"`
}

// NewStruct creates a new relationship struct
func (*recipeFragranceR) NewStruct() *recipeFragranceR {
	return &recipeFragranceR{}
}

// recipeFragranceL is where Load methods for each relationship are stored.
type recipeFragranceL struct{}

var (
	recipeFragranceAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "percentage", "fragrance_id", "recipe_id"}
	recipeFragranceColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "percentage", "fragrance_id", "recipe_id"}
	recipeFragranceColumnsWithDefault    = []string{"id"}
	recipeFragrancePrimaryKeyColumns     = []string{"id"}
)

type (
	// RecipeFragranceSlice is an alias for a slice of pointers to RecipeFragrance.
	// This should generally be used opposed to []RecipeFragrance.
	RecipeFragranceSlice []*RecipeFragrance
	// RecipeFragranceHook is the signature for custom RecipeFragrance hook methods
	RecipeFragranceHook func(context.Context, boil.ContextExecutor, *RecipeFragrance) error

	recipeFragranceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeFragranceType                 = reflect.TypeOf(&RecipeFragrance{})
	recipeFragranceMapping              = queries.MakeStructMapping(recipeFragranceType)
	recipeFragrancePrimaryKeyMapping, _ = queries.BindMapping(recipeFragranceType, recipeFragranceMapping, recipeFragrancePrimaryKeyColumns)
	recipeFragranceInsertCacheMut       sync.RWMutex
	recipeFragranceInsertCache          = make(map[string]insertCache)
	recipeFragranceUpdateCacheMut       sync.RWMutex
	recipeFragranceUpdateCache          = make(map[string]updateCache)
	recipeFragranceUpsertCacheMut       sync.RWMutex
	recipeFragranceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeFragranceBeforeInsertHooks []RecipeFragranceHook
var recipeFragranceBeforeUpdateHooks []RecipeFragranceHook
var recipeFragranceBeforeDeleteHooks []RecipeFragranceHook
var recipeFragranceBeforeUpsertHooks []RecipeFragranceHook

var recipeFragranceAfterInsertHooks []RecipeFragranceHook
var recipeFragranceAfterSelectHooks []RecipeFragranceHook
var recipeFragranceAfterUpdateHooks []RecipeFragranceHook
var recipeFragranceAfterDeleteHooks []RecipeFragranceHook
var recipeFragranceAfterUpsertHooks []RecipeFragranceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeFragrance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeFragrance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeFragrance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeFragrance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeFragrance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeFragrance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeFragrance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeFragrance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeFragrance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeFragranceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeFragranceHook registers your hook function for all future operations.
func AddRecipeFragranceHook(hookPoint boil.HookPoint, recipeFragranceHook RecipeFragranceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recipeFragranceBeforeInsertHooks = append(recipeFragranceBeforeInsertHooks, recipeFragranceHook)
	case boil.BeforeUpdateHook:
		recipeFragranceBeforeUpdateHooks = append(recipeFragranceBeforeUpdateHooks, recipeFragranceHook)
	case boil.BeforeDeleteHook:
		recipeFragranceBeforeDeleteHooks = append(recipeFragranceBeforeDeleteHooks, recipeFragranceHook)
	case boil.BeforeUpsertHook:
		recipeFragranceBeforeUpsertHooks = append(recipeFragranceBeforeUpsertHooks, recipeFragranceHook)
	case boil.AfterInsertHook:
		recipeFragranceAfterInsertHooks = append(recipeFragranceAfterInsertHooks, recipeFragranceHook)
	case boil.AfterSelectHook:
		recipeFragranceAfterSelectHooks = append(recipeFragranceAfterSelectHooks, recipeFragranceHook)
	case boil.AfterUpdateHook:
		recipeFragranceAfterUpdateHooks = append(recipeFragranceAfterUpdateHooks, recipeFragranceHook)
	case boil.AfterDeleteHook:
		recipeFragranceAfterDeleteHooks = append(recipeFragranceAfterDeleteHooks, recipeFragranceHook)
	case boil.AfterUpsertHook:
		recipeFragranceAfterUpsertHooks = append(recipeFragranceAfterUpsertHooks, recipeFragranceHook)
	}
}

// One returns a single recipeFragrance record from the query.
func (q recipeFragranceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeFragrance, error) {
	o := &RecipeFragrance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_fragrance")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecipeFragrance records from the query.
func (q recipeFragranceQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeFragranceSlice, error) {
	var o []*RecipeFragrance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeFragrance slice")
	}

	if len(recipeFragranceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecipeFragrance records in the query.
func (q recipeFragranceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_fragrance rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeFragranceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_fragrance exists")
	}

	return count > 0, nil
}

// Fragrance pointed to by the foreign key.
func (o *RecipeFragrance) Fragrance(mods ...qm.QueryMod) fragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FragranceID),
	}

	queryMods = append(queryMods, mods...)

	query := Fragrances(queryMods...)
	queries.SetFrom(query.Query, "\"fragrance\"")

	return query
}

// Recipe pointed to by the foreign key.
func (o *RecipeFragrance) Recipe(mods ...qm.QueryMod) recipeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RecipeID),
	}

	queryMods = append(queryMods, mods...)

	query := Recipes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe\"")

	return query
}

// LoadFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeFragranceL) LoadFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeFragrance interface{}, mods queries.Applicator) error {
	var slice []*RecipeFragrance
	var object *RecipeFragrance

	if singular {
		object = maybeRecipeFragrance.(*RecipeFragrance)
	} else {
		slice = *maybeRecipeFragrance.(*[]*RecipeFragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeFragranceR{}
		}
		args = append(args, object.FragranceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeFragranceR{}
			}

			for _, a := range args {
				if a == obj.FragranceID {
					continue Outer
				}
			}

			args = append(args, obj.FragranceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fragrance`),
		qm.WhereIn(`fragrance.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Fragrance")
	}

	var resultSlice []*Fragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Fragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fragrance")
	}

	if len(recipeFragranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fragrance = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FragranceID == foreign.ID {
				local.R.Fragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadRecipe allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeFragranceL) LoadRecipe(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeFragrance interface{}, mods queries.Applicator) error {
	var slice []*RecipeFragrance
	var object *RecipeFragrance

	if singular {
		object = maybeRecipeFragrance.(*RecipeFragrance)
	} else {
		slice = *maybeRecipeFragrance.(*[]*RecipeFragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeFragranceR{}
		}
		args = append(args, object.RecipeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeFragranceR{}
			}

			for _, a := range args {
				if a == obj.RecipeID {
					continue Outer
				}
			}

			args = append(args, obj.RecipeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe`),
		qm.WhereIn(`recipe.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Recipe")
	}

	var resultSlice []*Recipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe")
	}

	if len(recipeFragranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Recipe = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RecipeID == foreign.ID {
				local.R.Recipe = foreign
				break
			}
		}
	}

	return nil
}

// SetFragrance of the recipeFragrance to the related item.
// Sets o.R.Fragrance to related.
// Adds o to related.R.RecipeFragrance.
func (o *RecipeFragrance) SetFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Fragrance) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_fragrance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeFragrancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FragranceID = related.ID
	if o.R == nil {
		o.R = &recipeFragranceR{
			Fragrance: related,
		}
	} else {
		o.R.Fragrance = related
	}

	if related.R == nil {
		related.R = &fragranceR{
			RecipeFragrance: o,
		}
	} else {
		related.R.RecipeFragrance = o
	}

	return nil
}

// SetRecipe of the recipeFragrance to the related item.
// Sets o.R.Recipe to related.
// Adds o to related.R.RecipeFragrances.
func (o *RecipeFragrance) SetRecipe(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Recipe) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_fragrance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"recipe_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeFragrancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RecipeID = related.ID
	if o.R == nil {
		o.R = &recipeFragranceR{
			Recipe: related,
		}
	} else {
		o.R.Recipe = related
	}

	if related.R == nil {
		related.R = &recipeR{
			RecipeFragrances: RecipeFragranceSlice{o},
		}
	} else {
		related.R.RecipeFragrances = append(related.R.RecipeFragrances, o)
	}

	return nil
}

// RecipeFragrances retrieves all the records using an executor.
func RecipeFragrances(mods ...qm.QueryMod) recipeFragranceQuery {
	mods = append(mods, qm.From("\"recipe_fragrance\""))
	return recipeFragranceQuery{NewQuery(mods...)}
}

// FindRecipeFragrance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeFragrance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RecipeFragrance, error) {
	recipeFragranceObj := &RecipeFragrance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_fragrance\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeFragranceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_fragrance")
	}

	return recipeFragranceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeFragrance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_fragrance provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeFragranceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeFragranceInsertCacheMut.RLock()
	cache, cached := recipeFragranceInsertCache[key]
	recipeFragranceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeFragranceAllColumns,
			recipeFragranceColumnsWithDefault,
			recipeFragranceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeFragranceType, recipeFragranceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeFragranceType, recipeFragranceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_fragrance\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_fragrance\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_fragrance")
	}

	if !cached {
		recipeFragranceInsertCacheMut.Lock()
		recipeFragranceInsertCache[key] = cache
		recipeFragranceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecipeFragrance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeFragrance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeFragranceUpdateCacheMut.RLock()
	cache, cached := recipeFragranceUpdateCache[key]
	recipeFragranceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeFragranceAllColumns,
			recipeFragrancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_fragrance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_fragrance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeFragrancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeFragranceType, recipeFragranceMapping, append(wl, recipeFragrancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_fragrance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_fragrance")
	}

	if !cached {
		recipeFragranceUpdateCacheMut.Lock()
		recipeFragranceUpdateCache[key] = cache
		recipeFragranceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeFragranceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_fragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_fragrance")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeFragranceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeFragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_fragrance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeFragrancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeFragrance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeFragrance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeFragrance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_fragrance provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeFragranceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeFragranceUpsertCacheMut.RLock()
	cache, cached := recipeFragranceUpsertCache[key]
	recipeFragranceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeFragranceAllColumns,
			recipeFragranceColumnsWithDefault,
			recipeFragranceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeFragranceAllColumns,
			recipeFragrancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_fragrance, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeFragrancePrimaryKeyColumns))
			copy(conflict, recipeFragrancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_fragrance\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeFragranceType, recipeFragranceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeFragranceType, recipeFragranceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_fragrance")
	}

	if !cached {
		recipeFragranceUpsertCacheMut.Lock()
		recipeFragranceUpsertCache[key] = cache
		recipeFragranceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecipeFragrance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeFragrance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeFragrance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeFragrancePrimaryKeyMapping)
	sql := "DELETE FROM \"recipe_fragrance\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_fragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_fragrance")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeFragranceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeFragranceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_fragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_fragrance")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeFragranceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeFragranceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeFragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipe_fragrance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeFragrancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeFragrance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_fragrance")
	}

	if len(recipeFragranceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeFragrance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeFragrance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeFragranceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeFragranceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeFragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_fragrance\".* FROM \"recipe_fragrance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeFragrancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeFragranceSlice")
	}

	*o = slice

	return nil
}

// RecipeFragranceExists checks if the RecipeFragrance row exists.
func RecipeFragranceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_fragrance\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_fragrance exists")
	}

	return exists, nil
}
