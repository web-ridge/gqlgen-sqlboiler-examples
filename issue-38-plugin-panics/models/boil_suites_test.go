// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Additives", testAdditives)
	t.Run("AdditiveInventories", testAdditiveInventories)
	t.Run("AuthGroups", testAuthGroups)
	t.Run("AuthGroupPermissions", testAuthGroupPermissions)
	t.Run("AuthPermissions", testAuthPermissions)
	t.Run("AuthUsers", testAuthUsers)
	t.Run("AuthUserGroups", testAuthUserGroups)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissions)
	t.Run("Fragrances", testFragrances)
	t.Run("FragranceInventories", testFragranceInventories)
	t.Run("Lipids", testLipids)
	t.Run("LipidInventories", testLipidInventories)
	t.Run("Lyes", testLyes)
	t.Run("LyeInventories", testLyeInventories)
	t.Run("Recipes", testRecipes)
	t.Run("RecipeAdditives", testRecipeAdditives)
	t.Run("RecipeBatches", testRecipeBatches)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditives)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrances)
	t.Run("RecipeBatchLipids", testRecipeBatchLipids)
	t.Run("RecipeBatchLyes", testRecipeBatchLyes)
	t.Run("RecipeBatchNotes", testRecipeBatchNotes)
	t.Run("RecipeFragrances", testRecipeFragrances)
	t.Run("RecipeLipids", testRecipeLipids)
	t.Run("RecipeSteps", testRecipeSteps)
	t.Run("Suppliers", testSuppliers)
}

func TestDelete(t *testing.T) {
	t.Run("Additives", testAdditivesDelete)
	t.Run("AdditiveInventories", testAdditiveInventoriesDelete)
	t.Run("AuthGroups", testAuthGroupsDelete)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsDelete)
	t.Run("AuthPermissions", testAuthPermissionsDelete)
	t.Run("AuthUsers", testAuthUsersDelete)
	t.Run("AuthUserGroups", testAuthUserGroupsDelete)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsDelete)
	t.Run("Fragrances", testFragrancesDelete)
	t.Run("FragranceInventories", testFragranceInventoriesDelete)
	t.Run("Lipids", testLipidsDelete)
	t.Run("LipidInventories", testLipidInventoriesDelete)
	t.Run("Lyes", testLyesDelete)
	t.Run("LyeInventories", testLyeInventoriesDelete)
	t.Run("Recipes", testRecipesDelete)
	t.Run("RecipeAdditives", testRecipeAdditivesDelete)
	t.Run("RecipeBatches", testRecipeBatchesDelete)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesDelete)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesDelete)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsDelete)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesDelete)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesDelete)
	t.Run("RecipeFragrances", testRecipeFragrancesDelete)
	t.Run("RecipeLipids", testRecipeLipidsDelete)
	t.Run("RecipeSteps", testRecipeStepsDelete)
	t.Run("Suppliers", testSuppliersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Additives", testAdditivesQueryDeleteAll)
	t.Run("AdditiveInventories", testAdditiveInventoriesQueryDeleteAll)
	t.Run("AuthGroups", testAuthGroupsQueryDeleteAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsQueryDeleteAll)
	t.Run("AuthPermissions", testAuthPermissionsQueryDeleteAll)
	t.Run("AuthUsers", testAuthUsersQueryDeleteAll)
	t.Run("AuthUserGroups", testAuthUserGroupsQueryDeleteAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsQueryDeleteAll)
	t.Run("Fragrances", testFragrancesQueryDeleteAll)
	t.Run("FragranceInventories", testFragranceInventoriesQueryDeleteAll)
	t.Run("Lipids", testLipidsQueryDeleteAll)
	t.Run("LipidInventories", testLipidInventoriesQueryDeleteAll)
	t.Run("Lyes", testLyesQueryDeleteAll)
	t.Run("LyeInventories", testLyeInventoriesQueryDeleteAll)
	t.Run("Recipes", testRecipesQueryDeleteAll)
	t.Run("RecipeAdditives", testRecipeAdditivesQueryDeleteAll)
	t.Run("RecipeBatches", testRecipeBatchesQueryDeleteAll)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesQueryDeleteAll)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesQueryDeleteAll)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsQueryDeleteAll)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesQueryDeleteAll)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesQueryDeleteAll)
	t.Run("RecipeFragrances", testRecipeFragrancesQueryDeleteAll)
	t.Run("RecipeLipids", testRecipeLipidsQueryDeleteAll)
	t.Run("RecipeSteps", testRecipeStepsQueryDeleteAll)
	t.Run("Suppliers", testSuppliersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Additives", testAdditivesSliceDeleteAll)
	t.Run("AdditiveInventories", testAdditiveInventoriesSliceDeleteAll)
	t.Run("AuthGroups", testAuthGroupsSliceDeleteAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSliceDeleteAll)
	t.Run("AuthPermissions", testAuthPermissionsSliceDeleteAll)
	t.Run("AuthUsers", testAuthUsersSliceDeleteAll)
	t.Run("AuthUserGroups", testAuthUserGroupsSliceDeleteAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSliceDeleteAll)
	t.Run("Fragrances", testFragrancesSliceDeleteAll)
	t.Run("FragranceInventories", testFragranceInventoriesSliceDeleteAll)
	t.Run("Lipids", testLipidsSliceDeleteAll)
	t.Run("LipidInventories", testLipidInventoriesSliceDeleteAll)
	t.Run("Lyes", testLyesSliceDeleteAll)
	t.Run("LyeInventories", testLyeInventoriesSliceDeleteAll)
	t.Run("Recipes", testRecipesSliceDeleteAll)
	t.Run("RecipeAdditives", testRecipeAdditivesSliceDeleteAll)
	t.Run("RecipeBatches", testRecipeBatchesSliceDeleteAll)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesSliceDeleteAll)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesSliceDeleteAll)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsSliceDeleteAll)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesSliceDeleteAll)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesSliceDeleteAll)
	t.Run("RecipeFragrances", testRecipeFragrancesSliceDeleteAll)
	t.Run("RecipeLipids", testRecipeLipidsSliceDeleteAll)
	t.Run("RecipeSteps", testRecipeStepsSliceDeleteAll)
	t.Run("Suppliers", testSuppliersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Additives", testAdditivesExists)
	t.Run("AdditiveInventories", testAdditiveInventoriesExists)
	t.Run("AuthGroups", testAuthGroupsExists)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsExists)
	t.Run("AuthPermissions", testAuthPermissionsExists)
	t.Run("AuthUsers", testAuthUsersExists)
	t.Run("AuthUserGroups", testAuthUserGroupsExists)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsExists)
	t.Run("Fragrances", testFragrancesExists)
	t.Run("FragranceInventories", testFragranceInventoriesExists)
	t.Run("Lipids", testLipidsExists)
	t.Run("LipidInventories", testLipidInventoriesExists)
	t.Run("Lyes", testLyesExists)
	t.Run("LyeInventories", testLyeInventoriesExists)
	t.Run("Recipes", testRecipesExists)
	t.Run("RecipeAdditives", testRecipeAdditivesExists)
	t.Run("RecipeBatches", testRecipeBatchesExists)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesExists)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesExists)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsExists)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesExists)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesExists)
	t.Run("RecipeFragrances", testRecipeFragrancesExists)
	t.Run("RecipeLipids", testRecipeLipidsExists)
	t.Run("RecipeSteps", testRecipeStepsExists)
	t.Run("Suppliers", testSuppliersExists)
}

func TestFind(t *testing.T) {
	t.Run("Additives", testAdditivesFind)
	t.Run("AdditiveInventories", testAdditiveInventoriesFind)
	t.Run("AuthGroups", testAuthGroupsFind)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsFind)
	t.Run("AuthPermissions", testAuthPermissionsFind)
	t.Run("AuthUsers", testAuthUsersFind)
	t.Run("AuthUserGroups", testAuthUserGroupsFind)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsFind)
	t.Run("Fragrances", testFragrancesFind)
	t.Run("FragranceInventories", testFragranceInventoriesFind)
	t.Run("Lipids", testLipidsFind)
	t.Run("LipidInventories", testLipidInventoriesFind)
	t.Run("Lyes", testLyesFind)
	t.Run("LyeInventories", testLyeInventoriesFind)
	t.Run("Recipes", testRecipesFind)
	t.Run("RecipeAdditives", testRecipeAdditivesFind)
	t.Run("RecipeBatches", testRecipeBatchesFind)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesFind)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesFind)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsFind)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesFind)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesFind)
	t.Run("RecipeFragrances", testRecipeFragrancesFind)
	t.Run("RecipeLipids", testRecipeLipidsFind)
	t.Run("RecipeSteps", testRecipeStepsFind)
	t.Run("Suppliers", testSuppliersFind)
}

func TestBind(t *testing.T) {
	t.Run("Additives", testAdditivesBind)
	t.Run("AdditiveInventories", testAdditiveInventoriesBind)
	t.Run("AuthGroups", testAuthGroupsBind)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsBind)
	t.Run("AuthPermissions", testAuthPermissionsBind)
	t.Run("AuthUsers", testAuthUsersBind)
	t.Run("AuthUserGroups", testAuthUserGroupsBind)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsBind)
	t.Run("Fragrances", testFragrancesBind)
	t.Run("FragranceInventories", testFragranceInventoriesBind)
	t.Run("Lipids", testLipidsBind)
	t.Run("LipidInventories", testLipidInventoriesBind)
	t.Run("Lyes", testLyesBind)
	t.Run("LyeInventories", testLyeInventoriesBind)
	t.Run("Recipes", testRecipesBind)
	t.Run("RecipeAdditives", testRecipeAdditivesBind)
	t.Run("RecipeBatches", testRecipeBatchesBind)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesBind)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesBind)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsBind)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesBind)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesBind)
	t.Run("RecipeFragrances", testRecipeFragrancesBind)
	t.Run("RecipeLipids", testRecipeLipidsBind)
	t.Run("RecipeSteps", testRecipeStepsBind)
	t.Run("Suppliers", testSuppliersBind)
}

func TestOne(t *testing.T) {
	t.Run("Additives", testAdditivesOne)
	t.Run("AdditiveInventories", testAdditiveInventoriesOne)
	t.Run("AuthGroups", testAuthGroupsOne)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsOne)
	t.Run("AuthPermissions", testAuthPermissionsOne)
	t.Run("AuthUsers", testAuthUsersOne)
	t.Run("AuthUserGroups", testAuthUserGroupsOne)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsOne)
	t.Run("Fragrances", testFragrancesOne)
	t.Run("FragranceInventories", testFragranceInventoriesOne)
	t.Run("Lipids", testLipidsOne)
	t.Run("LipidInventories", testLipidInventoriesOne)
	t.Run("Lyes", testLyesOne)
	t.Run("LyeInventories", testLyeInventoriesOne)
	t.Run("Recipes", testRecipesOne)
	t.Run("RecipeAdditives", testRecipeAdditivesOne)
	t.Run("RecipeBatches", testRecipeBatchesOne)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesOne)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesOne)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsOne)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesOne)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesOne)
	t.Run("RecipeFragrances", testRecipeFragrancesOne)
	t.Run("RecipeLipids", testRecipeLipidsOne)
	t.Run("RecipeSteps", testRecipeStepsOne)
	t.Run("Suppliers", testSuppliersOne)
}

func TestAll(t *testing.T) {
	t.Run("Additives", testAdditivesAll)
	t.Run("AdditiveInventories", testAdditiveInventoriesAll)
	t.Run("AuthGroups", testAuthGroupsAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsAll)
	t.Run("AuthPermissions", testAuthPermissionsAll)
	t.Run("AuthUsers", testAuthUsersAll)
	t.Run("AuthUserGroups", testAuthUserGroupsAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsAll)
	t.Run("Fragrances", testFragrancesAll)
	t.Run("FragranceInventories", testFragranceInventoriesAll)
	t.Run("Lipids", testLipidsAll)
	t.Run("LipidInventories", testLipidInventoriesAll)
	t.Run("Lyes", testLyesAll)
	t.Run("LyeInventories", testLyeInventoriesAll)
	t.Run("Recipes", testRecipesAll)
	t.Run("RecipeAdditives", testRecipeAdditivesAll)
	t.Run("RecipeBatches", testRecipeBatchesAll)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesAll)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesAll)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsAll)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesAll)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesAll)
	t.Run("RecipeFragrances", testRecipeFragrancesAll)
	t.Run("RecipeLipids", testRecipeLipidsAll)
	t.Run("RecipeSteps", testRecipeStepsAll)
	t.Run("Suppliers", testSuppliersAll)
}

func TestCount(t *testing.T) {
	t.Run("Additives", testAdditivesCount)
	t.Run("AdditiveInventories", testAdditiveInventoriesCount)
	t.Run("AuthGroups", testAuthGroupsCount)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsCount)
	t.Run("AuthPermissions", testAuthPermissionsCount)
	t.Run("AuthUsers", testAuthUsersCount)
	t.Run("AuthUserGroups", testAuthUserGroupsCount)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsCount)
	t.Run("Fragrances", testFragrancesCount)
	t.Run("FragranceInventories", testFragranceInventoriesCount)
	t.Run("Lipids", testLipidsCount)
	t.Run("LipidInventories", testLipidInventoriesCount)
	t.Run("Lyes", testLyesCount)
	t.Run("LyeInventories", testLyeInventoriesCount)
	t.Run("Recipes", testRecipesCount)
	t.Run("RecipeAdditives", testRecipeAdditivesCount)
	t.Run("RecipeBatches", testRecipeBatchesCount)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesCount)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesCount)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsCount)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesCount)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesCount)
	t.Run("RecipeFragrances", testRecipeFragrancesCount)
	t.Run("RecipeLipids", testRecipeLipidsCount)
	t.Run("RecipeSteps", testRecipeStepsCount)
	t.Run("Suppliers", testSuppliersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Additives", testAdditivesHooks)
	t.Run("AdditiveInventories", testAdditiveInventoriesHooks)
	t.Run("AuthGroups", testAuthGroupsHooks)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsHooks)
	t.Run("AuthPermissions", testAuthPermissionsHooks)
	t.Run("AuthUsers", testAuthUsersHooks)
	t.Run("AuthUserGroups", testAuthUserGroupsHooks)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsHooks)
	t.Run("Fragrances", testFragrancesHooks)
	t.Run("FragranceInventories", testFragranceInventoriesHooks)
	t.Run("Lipids", testLipidsHooks)
	t.Run("LipidInventories", testLipidInventoriesHooks)
	t.Run("Lyes", testLyesHooks)
	t.Run("LyeInventories", testLyeInventoriesHooks)
	t.Run("Recipes", testRecipesHooks)
	t.Run("RecipeAdditives", testRecipeAdditivesHooks)
	t.Run("RecipeBatches", testRecipeBatchesHooks)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesHooks)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesHooks)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsHooks)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesHooks)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesHooks)
	t.Run("RecipeFragrances", testRecipeFragrancesHooks)
	t.Run("RecipeLipids", testRecipeLipidsHooks)
	t.Run("RecipeSteps", testRecipeStepsHooks)
	t.Run("Suppliers", testSuppliersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Additives", testAdditivesInsert)
	t.Run("Additives", testAdditivesInsertWhitelist)
	t.Run("AdditiveInventories", testAdditiveInventoriesInsert)
	t.Run("AdditiveInventories", testAdditiveInventoriesInsertWhitelist)
	t.Run("AuthGroups", testAuthGroupsInsert)
	t.Run("AuthGroups", testAuthGroupsInsertWhitelist)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsInsert)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsInsertWhitelist)
	t.Run("AuthPermissions", testAuthPermissionsInsert)
	t.Run("AuthPermissions", testAuthPermissionsInsertWhitelist)
	t.Run("AuthUsers", testAuthUsersInsert)
	t.Run("AuthUsers", testAuthUsersInsertWhitelist)
	t.Run("AuthUserGroups", testAuthUserGroupsInsert)
	t.Run("AuthUserGroups", testAuthUserGroupsInsertWhitelist)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsInsert)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsInsertWhitelist)
	t.Run("Fragrances", testFragrancesInsert)
	t.Run("Fragrances", testFragrancesInsertWhitelist)
	t.Run("FragranceInventories", testFragranceInventoriesInsert)
	t.Run("FragranceInventories", testFragranceInventoriesInsertWhitelist)
	t.Run("Lipids", testLipidsInsert)
	t.Run("Lipids", testLipidsInsertWhitelist)
	t.Run("LipidInventories", testLipidInventoriesInsert)
	t.Run("LipidInventories", testLipidInventoriesInsertWhitelist)
	t.Run("Lyes", testLyesInsert)
	t.Run("Lyes", testLyesInsertWhitelist)
	t.Run("LyeInventories", testLyeInventoriesInsert)
	t.Run("LyeInventories", testLyeInventoriesInsertWhitelist)
	t.Run("Recipes", testRecipesInsert)
	t.Run("Recipes", testRecipesInsertWhitelist)
	t.Run("RecipeAdditives", testRecipeAdditivesInsert)
	t.Run("RecipeAdditives", testRecipeAdditivesInsertWhitelist)
	t.Run("RecipeBatches", testRecipeBatchesInsert)
	t.Run("RecipeBatches", testRecipeBatchesInsertWhitelist)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesInsert)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesInsertWhitelist)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesInsert)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesInsertWhitelist)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsInsert)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsInsertWhitelist)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesInsert)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesInsertWhitelist)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesInsert)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesInsertWhitelist)
	t.Run("RecipeFragrances", testRecipeFragrancesInsert)
	t.Run("RecipeFragrances", testRecipeFragrancesInsertWhitelist)
	t.Run("RecipeLipids", testRecipeLipidsInsert)
	t.Run("RecipeLipids", testRecipeLipidsInsertWhitelist)
	t.Run("RecipeSteps", testRecipeStepsInsert)
	t.Run("RecipeSteps", testRecipeStepsInsertWhitelist)
	t.Run("Suppliers", testSuppliersInsert)
	t.Run("Suppliers", testSuppliersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AdditiveInventoryToAdditiveUsingAdditive", testAdditiveInventoryToOneAdditiveUsingAdditive)
	t.Run("AdditiveInventoryToSupplierUsingSupplier", testAdditiveInventoryToOneSupplierUsingSupplier)
	t.Run("AuthGroupPermissionToAuthPermissionUsingPermission", testAuthGroupPermissionToOneAuthPermissionUsingPermission)
	t.Run("AuthGroupPermissionToAuthGroupUsingGroup", testAuthGroupPermissionToOneAuthGroupUsingGroup)
	t.Run("AuthUserGroupToAuthGroupUsingGroup", testAuthUserGroupToOneAuthGroupUsingGroup)
	t.Run("AuthUserGroupToAuthUserUsingUser", testAuthUserGroupToOneAuthUserUsingUser)
	t.Run("AuthUserUserPermissionToAuthPermissionUsingPermission", testAuthUserUserPermissionToOneAuthPermissionUsingPermission)
	t.Run("AuthUserUserPermissionToAuthUserUsingUser", testAuthUserUserPermissionToOneAuthUserUsingUser)
	t.Run("FragranceInventoryToFragranceUsingFragrance", testFragranceInventoryToOneFragranceUsingFragrance)
	t.Run("FragranceInventoryToSupplierUsingSupplier", testFragranceInventoryToOneSupplierUsingSupplier)
	t.Run("LipidInventoryToLipidUsingLipid", testLipidInventoryToOneLipidUsingLipid)
	t.Run("LipidInventoryToSupplierUsingSupplier", testLipidInventoryToOneSupplierUsingSupplier)
	t.Run("LyeInventoryToLyeUsingLye", testLyeInventoryToOneLyeUsingLye)
	t.Run("LyeInventoryToSupplierUsingSupplier", testLyeInventoryToOneSupplierUsingSupplier)
	t.Run("RecipeAdditiveToAdditiveUsingAdditive", testRecipeAdditiveToOneAdditiveUsingAdditive)
	t.Run("RecipeAdditiveToRecipeUsingRecipe", testRecipeAdditiveToOneRecipeUsingRecipe)
	t.Run("RecipeBatchToRecipeUsingRecipe", testRecipeBatchToOneRecipeUsingRecipe)
	t.Run("RecipeBatchAdditiveToAdditiveUsingAdditive", testRecipeBatchAdditiveToOneAdditiveUsingAdditive)
	t.Run("RecipeBatchAdditiveToRecipeBatchUsingBatch", testRecipeBatchAdditiveToOneRecipeBatchUsingBatch)
	t.Run("RecipeBatchFragranceToRecipeBatchUsingBatch", testRecipeBatchFragranceToOneRecipeBatchUsingBatch)
	t.Run("RecipeBatchFragranceToFragranceUsingFragrance", testRecipeBatchFragranceToOneFragranceUsingFragrance)
	t.Run("RecipeBatchLipidToRecipeBatchUsingBatch", testRecipeBatchLipidToOneRecipeBatchUsingBatch)
	t.Run("RecipeBatchLipidToLipidUsingLipid", testRecipeBatchLipidToOneLipidUsingLipid)
	t.Run("RecipeBatchLyeToRecipeBatchUsingBatch", testRecipeBatchLyeToOneRecipeBatchUsingBatch)
	t.Run("RecipeBatchLyeToLyeUsingLye", testRecipeBatchLyeToOneLyeUsingLye)
	t.Run("RecipeBatchNoteToRecipeBatchUsingBatch", testRecipeBatchNoteToOneRecipeBatchUsingBatch)
	t.Run("RecipeFragranceToFragranceUsingFragrance", testRecipeFragranceToOneFragranceUsingFragrance)
	t.Run("RecipeFragranceToRecipeUsingRecipe", testRecipeFragranceToOneRecipeUsingRecipe)
	t.Run("RecipeLipidToLipidUsingLipid", testRecipeLipidToOneLipidUsingLipid)
	t.Run("RecipeLipidToRecipeUsingRecipe", testRecipeLipidToOneRecipeUsingRecipe)
	t.Run("RecipeStepToRecipeUsingRecipe", testRecipeStepToOneRecipeUsingRecipe)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("AdditiveToRecipeAdditiveUsingRecipeAdditive", testAdditiveOneToOneRecipeAdditiveUsingRecipeAdditive)
	t.Run("AdditiveToRecipeBatchAdditiveUsingRecipeBatchAdditive", testAdditiveOneToOneRecipeBatchAdditiveUsingRecipeBatchAdditive)
	t.Run("FragranceToRecipeBatchFragranceUsingRecipeBatchFragrance", testFragranceOneToOneRecipeBatchFragranceUsingRecipeBatchFragrance)
	t.Run("FragranceToRecipeFragranceUsingRecipeFragrance", testFragranceOneToOneRecipeFragranceUsingRecipeFragrance)
	t.Run("LipidToRecipeBatchLipidUsingRecipeBatchLipid", testLipidOneToOneRecipeBatchLipidUsingRecipeBatchLipid)
	t.Run("LipidToRecipeLipidUsingRecipeLipid", testLipidOneToOneRecipeLipidUsingRecipeLipid)
	t.Run("LyeToRecipeBatchLyeUsingRecipeBatchLye", testLyeOneToOneRecipeBatchLyeUsingRecipeBatchLye)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AdditiveToAdditiveInventories", testAdditiveToManyAdditiveInventories)
	t.Run("AuthGroupToGroupAuthGroupPermissions", testAuthGroupToManyGroupAuthGroupPermissions)
	t.Run("AuthGroupToGroupAuthUserGroups", testAuthGroupToManyGroupAuthUserGroups)
	t.Run("AuthPermissionToPermissionAuthGroupPermissions", testAuthPermissionToManyPermissionAuthGroupPermissions)
	t.Run("AuthPermissionToPermissionAuthUserUserPermissions", testAuthPermissionToManyPermissionAuthUserUserPermissions)
	t.Run("AuthUserToUserAuthUserGroups", testAuthUserToManyUserAuthUserGroups)
	t.Run("AuthUserToUserAuthUserUserPermissions", testAuthUserToManyUserAuthUserUserPermissions)
	t.Run("FragranceToFragranceInventories", testFragranceToManyFragranceInventories)
	t.Run("LipidToLipidInventories", testLipidToManyLipidInventories)
	t.Run("LyeToLyeInventories", testLyeToManyLyeInventories)
	t.Run("RecipeToRecipeAdditives", testRecipeToManyRecipeAdditives)
	t.Run("RecipeToRecipeBatches", testRecipeToManyRecipeBatches)
	t.Run("RecipeToRecipeFragrances", testRecipeToManyRecipeFragrances)
	t.Run("RecipeToRecipeLipids", testRecipeToManyRecipeLipids)
	t.Run("RecipeToRecipeSteps", testRecipeToManyRecipeSteps)
	t.Run("RecipeBatchToBatchRecipeBatchAdditives", testRecipeBatchToManyBatchRecipeBatchAdditives)
	t.Run("RecipeBatchToBatchRecipeBatchFragrances", testRecipeBatchToManyBatchRecipeBatchFragrances)
	t.Run("RecipeBatchToBatchRecipeBatchLipids", testRecipeBatchToManyBatchRecipeBatchLipids)
	t.Run("RecipeBatchToBatchRecipeBatchLyes", testRecipeBatchToManyBatchRecipeBatchLyes)
	t.Run("RecipeBatchToBatchRecipeBatchNotes", testRecipeBatchToManyBatchRecipeBatchNotes)
	t.Run("SupplierToAdditiveInventories", testSupplierToManyAdditiveInventories)
	t.Run("SupplierToFragranceInventories", testSupplierToManyFragranceInventories)
	t.Run("SupplierToLipidInventories", testSupplierToManyLipidInventories)
	t.Run("SupplierToLyeInventories", testSupplierToManyLyeInventories)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AdditiveInventoryToAdditiveUsingAdditiveInventories", testAdditiveInventoryToOneSetOpAdditiveUsingAdditive)
	t.Run("AdditiveInventoryToSupplierUsingAdditiveInventories", testAdditiveInventoryToOneSetOpSupplierUsingSupplier)
	t.Run("AuthGroupPermissionToAuthPermissionUsingPermissionAuthGroupPermissions", testAuthGroupPermissionToOneSetOpAuthPermissionUsingPermission)
	t.Run("AuthGroupPermissionToAuthGroupUsingGroupAuthGroupPermissions", testAuthGroupPermissionToOneSetOpAuthGroupUsingGroup)
	t.Run("AuthUserGroupToAuthGroupUsingGroupAuthUserGroups", testAuthUserGroupToOneSetOpAuthGroupUsingGroup)
	t.Run("AuthUserGroupToAuthUserUsingUserAuthUserGroups", testAuthUserGroupToOneSetOpAuthUserUsingUser)
	t.Run("AuthUserUserPermissionToAuthPermissionUsingPermissionAuthUserUserPermissions", testAuthUserUserPermissionToOneSetOpAuthPermissionUsingPermission)
	t.Run("AuthUserUserPermissionToAuthUserUsingUserAuthUserUserPermissions", testAuthUserUserPermissionToOneSetOpAuthUserUsingUser)
	t.Run("FragranceInventoryToFragranceUsingFragranceInventories", testFragranceInventoryToOneSetOpFragranceUsingFragrance)
	t.Run("FragranceInventoryToSupplierUsingFragranceInventories", testFragranceInventoryToOneSetOpSupplierUsingSupplier)
	t.Run("LipidInventoryToLipidUsingLipidInventories", testLipidInventoryToOneSetOpLipidUsingLipid)
	t.Run("LipidInventoryToSupplierUsingLipidInventories", testLipidInventoryToOneSetOpSupplierUsingSupplier)
	t.Run("LyeInventoryToLyeUsingLyeInventories", testLyeInventoryToOneSetOpLyeUsingLye)
	t.Run("LyeInventoryToSupplierUsingLyeInventories", testLyeInventoryToOneSetOpSupplierUsingSupplier)
	t.Run("RecipeAdditiveToAdditiveUsingRecipeAdditive", testRecipeAdditiveToOneSetOpAdditiveUsingAdditive)
	t.Run("RecipeAdditiveToRecipeUsingRecipeAdditives", testRecipeAdditiveToOneSetOpRecipeUsingRecipe)
	t.Run("RecipeBatchToRecipeUsingRecipeBatches", testRecipeBatchToOneSetOpRecipeUsingRecipe)
	t.Run("RecipeBatchAdditiveToAdditiveUsingRecipeBatchAdditive", testRecipeBatchAdditiveToOneSetOpAdditiveUsingAdditive)
	t.Run("RecipeBatchAdditiveToRecipeBatchUsingBatchRecipeBatchAdditives", testRecipeBatchAdditiveToOneSetOpRecipeBatchUsingBatch)
	t.Run("RecipeBatchFragranceToRecipeBatchUsingBatchRecipeBatchFragrances", testRecipeBatchFragranceToOneSetOpRecipeBatchUsingBatch)
	t.Run("RecipeBatchFragranceToFragranceUsingRecipeBatchFragrance", testRecipeBatchFragranceToOneSetOpFragranceUsingFragrance)
	t.Run("RecipeBatchLipidToRecipeBatchUsingBatchRecipeBatchLipids", testRecipeBatchLipidToOneSetOpRecipeBatchUsingBatch)
	t.Run("RecipeBatchLipidToLipidUsingRecipeBatchLipid", testRecipeBatchLipidToOneSetOpLipidUsingLipid)
	t.Run("RecipeBatchLyeToRecipeBatchUsingBatchRecipeBatchLyes", testRecipeBatchLyeToOneSetOpRecipeBatchUsingBatch)
	t.Run("RecipeBatchLyeToLyeUsingRecipeBatchLye", testRecipeBatchLyeToOneSetOpLyeUsingLye)
	t.Run("RecipeBatchNoteToRecipeBatchUsingBatchRecipeBatchNotes", testRecipeBatchNoteToOneSetOpRecipeBatchUsingBatch)
	t.Run("RecipeFragranceToFragranceUsingRecipeFragrance", testRecipeFragranceToOneSetOpFragranceUsingFragrance)
	t.Run("RecipeFragranceToRecipeUsingRecipeFragrances", testRecipeFragranceToOneSetOpRecipeUsingRecipe)
	t.Run("RecipeLipidToLipidUsingRecipeLipid", testRecipeLipidToOneSetOpLipidUsingLipid)
	t.Run("RecipeLipidToRecipeUsingRecipeLipids", testRecipeLipidToOneSetOpRecipeUsingRecipe)
	t.Run("RecipeStepToRecipeUsingRecipeSteps", testRecipeStepToOneSetOpRecipeUsingRecipe)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("AdditiveToRecipeAdditiveUsingRecipeAdditive", testAdditiveOneToOneSetOpRecipeAdditiveUsingRecipeAdditive)
	t.Run("AdditiveToRecipeBatchAdditiveUsingRecipeBatchAdditive", testAdditiveOneToOneSetOpRecipeBatchAdditiveUsingRecipeBatchAdditive)
	t.Run("FragranceToRecipeBatchFragranceUsingRecipeBatchFragrance", testFragranceOneToOneSetOpRecipeBatchFragranceUsingRecipeBatchFragrance)
	t.Run("FragranceToRecipeFragranceUsingRecipeFragrance", testFragranceOneToOneSetOpRecipeFragranceUsingRecipeFragrance)
	t.Run("LipidToRecipeBatchLipidUsingRecipeBatchLipid", testLipidOneToOneSetOpRecipeBatchLipidUsingRecipeBatchLipid)
	t.Run("LipidToRecipeLipidUsingRecipeLipid", testLipidOneToOneSetOpRecipeLipidUsingRecipeLipid)
	t.Run("LyeToRecipeBatchLyeUsingRecipeBatchLye", testLyeOneToOneSetOpRecipeBatchLyeUsingRecipeBatchLye)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AdditiveToAdditiveInventories", testAdditiveToManyAddOpAdditiveInventories)
	t.Run("AuthGroupToGroupAuthGroupPermissions", testAuthGroupToManyAddOpGroupAuthGroupPermissions)
	t.Run("AuthGroupToGroupAuthUserGroups", testAuthGroupToManyAddOpGroupAuthUserGroups)
	t.Run("AuthPermissionToPermissionAuthGroupPermissions", testAuthPermissionToManyAddOpPermissionAuthGroupPermissions)
	t.Run("AuthPermissionToPermissionAuthUserUserPermissions", testAuthPermissionToManyAddOpPermissionAuthUserUserPermissions)
	t.Run("AuthUserToUserAuthUserGroups", testAuthUserToManyAddOpUserAuthUserGroups)
	t.Run("AuthUserToUserAuthUserUserPermissions", testAuthUserToManyAddOpUserAuthUserUserPermissions)
	t.Run("FragranceToFragranceInventories", testFragranceToManyAddOpFragranceInventories)
	t.Run("LipidToLipidInventories", testLipidToManyAddOpLipidInventories)
	t.Run("LyeToLyeInventories", testLyeToManyAddOpLyeInventories)
	t.Run("RecipeToRecipeAdditives", testRecipeToManyAddOpRecipeAdditives)
	t.Run("RecipeToRecipeBatches", testRecipeToManyAddOpRecipeBatches)
	t.Run("RecipeToRecipeFragrances", testRecipeToManyAddOpRecipeFragrances)
	t.Run("RecipeToRecipeLipids", testRecipeToManyAddOpRecipeLipids)
	t.Run("RecipeToRecipeSteps", testRecipeToManyAddOpRecipeSteps)
	t.Run("RecipeBatchToBatchRecipeBatchAdditives", testRecipeBatchToManyAddOpBatchRecipeBatchAdditives)
	t.Run("RecipeBatchToBatchRecipeBatchFragrances", testRecipeBatchToManyAddOpBatchRecipeBatchFragrances)
	t.Run("RecipeBatchToBatchRecipeBatchLipids", testRecipeBatchToManyAddOpBatchRecipeBatchLipids)
	t.Run("RecipeBatchToBatchRecipeBatchLyes", testRecipeBatchToManyAddOpBatchRecipeBatchLyes)
	t.Run("RecipeBatchToBatchRecipeBatchNotes", testRecipeBatchToManyAddOpBatchRecipeBatchNotes)
	t.Run("SupplierToAdditiveInventories", testSupplierToManyAddOpAdditiveInventories)
	t.Run("SupplierToFragranceInventories", testSupplierToManyAddOpFragranceInventories)
	t.Run("SupplierToLipidInventories", testSupplierToManyAddOpLipidInventories)
	t.Run("SupplierToLyeInventories", testSupplierToManyAddOpLyeInventories)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Additives", testAdditivesReload)
	t.Run("AdditiveInventories", testAdditiveInventoriesReload)
	t.Run("AuthGroups", testAuthGroupsReload)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsReload)
	t.Run("AuthPermissions", testAuthPermissionsReload)
	t.Run("AuthUsers", testAuthUsersReload)
	t.Run("AuthUserGroups", testAuthUserGroupsReload)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsReload)
	t.Run("Fragrances", testFragrancesReload)
	t.Run("FragranceInventories", testFragranceInventoriesReload)
	t.Run("Lipids", testLipidsReload)
	t.Run("LipidInventories", testLipidInventoriesReload)
	t.Run("Lyes", testLyesReload)
	t.Run("LyeInventories", testLyeInventoriesReload)
	t.Run("Recipes", testRecipesReload)
	t.Run("RecipeAdditives", testRecipeAdditivesReload)
	t.Run("RecipeBatches", testRecipeBatchesReload)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesReload)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesReload)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsReload)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesReload)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesReload)
	t.Run("RecipeFragrances", testRecipeFragrancesReload)
	t.Run("RecipeLipids", testRecipeLipidsReload)
	t.Run("RecipeSteps", testRecipeStepsReload)
	t.Run("Suppliers", testSuppliersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Additives", testAdditivesReloadAll)
	t.Run("AdditiveInventories", testAdditiveInventoriesReloadAll)
	t.Run("AuthGroups", testAuthGroupsReloadAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsReloadAll)
	t.Run("AuthPermissions", testAuthPermissionsReloadAll)
	t.Run("AuthUsers", testAuthUsersReloadAll)
	t.Run("AuthUserGroups", testAuthUserGroupsReloadAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsReloadAll)
	t.Run("Fragrances", testFragrancesReloadAll)
	t.Run("FragranceInventories", testFragranceInventoriesReloadAll)
	t.Run("Lipids", testLipidsReloadAll)
	t.Run("LipidInventories", testLipidInventoriesReloadAll)
	t.Run("Lyes", testLyesReloadAll)
	t.Run("LyeInventories", testLyeInventoriesReloadAll)
	t.Run("Recipes", testRecipesReloadAll)
	t.Run("RecipeAdditives", testRecipeAdditivesReloadAll)
	t.Run("RecipeBatches", testRecipeBatchesReloadAll)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesReloadAll)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesReloadAll)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsReloadAll)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesReloadAll)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesReloadAll)
	t.Run("RecipeFragrances", testRecipeFragrancesReloadAll)
	t.Run("RecipeLipids", testRecipeLipidsReloadAll)
	t.Run("RecipeSteps", testRecipeStepsReloadAll)
	t.Run("Suppliers", testSuppliersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Additives", testAdditivesSelect)
	t.Run("AdditiveInventories", testAdditiveInventoriesSelect)
	t.Run("AuthGroups", testAuthGroupsSelect)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSelect)
	t.Run("AuthPermissions", testAuthPermissionsSelect)
	t.Run("AuthUsers", testAuthUsersSelect)
	t.Run("AuthUserGroups", testAuthUserGroupsSelect)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSelect)
	t.Run("Fragrances", testFragrancesSelect)
	t.Run("FragranceInventories", testFragranceInventoriesSelect)
	t.Run("Lipids", testLipidsSelect)
	t.Run("LipidInventories", testLipidInventoriesSelect)
	t.Run("Lyes", testLyesSelect)
	t.Run("LyeInventories", testLyeInventoriesSelect)
	t.Run("Recipes", testRecipesSelect)
	t.Run("RecipeAdditives", testRecipeAdditivesSelect)
	t.Run("RecipeBatches", testRecipeBatchesSelect)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesSelect)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesSelect)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsSelect)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesSelect)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesSelect)
	t.Run("RecipeFragrances", testRecipeFragrancesSelect)
	t.Run("RecipeLipids", testRecipeLipidsSelect)
	t.Run("RecipeSteps", testRecipeStepsSelect)
	t.Run("Suppliers", testSuppliersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Additives", testAdditivesUpdate)
	t.Run("AdditiveInventories", testAdditiveInventoriesUpdate)
	t.Run("AuthGroups", testAuthGroupsUpdate)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsUpdate)
	t.Run("AuthPermissions", testAuthPermissionsUpdate)
	t.Run("AuthUsers", testAuthUsersUpdate)
	t.Run("AuthUserGroups", testAuthUserGroupsUpdate)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsUpdate)
	t.Run("Fragrances", testFragrancesUpdate)
	t.Run("FragranceInventories", testFragranceInventoriesUpdate)
	t.Run("Lipids", testLipidsUpdate)
	t.Run("LipidInventories", testLipidInventoriesUpdate)
	t.Run("Lyes", testLyesUpdate)
	t.Run("LyeInventories", testLyeInventoriesUpdate)
	t.Run("Recipes", testRecipesUpdate)
	t.Run("RecipeAdditives", testRecipeAdditivesUpdate)
	t.Run("RecipeBatches", testRecipeBatchesUpdate)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesUpdate)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesUpdate)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsUpdate)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesUpdate)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesUpdate)
	t.Run("RecipeFragrances", testRecipeFragrancesUpdate)
	t.Run("RecipeLipids", testRecipeLipidsUpdate)
	t.Run("RecipeSteps", testRecipeStepsUpdate)
	t.Run("Suppliers", testSuppliersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Additives", testAdditivesSliceUpdateAll)
	t.Run("AdditiveInventories", testAdditiveInventoriesSliceUpdateAll)
	t.Run("AuthGroups", testAuthGroupsSliceUpdateAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSliceUpdateAll)
	t.Run("AuthPermissions", testAuthPermissionsSliceUpdateAll)
	t.Run("AuthUsers", testAuthUsersSliceUpdateAll)
	t.Run("AuthUserGroups", testAuthUserGroupsSliceUpdateAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSliceUpdateAll)
	t.Run("Fragrances", testFragrancesSliceUpdateAll)
	t.Run("FragranceInventories", testFragranceInventoriesSliceUpdateAll)
	t.Run("Lipids", testLipidsSliceUpdateAll)
	t.Run("LipidInventories", testLipidInventoriesSliceUpdateAll)
	t.Run("Lyes", testLyesSliceUpdateAll)
	t.Run("LyeInventories", testLyeInventoriesSliceUpdateAll)
	t.Run("Recipes", testRecipesSliceUpdateAll)
	t.Run("RecipeAdditives", testRecipeAdditivesSliceUpdateAll)
	t.Run("RecipeBatches", testRecipeBatchesSliceUpdateAll)
	t.Run("RecipeBatchAdditives", testRecipeBatchAdditivesSliceUpdateAll)
	t.Run("RecipeBatchFragrances", testRecipeBatchFragrancesSliceUpdateAll)
	t.Run("RecipeBatchLipids", testRecipeBatchLipidsSliceUpdateAll)
	t.Run("RecipeBatchLyes", testRecipeBatchLyesSliceUpdateAll)
	t.Run("RecipeBatchNotes", testRecipeBatchNotesSliceUpdateAll)
	t.Run("RecipeFragrances", testRecipeFragrancesSliceUpdateAll)
	t.Run("RecipeLipids", testRecipeLipidsSliceUpdateAll)
	t.Run("RecipeSteps", testRecipeStepsSliceUpdateAll)
	t.Run("Suppliers", testSuppliersSliceUpdateAll)
}
