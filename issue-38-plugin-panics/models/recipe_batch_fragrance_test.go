// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeBatchFragrances(t *testing.T) {
	t.Parallel()

	query := RecipeBatchFragrances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeBatchFragrancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchFragrancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeBatchFragrances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchFragrancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchFragranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchFragrancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeBatchFragranceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeBatchFragrance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeBatchFragranceExists to return true, but got false.")
	}
}

func testRecipeBatchFragrancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeBatchFragranceFound, err := FindRecipeBatchFragrance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeBatchFragranceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeBatchFragrancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeBatchFragrances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchFragrancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeBatchFragrances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeBatchFragrancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeBatchFragranceOne := &RecipeBatchFragrance{}
	recipeBatchFragranceTwo := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, recipeBatchFragranceOne, recipeBatchFragranceDBTypes, false, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchFragranceTwo, recipeBatchFragranceDBTypes, false, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchFragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchFragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatchFragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeBatchFragrancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeBatchFragranceOne := &RecipeBatchFragrance{}
	recipeBatchFragranceTwo := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, recipeBatchFragranceOne, recipeBatchFragranceDBTypes, false, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchFragranceTwo, recipeBatchFragranceDBTypes, false, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchFragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchFragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeBatchFragranceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func recipeBatchFragranceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatchFragrance) error {
	*o = RecipeBatchFragrance{}
	return nil
}

func testRecipeBatchFragrancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeBatchFragrance{}
	o := &RecipeBatchFragrance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance object: %s", err)
	}

	AddRecipeBatchFragranceHook(boil.BeforeInsertHook, recipeBatchFragranceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceBeforeInsertHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.AfterInsertHook, recipeBatchFragranceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceAfterInsertHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.AfterSelectHook, recipeBatchFragranceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceAfterSelectHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.BeforeUpdateHook, recipeBatchFragranceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceBeforeUpdateHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.AfterUpdateHook, recipeBatchFragranceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceAfterUpdateHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.BeforeDeleteHook, recipeBatchFragranceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceBeforeDeleteHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.AfterDeleteHook, recipeBatchFragranceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceAfterDeleteHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.BeforeUpsertHook, recipeBatchFragranceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceBeforeUpsertHooks = []RecipeBatchFragranceHook{}

	AddRecipeBatchFragranceHook(boil.AfterUpsertHook, recipeBatchFragranceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchFragranceAfterUpsertHooks = []RecipeBatchFragranceHook{}
}

func testRecipeBatchFragrancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchFragrancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeBatchFragranceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchFragranceToOneRecipeBatchUsingBatch(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatchFragrance
	var foreign RecipeBatch

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchFragranceDBTypes, false, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BatchID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Batch().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchFragranceSlice{&local}
	if err = local.L.LoadBatch(ctx, tx, false, (*[]*RecipeBatchFragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Batch == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Batch = nil
	if err = local.L.LoadBatch(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Batch == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchFragranceToOneFragranceUsingFragrance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatchFragrance
	var foreign Fragrance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchFragranceDBTypes, false, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, fragranceDBTypes, false, fragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fragrance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FragranceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Fragrance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchFragranceSlice{&local}
	if err = local.L.LoadFragrance(ctx, tx, false, (*[]*RecipeBatchFragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Fragrance = nil
	if err = local.L.LoadFragrance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchFragranceToOneSetOpRecipeBatchUsingBatch(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatchFragrance
	var b, c RecipeBatch

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchFragranceDBTypes, false, strmangle.SetComplement(recipeBatchFragrancePrimaryKeyColumns, recipeBatchFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeBatch{&b, &c} {
		err = a.SetBatch(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Batch != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BatchRecipeBatchFragrances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BatchID != x.ID {
			t.Error("foreign key was wrong value", a.BatchID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BatchID))
		reflect.Indirect(reflect.ValueOf(&a.BatchID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BatchID != x.ID {
			t.Error("foreign key was wrong value", a.BatchID, x.ID)
		}
	}
}
func testRecipeBatchFragranceToOneSetOpFragranceUsingFragrance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatchFragrance
	var b, c Fragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchFragranceDBTypes, false, strmangle.SetComplement(recipeBatchFragrancePrimaryKeyColumns, recipeBatchFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fragranceDBTypes, false, strmangle.SetComplement(fragrancePrimaryKeyColumns, fragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Fragrance{&b, &c} {
		err = a.SetFragrance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Fragrance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeBatchFragrance != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FragranceID != x.ID {
			t.Error("foreign key was wrong value", a.FragranceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FragranceID))
		reflect.Indirect(reflect.ValueOf(&a.FragranceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FragranceID != x.ID {
			t.Error("foreign key was wrong value", a.FragranceID, x.ID)
		}
	}
}

func testRecipeBatchFragrancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchFragrancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchFragranceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchFragrancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatchFragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeBatchFragranceDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Weight`: `double precision`, `Cost`: `double precision`, `FragranceID`: `integer`, `BatchID`: `integer`}
	_                           = bytes.MinRead
)

func testRecipeBatchFragrancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeBatchFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeBatchFragranceAllColumns) == len(recipeBatchFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeBatchFragrancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeBatchFragranceAllColumns) == len(recipeBatchFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatchFragrance{}
	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchFragranceDBTypes, true, recipeBatchFragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeBatchFragranceAllColumns, recipeBatchFragrancePrimaryKeyColumns) {
		fields = recipeBatchFragranceAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeBatchFragranceAllColumns,
			recipeBatchFragrancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeBatchFragranceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeBatchFragrancesUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeBatchFragranceAllColumns) == len(recipeBatchFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeBatchFragrance{}
	if err = randomize.Struct(seed, &o, recipeBatchFragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatchFragrance: %s", err)
	}

	count, err := RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeBatchFragranceDBTypes, false, recipeBatchFragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatchFragrance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatchFragrance: %s", err)
	}

	count, err = RecipeBatchFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
