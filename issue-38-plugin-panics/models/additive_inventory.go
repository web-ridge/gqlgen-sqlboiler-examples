// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AdditiveInventory is an object representing the database table.
type AdditiveInventory struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	PurchaseDate time.Time `boil:"purchase_date" json:"purchase_date" toml:"purchase_date" yaml:"purchase_date"`
	ExpiryDate   time.Time `boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	Cost         float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Weight       float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	AdditiveID   int       `boil:"additive_id" json:"additive_id" toml:"additive_id" yaml:"additive_id"`
	SupplierID   int       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`

	R *additiveInventoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L additiveInventoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AdditiveInventoryColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	PurchaseDate string
	ExpiryDate   string
	Cost         string
	Weight       string
	AdditiveID   string
	SupplierID   string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	PurchaseDate: "purchase_date",
	ExpiryDate:   "expiry_date",
	Cost:         "cost",
	Weight:       "weight",
	AdditiveID:   "additive_id",
	SupplierID:   "supplier_id",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AdditiveInventoryWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	PurchaseDate whereHelpertime_Time
	ExpiryDate   whereHelpertime_Time
	Cost         whereHelperfloat64
	Weight       whereHelperfloat64
	AdditiveID   whereHelperint
	SupplierID   whereHelperint
}{
	ID:           whereHelperint{field: "\"additive_inventory\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"additive_inventory\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"additive_inventory\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"additive_inventory\".\"deleted_at\""},
	PurchaseDate: whereHelpertime_Time{field: "\"additive_inventory\".\"purchase_date\""},
	ExpiryDate:   whereHelpertime_Time{field: "\"additive_inventory\".\"expiry_date\""},
	Cost:         whereHelperfloat64{field: "\"additive_inventory\".\"cost\""},
	Weight:       whereHelperfloat64{field: "\"additive_inventory\".\"weight\""},
	AdditiveID:   whereHelperint{field: "\"additive_inventory\".\"additive_id\""},
	SupplierID:   whereHelperint{field: "\"additive_inventory\".\"supplier_id\""},
}

// AdditiveInventoryRels is where relationship names are stored.
var AdditiveInventoryRels = struct {
	Additive string
	Supplier string
}{
	Additive: "Additive",
	Supplier: "Supplier",
}

// additiveInventoryR is where relationships are stored.
type additiveInventoryR struct {
	Additive *Additive `boil:"Additive" json:"Additive" toml:"Additive" yaml:"Additive"`
	Supplier *Supplier `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
}

// NewStruct creates a new relationship struct
func (*additiveInventoryR) NewStruct() *additiveInventoryR {
	return &additiveInventoryR{}
}

// additiveInventoryL is where Load methods for each relationship are stored.
type additiveInventoryL struct{}

var (
	additiveInventoryAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "additive_id", "supplier_id"}
	additiveInventoryColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "additive_id", "supplier_id"}
	additiveInventoryColumnsWithDefault    = []string{"id"}
	additiveInventoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// AdditiveInventorySlice is an alias for a slice of pointers to AdditiveInventory.
	// This should generally be used opposed to []AdditiveInventory.
	AdditiveInventorySlice []*AdditiveInventory
	// AdditiveInventoryHook is the signature for custom AdditiveInventory hook methods
	AdditiveInventoryHook func(context.Context, boil.ContextExecutor, *AdditiveInventory) error

	additiveInventoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	additiveInventoryType                 = reflect.TypeOf(&AdditiveInventory{})
	additiveInventoryMapping              = queries.MakeStructMapping(additiveInventoryType)
	additiveInventoryPrimaryKeyMapping, _ = queries.BindMapping(additiveInventoryType, additiveInventoryMapping, additiveInventoryPrimaryKeyColumns)
	additiveInventoryInsertCacheMut       sync.RWMutex
	additiveInventoryInsertCache          = make(map[string]insertCache)
	additiveInventoryUpdateCacheMut       sync.RWMutex
	additiveInventoryUpdateCache          = make(map[string]updateCache)
	additiveInventoryUpsertCacheMut       sync.RWMutex
	additiveInventoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var additiveInventoryBeforeInsertHooks []AdditiveInventoryHook
var additiveInventoryBeforeUpdateHooks []AdditiveInventoryHook
var additiveInventoryBeforeDeleteHooks []AdditiveInventoryHook
var additiveInventoryBeforeUpsertHooks []AdditiveInventoryHook

var additiveInventoryAfterInsertHooks []AdditiveInventoryHook
var additiveInventoryAfterSelectHooks []AdditiveInventoryHook
var additiveInventoryAfterUpdateHooks []AdditiveInventoryHook
var additiveInventoryAfterDeleteHooks []AdditiveInventoryHook
var additiveInventoryAfterUpsertHooks []AdditiveInventoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AdditiveInventory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AdditiveInventory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AdditiveInventory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AdditiveInventory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AdditiveInventory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AdditiveInventory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AdditiveInventory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AdditiveInventory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AdditiveInventory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range additiveInventoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAdditiveInventoryHook registers your hook function for all future operations.
func AddAdditiveInventoryHook(hookPoint boil.HookPoint, additiveInventoryHook AdditiveInventoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		additiveInventoryBeforeInsertHooks = append(additiveInventoryBeforeInsertHooks, additiveInventoryHook)
	case boil.BeforeUpdateHook:
		additiveInventoryBeforeUpdateHooks = append(additiveInventoryBeforeUpdateHooks, additiveInventoryHook)
	case boil.BeforeDeleteHook:
		additiveInventoryBeforeDeleteHooks = append(additiveInventoryBeforeDeleteHooks, additiveInventoryHook)
	case boil.BeforeUpsertHook:
		additiveInventoryBeforeUpsertHooks = append(additiveInventoryBeforeUpsertHooks, additiveInventoryHook)
	case boil.AfterInsertHook:
		additiveInventoryAfterInsertHooks = append(additiveInventoryAfterInsertHooks, additiveInventoryHook)
	case boil.AfterSelectHook:
		additiveInventoryAfterSelectHooks = append(additiveInventoryAfterSelectHooks, additiveInventoryHook)
	case boil.AfterUpdateHook:
		additiveInventoryAfterUpdateHooks = append(additiveInventoryAfterUpdateHooks, additiveInventoryHook)
	case boil.AfterDeleteHook:
		additiveInventoryAfterDeleteHooks = append(additiveInventoryAfterDeleteHooks, additiveInventoryHook)
	case boil.AfterUpsertHook:
		additiveInventoryAfterUpsertHooks = append(additiveInventoryAfterUpsertHooks, additiveInventoryHook)
	}
}

// One returns a single additiveInventory record from the query.
func (q additiveInventoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AdditiveInventory, error) {
	o := &AdditiveInventory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for additive_inventory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AdditiveInventory records from the query.
func (q additiveInventoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (AdditiveInventorySlice, error) {
	var o []*AdditiveInventory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AdditiveInventory slice")
	}

	if len(additiveInventoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AdditiveInventory records in the query.
func (q additiveInventoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count additive_inventory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q additiveInventoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if additive_inventory exists")
	}

	return count > 0, nil
}

// Additive pointed to by the foreign key.
func (o *AdditiveInventory) Additive(mods ...qm.QueryMod) additiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AdditiveID),
	}

	queryMods = append(queryMods, mods...)

	query := Additives(queryMods...)
	queries.SetFrom(query.Query, "\"additive\"")

	return query
}

// Supplier pointed to by the foreign key.
func (o *AdditiveInventory) Supplier(mods ...qm.QueryMod) supplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
	}

	queryMods = append(queryMods, mods...)

	query := Suppliers(queryMods...)
	queries.SetFrom(query.Query, "\"supplier\"")

	return query
}

// LoadAdditive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (additiveInventoryL) LoadAdditive(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdditiveInventory interface{}, mods queries.Applicator) error {
	var slice []*AdditiveInventory
	var object *AdditiveInventory

	if singular {
		object = maybeAdditiveInventory.(*AdditiveInventory)
	} else {
		slice = *maybeAdditiveInventory.(*[]*AdditiveInventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &additiveInventoryR{}
		}
		args = append(args, object.AdditiveID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &additiveInventoryR{}
			}

			for _, a := range args {
				if a == obj.AdditiveID {
					continue Outer
				}
			}

			args = append(args, obj.AdditiveID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`additive`),
		qm.WhereIn(`additive.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Additive")
	}

	var resultSlice []*Additive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Additive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for additive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for additive")
	}

	if len(additiveInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Additive = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AdditiveID == foreign.ID {
				local.R.Additive = foreign
				break
			}
		}
	}

	return nil
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (additiveInventoryL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAdditiveInventory interface{}, mods queries.Applicator) error {
	var slice []*AdditiveInventory
	var object *AdditiveInventory

	if singular {
		object = maybeAdditiveInventory.(*AdditiveInventory)
	} else {
		slice = *maybeAdditiveInventory.(*[]*AdditiveInventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &additiveInventoryR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &additiveInventoryR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`supplier`),
		qm.WhereIn(`supplier.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Supplier")
	}

	var resultSlice []*Supplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Supplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for supplier")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for supplier")
	}

	if len(additiveInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				break
			}
		}
	}

	return nil
}

// SetAdditive of the additiveInventory to the related item.
// Sets o.R.Additive to related.
// Adds o to related.R.AdditiveInventories.
func (o *AdditiveInventory) SetAdditive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Additive) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"additive_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"additive_id"}),
		strmangle.WhereClause("\"", "\"", 2, additiveInventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AdditiveID = related.ID
	if o.R == nil {
		o.R = &additiveInventoryR{
			Additive: related,
		}
	} else {
		o.R.Additive = related
	}

	if related.R == nil {
		related.R = &additiveR{
			AdditiveInventories: AdditiveInventorySlice{o},
		}
	} else {
		related.R.AdditiveInventories = append(related.R.AdditiveInventories, o)
	}

	return nil
}

// SetSupplier of the additiveInventory to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.AdditiveInventories.
func (o *AdditiveInventory) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Supplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"additive_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, additiveInventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &additiveInventoryR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &supplierR{
			AdditiveInventories: AdditiveInventorySlice{o},
		}
	} else {
		related.R.AdditiveInventories = append(related.R.AdditiveInventories, o)
	}

	return nil
}

// AdditiveInventories retrieves all the records using an executor.
func AdditiveInventories(mods ...qm.QueryMod) additiveInventoryQuery {
	mods = append(mods, qm.From("\"additive_inventory\""))
	return additiveInventoryQuery{NewQuery(mods...)}
}

// FindAdditiveInventory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAdditiveInventory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AdditiveInventory, error) {
	additiveInventoryObj := &AdditiveInventory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"additive_inventory\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, additiveInventoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from additive_inventory")
	}

	return additiveInventoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AdditiveInventory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no additive_inventory provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(additiveInventoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	additiveInventoryInsertCacheMut.RLock()
	cache, cached := additiveInventoryInsertCache[key]
	additiveInventoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			additiveInventoryAllColumns,
			additiveInventoryColumnsWithDefault,
			additiveInventoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(additiveInventoryType, additiveInventoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(additiveInventoryType, additiveInventoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"additive_inventory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"additive_inventory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into additive_inventory")
	}

	if !cached {
		additiveInventoryInsertCacheMut.Lock()
		additiveInventoryInsertCache[key] = cache
		additiveInventoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AdditiveInventory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AdditiveInventory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	additiveInventoryUpdateCacheMut.RLock()
	cache, cached := additiveInventoryUpdateCache[key]
	additiveInventoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			additiveInventoryAllColumns,
			additiveInventoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update additive_inventory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"additive_inventory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, additiveInventoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(additiveInventoryType, additiveInventoryMapping, append(wl, additiveInventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update additive_inventory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for additive_inventory")
	}

	if !cached {
		additiveInventoryUpdateCacheMut.Lock()
		additiveInventoryUpdateCache[key] = cache
		additiveInventoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q additiveInventoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for additive_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for additive_inventory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AdditiveInventorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), additiveInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"additive_inventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, additiveInventoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in additiveInventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all additiveInventory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AdditiveInventory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no additive_inventory provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(additiveInventoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	additiveInventoryUpsertCacheMut.RLock()
	cache, cached := additiveInventoryUpsertCache[key]
	additiveInventoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			additiveInventoryAllColumns,
			additiveInventoryColumnsWithDefault,
			additiveInventoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			additiveInventoryAllColumns,
			additiveInventoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert additive_inventory, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(additiveInventoryPrimaryKeyColumns))
			copy(conflict, additiveInventoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"additive_inventory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(additiveInventoryType, additiveInventoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(additiveInventoryType, additiveInventoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert additive_inventory")
	}

	if !cached {
		additiveInventoryUpsertCacheMut.Lock()
		additiveInventoryUpsertCache[key] = cache
		additiveInventoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AdditiveInventory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AdditiveInventory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AdditiveInventory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), additiveInventoryPrimaryKeyMapping)
	sql := "DELETE FROM \"additive_inventory\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from additive_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for additive_inventory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q additiveInventoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no additiveInventoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from additive_inventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for additive_inventory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AdditiveInventorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(additiveInventoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), additiveInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"additive_inventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, additiveInventoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from additiveInventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for additive_inventory")
	}

	if len(additiveInventoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AdditiveInventory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAdditiveInventory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AdditiveInventorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AdditiveInventorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), additiveInventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"additive_inventory\".* FROM \"additive_inventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, additiveInventoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AdditiveInventorySlice")
	}

	*o = slice

	return nil
}

// AdditiveInventoryExists checks if the AdditiveInventory row exists.
func AdditiveInventoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"additive_inventory\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if additive_inventory exists")
	}

	return exists, nil
}
