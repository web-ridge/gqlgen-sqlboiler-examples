// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAuthGroups(t *testing.T) {
	t.Parallel()

	query := AuthGroups()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthGroupsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthGroupsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AuthGroups().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthGroupsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthGroupSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthGroupsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AuthGroupExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AuthGroup exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthGroupExists to return true, but got false.")
	}
}

func testAuthGroupsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	authGroupFound, err := FindAuthGroup(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if authGroupFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthGroupsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AuthGroups().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAuthGroupsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AuthGroups().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthGroupsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	authGroupOne := &AuthGroup{}
	authGroupTwo := &AuthGroup{}
	if err = randomize.Struct(seed, authGroupOne, authGroupDBTypes, false, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, authGroupTwo, authGroupDBTypes, false, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthGroupsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authGroupOne := &AuthGroup{}
	authGroupTwo := &AuthGroup{}
	if err = randomize.Struct(seed, authGroupOne, authGroupDBTypes, false, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}
	if err = randomize.Struct(seed, authGroupTwo, authGroupDBTypes, false, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = authGroupOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = authGroupTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authGroupBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func authGroupAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AuthGroup) error {
	*o = AuthGroup{}
	return nil
}

func testAuthGroupsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AuthGroup{}
	o := &AuthGroup{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, authGroupDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AuthGroup object: %s", err)
	}

	AddAuthGroupHook(boil.BeforeInsertHook, authGroupBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	authGroupBeforeInsertHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.AfterInsertHook, authGroupAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	authGroupAfterInsertHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.AfterSelectHook, authGroupAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	authGroupAfterSelectHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.BeforeUpdateHook, authGroupBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	authGroupBeforeUpdateHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.AfterUpdateHook, authGroupAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	authGroupAfterUpdateHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.BeforeDeleteHook, authGroupBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	authGroupBeforeDeleteHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.AfterDeleteHook, authGroupAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	authGroupAfterDeleteHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.BeforeUpsertHook, authGroupBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	authGroupBeforeUpsertHooks = []AuthGroupHook{}

	AddAuthGroupHook(boil.AfterUpsertHook, authGroupAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	authGroupAfterUpsertHooks = []AuthGroupHook{}
}

func testAuthGroupsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthGroupsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(authGroupColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthGroupToManyGroupAuthGroupPermissions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AuthGroup
	var b, c AuthGroupPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authGroupPermissionDBTypes, false, authGroupPermissionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GroupID = a.ID
	c.GroupID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GroupAuthGroupPermissions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GroupID == b.GroupID {
			bFound = true
		}
		if v.GroupID == c.GroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AuthGroupSlice{&a}
	if err = a.L.LoadGroupAuthGroupPermissions(ctx, tx, false, (*[]*AuthGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GroupAuthGroupPermissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GroupAuthGroupPermissions = nil
	if err = a.L.LoadGroupAuthGroupPermissions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GroupAuthGroupPermissions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAuthGroupToManyGroupAuthUserGroups(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AuthGroup
	var b, c AuthUserGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authUserGroupDBTypes, false, authUserGroupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GroupID = a.ID
	c.GroupID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GroupAuthUserGroups().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GroupID == b.GroupID {
			bFound = true
		}
		if v.GroupID == c.GroupID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AuthGroupSlice{&a}
	if err = a.L.LoadGroupAuthUserGroups(ctx, tx, false, (*[]*AuthGroup)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GroupAuthUserGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GroupAuthUserGroups = nil
	if err = a.L.LoadGroupAuthUserGroups(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GroupAuthUserGroups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAuthGroupToManyAddOpGroupAuthGroupPermissions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AuthGroup
	var b, c, d, e AuthGroupPermission

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authGroupDBTypes, false, strmangle.SetComplement(authGroupPrimaryKeyColumns, authGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuthGroupPermission{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authGroupPermissionDBTypes, false, strmangle.SetComplement(authGroupPermissionPrimaryKeyColumns, authGroupPermissionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AuthGroupPermission{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGroupAuthGroupPermissions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GroupID {
			t.Error("foreign key was wrong value", a.ID, first.GroupID)
		}
		if a.ID != second.GroupID {
			t.Error("foreign key was wrong value", a.ID, second.GroupID)
		}

		if first.R.Group != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Group != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GroupAuthGroupPermissions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GroupAuthGroupPermissions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GroupAuthGroupPermissions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAuthGroupToManyAddOpGroupAuthUserGroups(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AuthGroup
	var b, c, d, e AuthUserGroup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, authGroupDBTypes, false, strmangle.SetComplement(authGroupPrimaryKeyColumns, authGroupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AuthUserGroup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authUserGroupDBTypes, false, strmangle.SetComplement(authUserGroupPrimaryKeyColumns, authUserGroupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AuthUserGroup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGroupAuthUserGroups(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GroupID {
			t.Error("foreign key was wrong value", a.ID, first.GroupID)
		}
		if a.ID != second.GroupID {
			t.Error("foreign key was wrong value", a.ID, second.GroupID)
		}

		if first.R.Group != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Group != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GroupAuthUserGroups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GroupAuthUserGroups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GroupAuthUserGroups().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAuthGroupsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthGroupsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AuthGroupSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAuthGroupsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AuthGroups().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authGroupDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`}
	_                = bytes.MinRead
)

func testAuthGroupsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(authGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(authGroupAllColumns) == len(authGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAuthGroupsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authGroupAllColumns) == len(authGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AuthGroup{}
	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, authGroupDBTypes, true, authGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authGroupAllColumns, authGroupPrimaryKeyColumns) {
		fields = authGroupAllColumns
	} else {
		fields = strmangle.SetComplement(
			authGroupAllColumns,
			authGroupPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AuthGroupSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAuthGroupsUpsert(t *testing.T) {
	t.Parallel()

	if len(authGroupAllColumns) == len(authGroupPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AuthGroup{}
	if err = randomize.Struct(seed, &o, authGroupDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthGroup: %s", err)
	}

	count, err := AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, authGroupDBTypes, false, authGroupPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AuthGroup struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AuthGroup: %s", err)
	}

	count, err = AuthGroups().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
