// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Fragrance is an object representing the database table.
type Fragrance struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Note      string    `boil:"note" json:"note" toml:"note" yaml:"note"`

	R *fragranceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fragranceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FragranceColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Name      string
	Note      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Name:      "name",
	Note:      "note",
}

// Generated where

var FragranceWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Name      whereHelperstring
	Note      whereHelperstring
}{
	ID:        whereHelperint{field: "\"fragrance\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"fragrance\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"fragrance\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"fragrance\".\"deleted_at\""},
	Name:      whereHelperstring{field: "\"fragrance\".\"name\""},
	Note:      whereHelperstring{field: "\"fragrance\".\"note\""},
}

// FragranceRels is where relationship names are stored.
var FragranceRels = struct {
	RecipeBatchFragrance string
	RecipeFragrance      string
	FragranceInventories string
}{
	RecipeBatchFragrance: "RecipeBatchFragrance",
	RecipeFragrance:      "RecipeFragrance",
	FragranceInventories: "FragranceInventories",
}

// fragranceR is where relationships are stored.
type fragranceR struct {
	RecipeBatchFragrance *RecipeBatchFragrance   `boil:"RecipeBatchFragrance" json:"RecipeBatchFragrance" toml:"RecipeBatchFragrance" yaml:"RecipeBatchFragrance"`
	RecipeFragrance      *RecipeFragrance        `boil:"RecipeFragrance" json:"RecipeFragrance" toml:"RecipeFragrance" yaml:"RecipeFragrance"`
	FragranceInventories FragranceInventorySlice `boil:"FragranceInventories" json:"FragranceInventories" toml:"FragranceInventories" yaml:"FragranceInventories"`
}

// NewStruct creates a new relationship struct
func (*fragranceR) NewStruct() *fragranceR {
	return &fragranceR{}
}

// fragranceL is where Load methods for each relationship are stored.
type fragranceL struct{}

var (
	fragranceAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "note"}
	fragranceColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "note"}
	fragranceColumnsWithDefault    = []string{"id"}
	fragrancePrimaryKeyColumns     = []string{"id"}
)

type (
	// FragranceSlice is an alias for a slice of pointers to Fragrance.
	// This should generally be used opposed to []Fragrance.
	FragranceSlice []*Fragrance
	// FragranceHook is the signature for custom Fragrance hook methods
	FragranceHook func(context.Context, boil.ContextExecutor, *Fragrance) error

	fragranceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fragranceType                 = reflect.TypeOf(&Fragrance{})
	fragranceMapping              = queries.MakeStructMapping(fragranceType)
	fragrancePrimaryKeyMapping, _ = queries.BindMapping(fragranceType, fragranceMapping, fragrancePrimaryKeyColumns)
	fragranceInsertCacheMut       sync.RWMutex
	fragranceInsertCache          = make(map[string]insertCache)
	fragranceUpdateCacheMut       sync.RWMutex
	fragranceUpdateCache          = make(map[string]updateCache)
	fragranceUpsertCacheMut       sync.RWMutex
	fragranceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fragranceBeforeInsertHooks []FragranceHook
var fragranceBeforeUpdateHooks []FragranceHook
var fragranceBeforeDeleteHooks []FragranceHook
var fragranceBeforeUpsertHooks []FragranceHook

var fragranceAfterInsertHooks []FragranceHook
var fragranceAfterSelectHooks []FragranceHook
var fragranceAfterUpdateHooks []FragranceHook
var fragranceAfterDeleteHooks []FragranceHook
var fragranceAfterUpsertHooks []FragranceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Fragrance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Fragrance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Fragrance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Fragrance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Fragrance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Fragrance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Fragrance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Fragrance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Fragrance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fragranceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFragranceHook registers your hook function for all future operations.
func AddFragranceHook(hookPoint boil.HookPoint, fragranceHook FragranceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		fragranceBeforeInsertHooks = append(fragranceBeforeInsertHooks, fragranceHook)
	case boil.BeforeUpdateHook:
		fragranceBeforeUpdateHooks = append(fragranceBeforeUpdateHooks, fragranceHook)
	case boil.BeforeDeleteHook:
		fragranceBeforeDeleteHooks = append(fragranceBeforeDeleteHooks, fragranceHook)
	case boil.BeforeUpsertHook:
		fragranceBeforeUpsertHooks = append(fragranceBeforeUpsertHooks, fragranceHook)
	case boil.AfterInsertHook:
		fragranceAfterInsertHooks = append(fragranceAfterInsertHooks, fragranceHook)
	case boil.AfterSelectHook:
		fragranceAfterSelectHooks = append(fragranceAfterSelectHooks, fragranceHook)
	case boil.AfterUpdateHook:
		fragranceAfterUpdateHooks = append(fragranceAfterUpdateHooks, fragranceHook)
	case boil.AfterDeleteHook:
		fragranceAfterDeleteHooks = append(fragranceAfterDeleteHooks, fragranceHook)
	case boil.AfterUpsertHook:
		fragranceAfterUpsertHooks = append(fragranceAfterUpsertHooks, fragranceHook)
	}
}

// One returns a single fragrance record from the query.
func (q fragranceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Fragrance, error) {
	o := &Fragrance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for fragrance")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Fragrance records from the query.
func (q fragranceQuery) All(ctx context.Context, exec boil.ContextExecutor) (FragranceSlice, error) {
	var o []*Fragrance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Fragrance slice")
	}

	if len(fragranceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Fragrance records in the query.
func (q fragranceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count fragrance rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fragranceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if fragrance exists")
	}

	return count > 0, nil
}

// RecipeBatchFragrance pointed to by the foreign key.
func (o *Fragrance) RecipeBatchFragrance(mods ...qm.QueryMod) recipeBatchFragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fragrance_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeBatchFragrances(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_fragrance\"")

	return query
}

// RecipeFragrance pointed to by the foreign key.
func (o *Fragrance) RecipeFragrance(mods ...qm.QueryMod) recipeFragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"fragrance_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeFragrances(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_fragrance\"")

	return query
}

// FragranceInventories retrieves all the fragrance_inventory's FragranceInventories with an executor.
func (o *Fragrance) FragranceInventories(mods ...qm.QueryMod) fragranceInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fragrance_inventory\".\"fragrance_id\"=?", o.ID),
	)

	query := FragranceInventories(queryMods...)
	queries.SetFrom(query.Query, "\"fragrance_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"fragrance_inventory\".*"})
	}

	return query
}

// LoadRecipeBatchFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (fragranceL) LoadRecipeBatchFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFragrance interface{}, mods queries.Applicator) error {
	var slice []*Fragrance
	var object *Fragrance

	if singular {
		object = maybeFragrance.(*Fragrance)
	} else {
		slice = *maybeFragrance.(*[]*Fragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fragranceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fragranceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_fragrance`),
		qm.WhereIn(`recipe_batch_fragrance.fragrance_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeBatchFragrance")
	}

	var resultSlice []*RecipeBatchFragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeBatchFragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_batch_fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_fragrance")
	}

	if len(fragranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RecipeBatchFragrance = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.FragranceID {
				local.R.RecipeBatchFragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadRecipeFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (fragranceL) LoadRecipeFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFragrance interface{}, mods queries.Applicator) error {
	var slice []*Fragrance
	var object *Fragrance

	if singular {
		object = maybeFragrance.(*Fragrance)
	} else {
		slice = *maybeFragrance.(*[]*Fragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fragranceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fragranceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_fragrance`),
		qm.WhereIn(`recipe_fragrance.fragrance_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeFragrance")
	}

	var resultSlice []*RecipeFragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeFragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_fragrance")
	}

	if len(fragranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RecipeFragrance = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.FragranceID {
				local.R.RecipeFragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadFragranceInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (fragranceL) LoadFragranceInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFragrance interface{}, mods queries.Applicator) error {
	var slice []*Fragrance
	var object *Fragrance

	if singular {
		object = maybeFragrance.(*Fragrance)
	} else {
		slice = *maybeFragrance.(*[]*Fragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fragranceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fragranceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fragrance_inventory`),
		qm.WhereIn(`fragrance_inventory.fragrance_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fragrance_inventory")
	}

	var resultSlice []*FragranceInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fragrance_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fragrance_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fragrance_inventory")
	}

	if len(fragranceInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FragranceInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FragranceID {
				local.R.FragranceInventories = append(local.R.FragranceInventories, foreign)
				break
			}
		}
	}

	return nil
}

// SetRecipeBatchFragrance of the fragrance to the related item.
// Sets o.R.RecipeBatchFragrance to related.
// Adds o to related.R.Fragrance.
func (o *Fragrance) SetRecipeBatchFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeBatchFragrance) error {
	var err error

	if insert {
		related.FragranceID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"recipe_batch_fragrance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
			strmangle.WhereClause("\"", "\"", 2, recipeBatchFragrancePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.FragranceID = o.ID

	}

	if o.R == nil {
		o.R = &fragranceR{
			RecipeBatchFragrance: related,
		}
	} else {
		o.R.RecipeBatchFragrance = related
	}

	if related.R == nil {
		related.R = &recipeBatchFragranceR{
			Fragrance: o,
		}
	} else {
		related.R.Fragrance = o
	}
	return nil
}

// SetRecipeFragrance of the fragrance to the related item.
// Sets o.R.RecipeFragrance to related.
// Adds o to related.R.Fragrance.
func (o *Fragrance) SetRecipeFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeFragrance) error {
	var err error

	if insert {
		related.FragranceID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"recipe_fragrance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
			strmangle.WhereClause("\"", "\"", 2, recipeFragrancePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.FragranceID = o.ID

	}

	if o.R == nil {
		o.R = &fragranceR{
			RecipeFragrance: related,
		}
	} else {
		o.R.RecipeFragrance = related
	}

	if related.R == nil {
		related.R = &recipeFragranceR{
			Fragrance: o,
		}
	} else {
		related.R.Fragrance = o
	}
	return nil
}

// AddFragranceInventories adds the given related objects to the existing relationships
// of the fragrance, optionally inserting them as new records.
// Appends related to o.R.FragranceInventories.
// Sets related.R.Fragrance appropriately.
func (o *Fragrance) AddFragranceInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FragranceInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FragranceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fragrance_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
				strmangle.WhereClause("\"", "\"", 2, fragranceInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FragranceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &fragranceR{
			FragranceInventories: related,
		}
	} else {
		o.R.FragranceInventories = append(o.R.FragranceInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fragranceInventoryR{
				Fragrance: o,
			}
		} else {
			rel.R.Fragrance = o
		}
	}
	return nil
}

// Fragrances retrieves all the records using an executor.
func Fragrances(mods ...qm.QueryMod) fragranceQuery {
	mods = append(mods, qm.From("\"fragrance\""))
	return fragranceQuery{NewQuery(mods...)}
}

// FindFragrance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFragrance(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Fragrance, error) {
	fragranceObj := &Fragrance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fragrance\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fragranceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from fragrance")
	}

	return fragranceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Fragrance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fragrance provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fragranceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fragranceInsertCacheMut.RLock()
	cache, cached := fragranceInsertCache[key]
	fragranceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fragranceAllColumns,
			fragranceColumnsWithDefault,
			fragranceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fragranceType, fragranceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fragranceType, fragranceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fragrance\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fragrance\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into fragrance")
	}

	if !cached {
		fragranceInsertCacheMut.Lock()
		fragranceInsertCache[key] = cache
		fragranceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Fragrance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Fragrance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fragranceUpdateCacheMut.RLock()
	cache, cached := fragranceUpdateCache[key]
	fragranceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fragranceAllColumns,
			fragrancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update fragrance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fragrance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fragrancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fragranceType, fragranceMapping, append(wl, fragrancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update fragrance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for fragrance")
	}

	if !cached {
		fragranceUpdateCacheMut.Lock()
		fragranceUpdateCache[key] = cache
		fragranceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q fragranceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for fragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for fragrance")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FragranceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fragrance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fragrancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in fragrance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all fragrance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Fragrance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no fragrance provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fragranceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fragranceUpsertCacheMut.RLock()
	cache, cached := fragranceUpsertCache[key]
	fragranceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fragranceAllColumns,
			fragranceColumnsWithDefault,
			fragranceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			fragranceAllColumns,
			fragrancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert fragrance, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fragrancePrimaryKeyColumns))
			copy(conflict, fragrancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fragrance\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fragranceType, fragranceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fragranceType, fragranceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert fragrance")
	}

	if !cached {
		fragranceUpsertCacheMut.Lock()
		fragranceUpsertCache[key] = cache
		fragranceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Fragrance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Fragrance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Fragrance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fragrancePrimaryKeyMapping)
	sql := "DELETE FROM \"fragrance\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from fragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for fragrance")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fragranceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no fragranceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fragrance")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FragranceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fragranceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fragrance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fragrancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from fragrance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for fragrance")
	}

	if len(fragranceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Fragrance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFragrance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FragranceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FragranceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fragrance\".* FROM \"fragrance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fragrancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FragranceSlice")
	}

	*o = slice

	return nil
}

// FragranceExists checks if the Fragrance row exists.
func FragranceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fragrance\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if fragrance exists")
	}

	return exists, nil
}
