// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_models

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	boilergql "github.com/web-ridge/utils-go/boilergql/v3"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	IsAuthenticated func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Additive struct {
		AdditiveInventories func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		DeletedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		Name                func(childComplexity int) int
		Note                func(childComplexity int) int
		RecipeAdditive      func(childComplexity int) int
		RecipeBatchAdditive func(childComplexity int) int
		UpdatedAt           func(childComplexity int) int
	}

	AdditiveConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AdditiveDeletePayload struct {
		ID func(childComplexity int) int
	}

	AdditiveEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AdditiveInventoriesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AdditiveInventoriesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AdditiveInventory struct {
		Additive     func(childComplexity int) int
		Cost         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		PurchaseDate func(childComplexity int) int
		Supplier     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Weight       func(childComplexity int) int
	}

	AdditiveInventoryConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AdditiveInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	AdditiveInventoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AdditiveInventoryPayload struct {
		AdditiveInventory func(childComplexity int) int
	}

	AdditivePayload struct {
		Additive func(childComplexity int) int
	}

	AdditivesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AdditivesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AuthGroup struct {
		GroupAuthGroupPermissions func(childComplexity int) int
		GroupAuthUserGroups       func(childComplexity int) int
		ID                        func(childComplexity int) int
		Name                      func(childComplexity int) int
	}

	AuthGroupConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AuthGroupDeletePayload struct {
		ID func(childComplexity int) int
	}

	AuthGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthGroupPayload struct {
		AuthGroup func(childComplexity int) int
	}

	AuthGroupPermission struct {
		Group      func(childComplexity int) int
		ID         func(childComplexity int) int
		Permission func(childComplexity int) int
	}

	AuthGroupPermissionConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AuthGroupPermissionDeletePayload struct {
		ID func(childComplexity int) int
	}

	AuthGroupPermissionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthGroupPermissionPayload struct {
		AuthGroupPermission func(childComplexity int) int
	}

	AuthGroupPermissionsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AuthGroupPermissionsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AuthGroupsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AuthGroupsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AuthPermission struct {
		Codename                          func(childComplexity int) int
		ContentTypeID                     func(childComplexity int) int
		ID                                func(childComplexity int) int
		Name                              func(childComplexity int) int
		PermissionAuthGroupPermissions    func(childComplexity int) int
		PermissionAuthUserUserPermissions func(childComplexity int) int
	}

	AuthPermissionConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AuthPermissionDeletePayload struct {
		ID func(childComplexity int) int
	}

	AuthPermissionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthPermissionPayload struct {
		AuthPermission func(childComplexity int) int
	}

	AuthPermissionsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AuthPermissionsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AuthUser struct {
		DateJoined                  func(childComplexity int) int
		Email                       func(childComplexity int) int
		FirstName                   func(childComplexity int) int
		ID                          func(childComplexity int) int
		IsActive                    func(childComplexity int) int
		IsStaff                     func(childComplexity int) int
		IsSuperuser                 func(childComplexity int) int
		LastLogin                   func(childComplexity int) int
		LastName                    func(childComplexity int) int
		Password                    func(childComplexity int) int
		UserAuthUserGroups          func(childComplexity int) int
		UserAuthUserUserPermissions func(childComplexity int) int
		Username                    func(childComplexity int) int
	}

	AuthUserConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AuthUserDeletePayload struct {
		ID func(childComplexity int) int
	}

	AuthUserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthUserGroup struct {
		Group func(childComplexity int) int
		ID    func(childComplexity int) int
		User  func(childComplexity int) int
	}

	AuthUserGroupConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AuthUserGroupDeletePayload struct {
		ID func(childComplexity int) int
	}

	AuthUserGroupEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthUserGroupPayload struct {
		AuthUserGroup func(childComplexity int) int
	}

	AuthUserGroupsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AuthUserGroupsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AuthUserPayload struct {
		AuthUser func(childComplexity int) int
	}

	AuthUserUserPermission struct {
		ID         func(childComplexity int) int
		Permission func(childComplexity int) int
		User       func(childComplexity int) int
	}

	AuthUserUserPermissionConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	AuthUserUserPermissionDeletePayload struct {
		ID func(childComplexity int) int
	}

	AuthUserUserPermissionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	AuthUserUserPermissionPayload struct {
		AuthUserUserPermission func(childComplexity int) int
	}

	AuthUserUserPermissionsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AuthUserUserPermissionsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	AuthUsersDeletePayload struct {
		Ids func(childComplexity int) int
	}

	AuthUsersUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Fragrance struct {
		CreatedAt            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		FragranceInventories func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Note                 func(childComplexity int) int
		RecipeBatchFragrance func(childComplexity int) int
		RecipeFragrance      func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	FragranceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FragranceDeletePayload struct {
		ID func(childComplexity int) int
	}

	FragranceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FragranceInventoriesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	FragranceInventoriesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	FragranceInventory struct {
		Cost         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		Fragrance    func(childComplexity int) int
		ID           func(childComplexity int) int
		PurchaseDate func(childComplexity int) int
		Supplier     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Weight       func(childComplexity int) int
	}

	FragranceInventoryConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FragranceInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	FragranceInventoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FragranceInventoryPayload struct {
		FragranceInventory func(childComplexity int) int
	}

	FragrancePayload struct {
		Fragrance func(childComplexity int) int
	}

	FragrancesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	FragrancesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Lipid struct {
		Bubbly           func(childComplexity int) int
		Cleansing        func(childComplexity int) int
		Conditioning     func(childComplexity int) int
		Creamy           func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Family           func(childComplexity int) int
		Hardness         func(childComplexity int) int
		ID               func(childComplexity int) int
		InciName         func(childComplexity int) int
		Ins              func(childComplexity int) int
		Iodine           func(childComplexity int) int
		Lauric           func(childComplexity int) int
		Linoleic         func(childComplexity int) int
		Linolenic        func(childComplexity int) int
		LipidInventories func(childComplexity int) int
		Myristic         func(childComplexity int) int
		Name             func(childComplexity int) int
		Naoh             func(childComplexity int) int
		Oleic            func(childComplexity int) int
		Palmitic         func(childComplexity int) int
		RecipeBatchLipid func(childComplexity int) int
		RecipeLipid      func(childComplexity int) int
		Ricinoleic       func(childComplexity int) int
		Stearic          func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	LipidConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LipidDeletePayload struct {
		ID func(childComplexity int) int
	}

	LipidEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LipidInventoriesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	LipidInventoriesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	LipidInventory struct {
		Cost          func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		ExpiryDate    func(childComplexity int) int
		GramsPerLiter func(childComplexity int) int
		ID            func(childComplexity int) int
		Koh           func(childComplexity int) int
		Lipid         func(childComplexity int) int
		Naoh          func(childComplexity int) int
		PurchaseDate  func(childComplexity int) int
		Sap           func(childComplexity int) int
		Supplier      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	LipidInventoryConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LipidInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	LipidInventoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LipidInventoryPayload struct {
		LipidInventory func(childComplexity int) int
	}

	LipidPayload struct {
		Lipid func(childComplexity int) int
	}

	LipidsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	LipidsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Lye struct {
		CreatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Kind           func(childComplexity int) int
		LyeInventories func(childComplexity int) int
		Name           func(childComplexity int) int
		Note           func(childComplexity int) int
		RecipeBatchLye func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}

	LyeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LyeDeletePayload struct {
		ID func(childComplexity int) int
	}

	LyeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LyeInventoriesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	LyeInventoriesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	LyeInventory struct {
		Concentration func(childComplexity int) int
		Cost          func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		ExpiryDate    func(childComplexity int) int
		ID            func(childComplexity int) int
		Lye           func(childComplexity int) int
		PurchaseDate  func(childComplexity int) int
		Supplier      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	LyeInventoryConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LyeInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	LyeInventoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LyeInventoryPayload struct {
		LyeInventory func(childComplexity int) int
	}

	LyePayload struct {
		Lye func(childComplexity int) int
	}

	LyesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	LyesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Mutation struct {
		CreateAdditive                func(childComplexity int, input AdditiveCreateInput) int
		CreateAdditiveInventory       func(childComplexity int, input AdditiveInventoryCreateInput) int
		CreateAuthGroup               func(childComplexity int, input AuthGroupCreateInput) int
		CreateAuthGroupPermission     func(childComplexity int, input AuthGroupPermissionCreateInput) int
		CreateAuthPermission          func(childComplexity int, input AuthPermissionCreateInput) int
		CreateAuthUser                func(childComplexity int, input AuthUserCreateInput) int
		CreateAuthUserGroup           func(childComplexity int, input AuthUserGroupCreateInput) int
		CreateAuthUserUserPermission  func(childComplexity int, input AuthUserUserPermissionCreateInput) int
		CreateFragrance               func(childComplexity int, input FragranceCreateInput) int
		CreateFragranceInventory      func(childComplexity int, input FragranceInventoryCreateInput) int
		CreateLipid                   func(childComplexity int, input LipidCreateInput) int
		CreateLipidInventory          func(childComplexity int, input LipidInventoryCreateInput) int
		CreateLye                     func(childComplexity int, input LyeCreateInput) int
		CreateLyeInventory            func(childComplexity int, input LyeInventoryCreateInput) int
		CreateRecipe                  func(childComplexity int, input RecipeCreateInput) int
		CreateRecipeAdditive          func(childComplexity int, input RecipeAdditiveCreateInput) int
		CreateRecipeBatch             func(childComplexity int, input RecipeBatchCreateInput) int
		CreateRecipeBatchAdditive     func(childComplexity int, input RecipeBatchAdditiveCreateInput) int
		CreateRecipeBatchFragrance    func(childComplexity int, input RecipeBatchFragranceCreateInput) int
		CreateRecipeBatchLipid        func(childComplexity int, input RecipeBatchLipidCreateInput) int
		CreateRecipeBatchLye          func(childComplexity int, input RecipeBatchLyeCreateInput) int
		CreateRecipeBatchNote         func(childComplexity int, input RecipeBatchNoteCreateInput) int
		CreateRecipeFragrance         func(childComplexity int, input RecipeFragranceCreateInput) int
		CreateRecipeLipid             func(childComplexity int, input RecipeLipidCreateInput) int
		CreateRecipeStep              func(childComplexity int, input RecipeStepCreateInput) int
		CreateSupplier                func(childComplexity int, input SupplierCreateInput) int
		DeleteAdditive                func(childComplexity int, id string) int
		DeleteAdditiveInventories     func(childComplexity int, filter *AdditiveInventoryFilter) int
		DeleteAdditiveInventory       func(childComplexity int, id string) int
		DeleteAdditives               func(childComplexity int, filter *AdditiveFilter) int
		DeleteAuthGroup               func(childComplexity int, id string) int
		DeleteAuthGroupPermission     func(childComplexity int, id string) int
		DeleteAuthGroupPermissions    func(childComplexity int, filter *AuthGroupPermissionFilter) int
		DeleteAuthGroups              func(childComplexity int, filter *AuthGroupFilter) int
		DeleteAuthPermission          func(childComplexity int, id string) int
		DeleteAuthPermissions         func(childComplexity int, filter *AuthPermissionFilter) int
		DeleteAuthUser                func(childComplexity int, id string) int
		DeleteAuthUserGroup           func(childComplexity int, id string) int
		DeleteAuthUserGroups          func(childComplexity int, filter *AuthUserGroupFilter) int
		DeleteAuthUserUserPermission  func(childComplexity int, id string) int
		DeleteAuthUserUserPermissions func(childComplexity int, filter *AuthUserUserPermissionFilter) int
		DeleteAuthUsers               func(childComplexity int, filter *AuthUserFilter) int
		DeleteFragrance               func(childComplexity int, id string) int
		DeleteFragranceInventories    func(childComplexity int, filter *FragranceInventoryFilter) int
		DeleteFragranceInventory      func(childComplexity int, id string) int
		DeleteFragrances              func(childComplexity int, filter *FragranceFilter) int
		DeleteLipid                   func(childComplexity int, id string) int
		DeleteLipidInventories        func(childComplexity int, filter *LipidInventoryFilter) int
		DeleteLipidInventory          func(childComplexity int, id string) int
		DeleteLipids                  func(childComplexity int, filter *LipidFilter) int
		DeleteLye                     func(childComplexity int, id string) int
		DeleteLyeInventories          func(childComplexity int, filter *LyeInventoryFilter) int
		DeleteLyeInventory            func(childComplexity int, id string) int
		DeleteLyes                    func(childComplexity int, filter *LyeFilter) int
		DeleteRecipe                  func(childComplexity int, id string) int
		DeleteRecipeAdditive          func(childComplexity int, id string) int
		DeleteRecipeAdditives         func(childComplexity int, filter *RecipeAdditiveFilter) int
		DeleteRecipeBatch             func(childComplexity int, id string) int
		DeleteRecipeBatchAdditive     func(childComplexity int, id string) int
		DeleteRecipeBatchAdditives    func(childComplexity int, filter *RecipeBatchAdditiveFilter) int
		DeleteRecipeBatchFragrance    func(childComplexity int, id string) int
		DeleteRecipeBatchFragrances   func(childComplexity int, filter *RecipeBatchFragranceFilter) int
		DeleteRecipeBatchLipid        func(childComplexity int, id string) int
		DeleteRecipeBatchLipids       func(childComplexity int, filter *RecipeBatchLipidFilter) int
		DeleteRecipeBatchLye          func(childComplexity int, id string) int
		DeleteRecipeBatchLyes         func(childComplexity int, filter *RecipeBatchLyeFilter) int
		DeleteRecipeBatchNote         func(childComplexity int, id string) int
		DeleteRecipeBatchNotes        func(childComplexity int, filter *RecipeBatchNoteFilter) int
		DeleteRecipeBatches           func(childComplexity int, filter *RecipeBatchFilter) int
		DeleteRecipeFragrance         func(childComplexity int, id string) int
		DeleteRecipeFragrances        func(childComplexity int, filter *RecipeFragranceFilter) int
		DeleteRecipeLipid             func(childComplexity int, id string) int
		DeleteRecipeLipids            func(childComplexity int, filter *RecipeLipidFilter) int
		DeleteRecipeStep              func(childComplexity int, id string) int
		DeleteRecipeSteps             func(childComplexity int, filter *RecipeStepFilter) int
		DeleteRecipes                 func(childComplexity int, filter *RecipeFilter) int
		DeleteSupplier                func(childComplexity int, id string) int
		DeleteSuppliers               func(childComplexity int, filter *SupplierFilter) int
		UpdateAdditive                func(childComplexity int, id string, input AdditiveUpdateInput) int
		UpdateAdditiveInventories     func(childComplexity int, filter *AdditiveInventoryFilter, input AdditiveInventoryUpdateInput) int
		UpdateAdditiveInventory       func(childComplexity int, id string, input AdditiveInventoryUpdateInput) int
		UpdateAdditives               func(childComplexity int, filter *AdditiveFilter, input AdditiveUpdateInput) int
		UpdateAuthGroup               func(childComplexity int, id string, input AuthGroupUpdateInput) int
		UpdateAuthGroupPermission     func(childComplexity int, id string, input AuthGroupPermissionUpdateInput) int
		UpdateAuthGroupPermissions    func(childComplexity int, filter *AuthGroupPermissionFilter, input AuthGroupPermissionUpdateInput) int
		UpdateAuthGroups              func(childComplexity int, filter *AuthGroupFilter, input AuthGroupUpdateInput) int
		UpdateAuthPermission          func(childComplexity int, id string, input AuthPermissionUpdateInput) int
		UpdateAuthPermissions         func(childComplexity int, filter *AuthPermissionFilter, input AuthPermissionUpdateInput) int
		UpdateAuthUser                func(childComplexity int, id string, input AuthUserUpdateInput) int
		UpdateAuthUserGroup           func(childComplexity int, id string, input AuthUserGroupUpdateInput) int
		UpdateAuthUserGroups          func(childComplexity int, filter *AuthUserGroupFilter, input AuthUserGroupUpdateInput) int
		UpdateAuthUserUserPermission  func(childComplexity int, id string, input AuthUserUserPermissionUpdateInput) int
		UpdateAuthUserUserPermissions func(childComplexity int, filter *AuthUserUserPermissionFilter, input AuthUserUserPermissionUpdateInput) int
		UpdateAuthUsers               func(childComplexity int, filter *AuthUserFilter, input AuthUserUpdateInput) int
		UpdateFragrance               func(childComplexity int, id string, input FragranceUpdateInput) int
		UpdateFragranceInventories    func(childComplexity int, filter *FragranceInventoryFilter, input FragranceInventoryUpdateInput) int
		UpdateFragranceInventory      func(childComplexity int, id string, input FragranceInventoryUpdateInput) int
		UpdateFragrances              func(childComplexity int, filter *FragranceFilter, input FragranceUpdateInput) int
		UpdateLipid                   func(childComplexity int, id string, input LipidUpdateInput) int
		UpdateLipidInventories        func(childComplexity int, filter *LipidInventoryFilter, input LipidInventoryUpdateInput) int
		UpdateLipidInventory          func(childComplexity int, id string, input LipidInventoryUpdateInput) int
		UpdateLipids                  func(childComplexity int, filter *LipidFilter, input LipidUpdateInput) int
		UpdateLye                     func(childComplexity int, id string, input LyeUpdateInput) int
		UpdateLyeInventories          func(childComplexity int, filter *LyeInventoryFilter, input LyeInventoryUpdateInput) int
		UpdateLyeInventory            func(childComplexity int, id string, input LyeInventoryUpdateInput) int
		UpdateLyes                    func(childComplexity int, filter *LyeFilter, input LyeUpdateInput) int
		UpdateRecipe                  func(childComplexity int, id string, input RecipeUpdateInput) int
		UpdateRecipeAdditive          func(childComplexity int, id string, input RecipeAdditiveUpdateInput) int
		UpdateRecipeAdditives         func(childComplexity int, filter *RecipeAdditiveFilter, input RecipeAdditiveUpdateInput) int
		UpdateRecipeBatch             func(childComplexity int, id string, input RecipeBatchUpdateInput) int
		UpdateRecipeBatchAdditive     func(childComplexity int, id string, input RecipeBatchAdditiveUpdateInput) int
		UpdateRecipeBatchAdditives    func(childComplexity int, filter *RecipeBatchAdditiveFilter, input RecipeBatchAdditiveUpdateInput) int
		UpdateRecipeBatchFragrance    func(childComplexity int, id string, input RecipeBatchFragranceUpdateInput) int
		UpdateRecipeBatchFragrances   func(childComplexity int, filter *RecipeBatchFragranceFilter, input RecipeBatchFragranceUpdateInput) int
		UpdateRecipeBatchLipid        func(childComplexity int, id string, input RecipeBatchLipidUpdateInput) int
		UpdateRecipeBatchLipids       func(childComplexity int, filter *RecipeBatchLipidFilter, input RecipeBatchLipidUpdateInput) int
		UpdateRecipeBatchLye          func(childComplexity int, id string, input RecipeBatchLyeUpdateInput) int
		UpdateRecipeBatchLyes         func(childComplexity int, filter *RecipeBatchLyeFilter, input RecipeBatchLyeUpdateInput) int
		UpdateRecipeBatchNote         func(childComplexity int, id string, input RecipeBatchNoteUpdateInput) int
		UpdateRecipeBatchNotes        func(childComplexity int, filter *RecipeBatchNoteFilter, input RecipeBatchNoteUpdateInput) int
		UpdateRecipeBatches           func(childComplexity int, filter *RecipeBatchFilter, input RecipeBatchUpdateInput) int
		UpdateRecipeFragrance         func(childComplexity int, id string, input RecipeFragranceUpdateInput) int
		UpdateRecipeFragrances        func(childComplexity int, filter *RecipeFragranceFilter, input RecipeFragranceUpdateInput) int
		UpdateRecipeLipid             func(childComplexity int, id string, input RecipeLipidUpdateInput) int
		UpdateRecipeLipids            func(childComplexity int, filter *RecipeLipidFilter, input RecipeLipidUpdateInput) int
		UpdateRecipeStep              func(childComplexity int, id string, input RecipeStepUpdateInput) int
		UpdateRecipeSteps             func(childComplexity int, filter *RecipeStepFilter, input RecipeStepUpdateInput) int
		UpdateRecipes                 func(childComplexity int, filter *RecipeFilter, input RecipeUpdateInput) int
		UpdateSupplier                func(childComplexity int, id string, input SupplierUpdateInput) int
		UpdateSuppliers               func(childComplexity int, filter *SupplierFilter, input SupplierUpdateInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		Additive                func(childComplexity int, id string) int
		AdditiveInventories     func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AdditiveInventoryOrdering, filter *AdditiveInventoryFilter) int
		AdditiveInventory       func(childComplexity int, id string) int
		Additives               func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AdditiveOrdering, filter *AdditiveFilter) int
		AuthGroup               func(childComplexity int, id string) int
		AuthGroupPermission     func(childComplexity int, id string) int
		AuthGroupPermissions    func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AuthGroupPermissionOrdering, filter *AuthGroupPermissionFilter) int
		AuthGroups              func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AuthGroupOrdering, filter *AuthGroupFilter) int
		AuthPermission          func(childComplexity int, id string) int
		AuthPermissions         func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AuthPermissionOrdering, filter *AuthPermissionFilter) int
		AuthUser                func(childComplexity int, id string) int
		AuthUserGroup           func(childComplexity int, id string) int
		AuthUserGroups          func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AuthUserGroupOrdering, filter *AuthUserGroupFilter) int
		AuthUserUserPermission  func(childComplexity int, id string) int
		AuthUserUserPermissions func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AuthUserUserPermissionOrdering, filter *AuthUserUserPermissionFilter) int
		AuthUsers               func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*AuthUserOrdering, filter *AuthUserFilter) int
		Fragrance               func(childComplexity int, id string) int
		FragranceInventories    func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*FragranceInventoryOrdering, filter *FragranceInventoryFilter) int
		FragranceInventory      func(childComplexity int, id string) int
		Fragrances              func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*FragranceOrdering, filter *FragranceFilter) int
		Lipid                   func(childComplexity int, id string) int
		LipidInventories        func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*LipidInventoryOrdering, filter *LipidInventoryFilter) int
		LipidInventory          func(childComplexity int, id string) int
		Lipids                  func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*LipidOrdering, filter *LipidFilter) int
		Lye                     func(childComplexity int, id string) int
		LyeInventories          func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*LyeInventoryOrdering, filter *LyeInventoryFilter) int
		LyeInventory            func(childComplexity int, id string) int
		Lyes                    func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*LyeOrdering, filter *LyeFilter) int
		Node                    func(childComplexity int, id string) int
		Recipe                  func(childComplexity int, id string) int
		RecipeAdditive          func(childComplexity int, id string) int
		RecipeAdditives         func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeAdditiveOrdering, filter *RecipeAdditiveFilter) int
		RecipeBatch             func(childComplexity int, id string) int
		RecipeBatchAdditive     func(childComplexity int, id string) int
		RecipeBatchAdditives    func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchAdditiveOrdering, filter *RecipeBatchAdditiveFilter) int
		RecipeBatchFragrance    func(childComplexity int, id string) int
		RecipeBatchFragrances   func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchFragranceOrdering, filter *RecipeBatchFragranceFilter) int
		RecipeBatchLipid        func(childComplexity int, id string) int
		RecipeBatchLipids       func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchLipidOrdering, filter *RecipeBatchLipidFilter) int
		RecipeBatchLye          func(childComplexity int, id string) int
		RecipeBatchLyes         func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchLyeOrdering, filter *RecipeBatchLyeFilter) int
		RecipeBatchNote         func(childComplexity int, id string) int
		RecipeBatchNotes        func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchNoteOrdering, filter *RecipeBatchNoteFilter) int
		RecipeBatches           func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchOrdering, filter *RecipeBatchFilter) int
		RecipeFragrance         func(childComplexity int, id string) int
		RecipeFragrances        func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeFragranceOrdering, filter *RecipeFragranceFilter) int
		RecipeLipid             func(childComplexity int, id string) int
		RecipeLipids            func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeLipidOrdering, filter *RecipeLipidFilter) int
		RecipeStep              func(childComplexity int, id string) int
		RecipeSteps             func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeStepOrdering, filter *RecipeStepFilter) int
		Recipes                 func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*RecipeOrdering, filter *RecipeFilter) int
		Supplier                func(childComplexity int, id string) int
		Suppliers               func(childComplexity int, pagination boilergql.ConnectionPagination, ordering []*SupplierOrdering, filter *SupplierFilter) int
	}

	Recipe struct {
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		ID               func(childComplexity int) int
		Name             func(childComplexity int) int
		Note             func(childComplexity int) int
		RecipeAdditives  func(childComplexity int) int
		RecipeBatches    func(childComplexity int) int
		RecipeFragrances func(childComplexity int) int
		RecipeLipids     func(childComplexity int) int
		RecipeSteps      func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	RecipeAdditive struct {
		Additive   func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Percentage func(childComplexity int) int
		Recipe     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeAdditiveConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeAdditiveDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeAdditiveEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeAdditivePayload struct {
		RecipeAdditive func(childComplexity int) int
	}

	RecipeAdditivesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeAdditivesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeBatch struct {
		BatchRecipeBatchAdditives  func(childComplexity int) int
		BatchRecipeBatchFragrances func(childComplexity int) int
		BatchRecipeBatchLipids     func(childComplexity int) int
		BatchRecipeBatchLyes       func(childComplexity int) int
		BatchRecipeBatchNotes      func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CuredWeight                func(childComplexity int) int
		DeletedAt                  func(childComplexity int) int
		ID                         func(childComplexity int) int
		LipidWeight                func(childComplexity int) int
		Note                       func(childComplexity int) int
		ProductionDate             func(childComplexity int) int
		ProductionWeight           func(childComplexity int) int
		Recipe                     func(childComplexity int) int
		SellableDate               func(childComplexity int) int
		Tag                        func(childComplexity int) int
		UpdatedAt                  func(childComplexity int) int
	}

	RecipeBatchAdditive struct {
		Additive  func(childComplexity int) int
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchAdditiveConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeBatchAdditiveDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchAdditiveEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeBatchAdditivePayload struct {
		RecipeBatchAdditive func(childComplexity int) int
	}

	RecipeBatchAdditivesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeBatchAdditivesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeBatchConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeBatchDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeBatchFragrance struct {
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Fragrance func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchFragranceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeBatchFragranceDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchFragranceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeBatchFragrancePayload struct {
		RecipeBatchFragrance func(childComplexity int) int
	}

	RecipeBatchFragrancesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeBatchFragrancesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeBatchLipid struct {
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Lipid     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchLipidConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeBatchLipidDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchLipidEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeBatchLipidPayload struct {
		RecipeBatchLipid func(childComplexity int) int
	}

	RecipeBatchLipidsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeBatchLipidsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeBatchLye struct {
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Discount  func(childComplexity int) int
		ID        func(childComplexity int) int
		Lye       func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchLyeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeBatchLyeDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchLyeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeBatchLyePayload struct {
		RecipeBatchLye func(childComplexity int) int
	}

	RecipeBatchLyesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeBatchLyesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeBatchNote struct {
		Batch     func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Link      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RecipeBatchNoteConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeBatchNoteDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchNoteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeBatchNotePayload struct {
		RecipeBatchNote func(childComplexity int) int
	}

	RecipeBatchNotesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeBatchNotesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeBatchPayload struct {
		RecipeBatch func(childComplexity int) int
	}

	RecipeBatchesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeBatchesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeFragrance struct {
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		Fragrance  func(childComplexity int) int
		ID         func(childComplexity int) int
		Percentage func(childComplexity int) int
		Recipe     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeFragranceConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeFragranceDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeFragranceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeFragrancePayload struct {
		RecipeFragrance func(childComplexity int) int
	}

	RecipeFragrancesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeFragrancesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipeLipid struct {
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Lipid      func(childComplexity int) int
		Percentage func(childComplexity int) int
		Recipe     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeLipidConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeLipidDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeLipidEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeLipidPayload struct {
		RecipeLipid func(childComplexity int) int
	}

	RecipeLipidsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeLipidsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipePayload struct {
		Recipe func(childComplexity int) int
	}

	RecipeStep struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Note      func(childComplexity int) int
		Num       func(childComplexity int) int
		Recipe    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RecipeStepConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	RecipeStepDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeStepEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RecipeStepPayload struct {
		RecipeStep func(childComplexity int) int
	}

	RecipeStepsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipeStepsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	RecipesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	RecipesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Supplier struct {
		AdditiveInventories  func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		DeletedAt            func(childComplexity int) int
		FragranceInventories func(childComplexity int) int
		ID                   func(childComplexity int) int
		LipidInventories     func(childComplexity int) int
		LyeInventories       func(childComplexity int) int
		Name                 func(childComplexity int) int
		Note                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		Website              func(childComplexity int) int
	}

	SupplierConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	SupplierDeletePayload struct {
		ID func(childComplexity int) int
	}

	SupplierEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	SupplierPayload struct {
		Supplier func(childComplexity int) int
	}

	SuppliersDeletePayload struct {
		Ids func(childComplexity int) int
	}

	SuppliersUpdatePayload struct {
		Ok func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateAdditive(ctx context.Context, input AdditiveCreateInput) (*AdditivePayload, error)
	UpdateAdditive(ctx context.Context, id string, input AdditiveUpdateInput) (*AdditivePayload, error)
	UpdateAdditives(ctx context.Context, filter *AdditiveFilter, input AdditiveUpdateInput) (*AdditivesUpdatePayload, error)
	DeleteAdditive(ctx context.Context, id string) (*AdditiveDeletePayload, error)
	DeleteAdditives(ctx context.Context, filter *AdditiveFilter) (*AdditivesDeletePayload, error)
	CreateAdditiveInventory(ctx context.Context, input AdditiveInventoryCreateInput) (*AdditiveInventoryPayload, error)
	UpdateAdditiveInventory(ctx context.Context, id string, input AdditiveInventoryUpdateInput) (*AdditiveInventoryPayload, error)
	UpdateAdditiveInventories(ctx context.Context, filter *AdditiveInventoryFilter, input AdditiveInventoryUpdateInput) (*AdditiveInventoriesUpdatePayload, error)
	DeleteAdditiveInventory(ctx context.Context, id string) (*AdditiveInventoryDeletePayload, error)
	DeleteAdditiveInventories(ctx context.Context, filter *AdditiveInventoryFilter) (*AdditiveInventoriesDeletePayload, error)
	CreateAuthGroup(ctx context.Context, input AuthGroupCreateInput) (*AuthGroupPayload, error)
	UpdateAuthGroup(ctx context.Context, id string, input AuthGroupUpdateInput) (*AuthGroupPayload, error)
	UpdateAuthGroups(ctx context.Context, filter *AuthGroupFilter, input AuthGroupUpdateInput) (*AuthGroupsUpdatePayload, error)
	DeleteAuthGroup(ctx context.Context, id string) (*AuthGroupDeletePayload, error)
	DeleteAuthGroups(ctx context.Context, filter *AuthGroupFilter) (*AuthGroupsDeletePayload, error)
	CreateAuthGroupPermission(ctx context.Context, input AuthGroupPermissionCreateInput) (*AuthGroupPermissionPayload, error)
	UpdateAuthGroupPermission(ctx context.Context, id string, input AuthGroupPermissionUpdateInput) (*AuthGroupPermissionPayload, error)
	UpdateAuthGroupPermissions(ctx context.Context, filter *AuthGroupPermissionFilter, input AuthGroupPermissionUpdateInput) (*AuthGroupPermissionsUpdatePayload, error)
	DeleteAuthGroupPermission(ctx context.Context, id string) (*AuthGroupPermissionDeletePayload, error)
	DeleteAuthGroupPermissions(ctx context.Context, filter *AuthGroupPermissionFilter) (*AuthGroupPermissionsDeletePayload, error)
	CreateAuthPermission(ctx context.Context, input AuthPermissionCreateInput) (*AuthPermissionPayload, error)
	UpdateAuthPermission(ctx context.Context, id string, input AuthPermissionUpdateInput) (*AuthPermissionPayload, error)
	UpdateAuthPermissions(ctx context.Context, filter *AuthPermissionFilter, input AuthPermissionUpdateInput) (*AuthPermissionsUpdatePayload, error)
	DeleteAuthPermission(ctx context.Context, id string) (*AuthPermissionDeletePayload, error)
	DeleteAuthPermissions(ctx context.Context, filter *AuthPermissionFilter) (*AuthPermissionsDeletePayload, error)
	CreateAuthUser(ctx context.Context, input AuthUserCreateInput) (*AuthUserPayload, error)
	UpdateAuthUser(ctx context.Context, id string, input AuthUserUpdateInput) (*AuthUserPayload, error)
	UpdateAuthUsers(ctx context.Context, filter *AuthUserFilter, input AuthUserUpdateInput) (*AuthUsersUpdatePayload, error)
	DeleteAuthUser(ctx context.Context, id string) (*AuthUserDeletePayload, error)
	DeleteAuthUsers(ctx context.Context, filter *AuthUserFilter) (*AuthUsersDeletePayload, error)
	CreateAuthUserGroup(ctx context.Context, input AuthUserGroupCreateInput) (*AuthUserGroupPayload, error)
	UpdateAuthUserGroup(ctx context.Context, id string, input AuthUserGroupUpdateInput) (*AuthUserGroupPayload, error)
	UpdateAuthUserGroups(ctx context.Context, filter *AuthUserGroupFilter, input AuthUserGroupUpdateInput) (*AuthUserGroupsUpdatePayload, error)
	DeleteAuthUserGroup(ctx context.Context, id string) (*AuthUserGroupDeletePayload, error)
	DeleteAuthUserGroups(ctx context.Context, filter *AuthUserGroupFilter) (*AuthUserGroupsDeletePayload, error)
	CreateAuthUserUserPermission(ctx context.Context, input AuthUserUserPermissionCreateInput) (*AuthUserUserPermissionPayload, error)
	UpdateAuthUserUserPermission(ctx context.Context, id string, input AuthUserUserPermissionUpdateInput) (*AuthUserUserPermissionPayload, error)
	UpdateAuthUserUserPermissions(ctx context.Context, filter *AuthUserUserPermissionFilter, input AuthUserUserPermissionUpdateInput) (*AuthUserUserPermissionsUpdatePayload, error)
	DeleteAuthUserUserPermission(ctx context.Context, id string) (*AuthUserUserPermissionDeletePayload, error)
	DeleteAuthUserUserPermissions(ctx context.Context, filter *AuthUserUserPermissionFilter) (*AuthUserUserPermissionsDeletePayload, error)
	CreateFragrance(ctx context.Context, input FragranceCreateInput) (*FragrancePayload, error)
	UpdateFragrance(ctx context.Context, id string, input FragranceUpdateInput) (*FragrancePayload, error)
	UpdateFragrances(ctx context.Context, filter *FragranceFilter, input FragranceUpdateInput) (*FragrancesUpdatePayload, error)
	DeleteFragrance(ctx context.Context, id string) (*FragranceDeletePayload, error)
	DeleteFragrances(ctx context.Context, filter *FragranceFilter) (*FragrancesDeletePayload, error)
	CreateFragranceInventory(ctx context.Context, input FragranceInventoryCreateInput) (*FragranceInventoryPayload, error)
	UpdateFragranceInventory(ctx context.Context, id string, input FragranceInventoryUpdateInput) (*FragranceInventoryPayload, error)
	UpdateFragranceInventories(ctx context.Context, filter *FragranceInventoryFilter, input FragranceInventoryUpdateInput) (*FragranceInventoriesUpdatePayload, error)
	DeleteFragranceInventory(ctx context.Context, id string) (*FragranceInventoryDeletePayload, error)
	DeleteFragranceInventories(ctx context.Context, filter *FragranceInventoryFilter) (*FragranceInventoriesDeletePayload, error)
	CreateLipid(ctx context.Context, input LipidCreateInput) (*LipidPayload, error)
	UpdateLipid(ctx context.Context, id string, input LipidUpdateInput) (*LipidPayload, error)
	UpdateLipids(ctx context.Context, filter *LipidFilter, input LipidUpdateInput) (*LipidsUpdatePayload, error)
	DeleteLipid(ctx context.Context, id string) (*LipidDeletePayload, error)
	DeleteLipids(ctx context.Context, filter *LipidFilter) (*LipidsDeletePayload, error)
	CreateLipidInventory(ctx context.Context, input LipidInventoryCreateInput) (*LipidInventoryPayload, error)
	UpdateLipidInventory(ctx context.Context, id string, input LipidInventoryUpdateInput) (*LipidInventoryPayload, error)
	UpdateLipidInventories(ctx context.Context, filter *LipidInventoryFilter, input LipidInventoryUpdateInput) (*LipidInventoriesUpdatePayload, error)
	DeleteLipidInventory(ctx context.Context, id string) (*LipidInventoryDeletePayload, error)
	DeleteLipidInventories(ctx context.Context, filter *LipidInventoryFilter) (*LipidInventoriesDeletePayload, error)
	CreateLye(ctx context.Context, input LyeCreateInput) (*LyePayload, error)
	UpdateLye(ctx context.Context, id string, input LyeUpdateInput) (*LyePayload, error)
	UpdateLyes(ctx context.Context, filter *LyeFilter, input LyeUpdateInput) (*LyesUpdatePayload, error)
	DeleteLye(ctx context.Context, id string) (*LyeDeletePayload, error)
	DeleteLyes(ctx context.Context, filter *LyeFilter) (*LyesDeletePayload, error)
	CreateLyeInventory(ctx context.Context, input LyeInventoryCreateInput) (*LyeInventoryPayload, error)
	UpdateLyeInventory(ctx context.Context, id string, input LyeInventoryUpdateInput) (*LyeInventoryPayload, error)
	UpdateLyeInventories(ctx context.Context, filter *LyeInventoryFilter, input LyeInventoryUpdateInput) (*LyeInventoriesUpdatePayload, error)
	DeleteLyeInventory(ctx context.Context, id string) (*LyeInventoryDeletePayload, error)
	DeleteLyeInventories(ctx context.Context, filter *LyeInventoryFilter) (*LyeInventoriesDeletePayload, error)
	CreateRecipe(ctx context.Context, input RecipeCreateInput) (*RecipePayload, error)
	UpdateRecipe(ctx context.Context, id string, input RecipeUpdateInput) (*RecipePayload, error)
	UpdateRecipes(ctx context.Context, filter *RecipeFilter, input RecipeUpdateInput) (*RecipesUpdatePayload, error)
	DeleteRecipe(ctx context.Context, id string) (*RecipeDeletePayload, error)
	DeleteRecipes(ctx context.Context, filter *RecipeFilter) (*RecipesDeletePayload, error)
	CreateRecipeAdditive(ctx context.Context, input RecipeAdditiveCreateInput) (*RecipeAdditivePayload, error)
	UpdateRecipeAdditive(ctx context.Context, id string, input RecipeAdditiveUpdateInput) (*RecipeAdditivePayload, error)
	UpdateRecipeAdditives(ctx context.Context, filter *RecipeAdditiveFilter, input RecipeAdditiveUpdateInput) (*RecipeAdditivesUpdatePayload, error)
	DeleteRecipeAdditive(ctx context.Context, id string) (*RecipeAdditiveDeletePayload, error)
	DeleteRecipeAdditives(ctx context.Context, filter *RecipeAdditiveFilter) (*RecipeAdditivesDeletePayload, error)
	CreateRecipeBatch(ctx context.Context, input RecipeBatchCreateInput) (*RecipeBatchPayload, error)
	UpdateRecipeBatch(ctx context.Context, id string, input RecipeBatchUpdateInput) (*RecipeBatchPayload, error)
	UpdateRecipeBatches(ctx context.Context, filter *RecipeBatchFilter, input RecipeBatchUpdateInput) (*RecipeBatchesUpdatePayload, error)
	DeleteRecipeBatch(ctx context.Context, id string) (*RecipeBatchDeletePayload, error)
	DeleteRecipeBatches(ctx context.Context, filter *RecipeBatchFilter) (*RecipeBatchesDeletePayload, error)
	CreateRecipeBatchAdditive(ctx context.Context, input RecipeBatchAdditiveCreateInput) (*RecipeBatchAdditivePayload, error)
	UpdateRecipeBatchAdditive(ctx context.Context, id string, input RecipeBatchAdditiveUpdateInput) (*RecipeBatchAdditivePayload, error)
	UpdateRecipeBatchAdditives(ctx context.Context, filter *RecipeBatchAdditiveFilter, input RecipeBatchAdditiveUpdateInput) (*RecipeBatchAdditivesUpdatePayload, error)
	DeleteRecipeBatchAdditive(ctx context.Context, id string) (*RecipeBatchAdditiveDeletePayload, error)
	DeleteRecipeBatchAdditives(ctx context.Context, filter *RecipeBatchAdditiveFilter) (*RecipeBatchAdditivesDeletePayload, error)
	CreateRecipeBatchFragrance(ctx context.Context, input RecipeBatchFragranceCreateInput) (*RecipeBatchFragrancePayload, error)
	UpdateRecipeBatchFragrance(ctx context.Context, id string, input RecipeBatchFragranceUpdateInput) (*RecipeBatchFragrancePayload, error)
	UpdateRecipeBatchFragrances(ctx context.Context, filter *RecipeBatchFragranceFilter, input RecipeBatchFragranceUpdateInput) (*RecipeBatchFragrancesUpdatePayload, error)
	DeleteRecipeBatchFragrance(ctx context.Context, id string) (*RecipeBatchFragranceDeletePayload, error)
	DeleteRecipeBatchFragrances(ctx context.Context, filter *RecipeBatchFragranceFilter) (*RecipeBatchFragrancesDeletePayload, error)
	CreateRecipeBatchLipid(ctx context.Context, input RecipeBatchLipidCreateInput) (*RecipeBatchLipidPayload, error)
	UpdateRecipeBatchLipid(ctx context.Context, id string, input RecipeBatchLipidUpdateInput) (*RecipeBatchLipidPayload, error)
	UpdateRecipeBatchLipids(ctx context.Context, filter *RecipeBatchLipidFilter, input RecipeBatchLipidUpdateInput) (*RecipeBatchLipidsUpdatePayload, error)
	DeleteRecipeBatchLipid(ctx context.Context, id string) (*RecipeBatchLipidDeletePayload, error)
	DeleteRecipeBatchLipids(ctx context.Context, filter *RecipeBatchLipidFilter) (*RecipeBatchLipidsDeletePayload, error)
	CreateRecipeBatchLye(ctx context.Context, input RecipeBatchLyeCreateInput) (*RecipeBatchLyePayload, error)
	UpdateRecipeBatchLye(ctx context.Context, id string, input RecipeBatchLyeUpdateInput) (*RecipeBatchLyePayload, error)
	UpdateRecipeBatchLyes(ctx context.Context, filter *RecipeBatchLyeFilter, input RecipeBatchLyeUpdateInput) (*RecipeBatchLyesUpdatePayload, error)
	DeleteRecipeBatchLye(ctx context.Context, id string) (*RecipeBatchLyeDeletePayload, error)
	DeleteRecipeBatchLyes(ctx context.Context, filter *RecipeBatchLyeFilter) (*RecipeBatchLyesDeletePayload, error)
	CreateRecipeBatchNote(ctx context.Context, input RecipeBatchNoteCreateInput) (*RecipeBatchNotePayload, error)
	UpdateRecipeBatchNote(ctx context.Context, id string, input RecipeBatchNoteUpdateInput) (*RecipeBatchNotePayload, error)
	UpdateRecipeBatchNotes(ctx context.Context, filter *RecipeBatchNoteFilter, input RecipeBatchNoteUpdateInput) (*RecipeBatchNotesUpdatePayload, error)
	DeleteRecipeBatchNote(ctx context.Context, id string) (*RecipeBatchNoteDeletePayload, error)
	DeleteRecipeBatchNotes(ctx context.Context, filter *RecipeBatchNoteFilter) (*RecipeBatchNotesDeletePayload, error)
	CreateRecipeFragrance(ctx context.Context, input RecipeFragranceCreateInput) (*RecipeFragrancePayload, error)
	UpdateRecipeFragrance(ctx context.Context, id string, input RecipeFragranceUpdateInput) (*RecipeFragrancePayload, error)
	UpdateRecipeFragrances(ctx context.Context, filter *RecipeFragranceFilter, input RecipeFragranceUpdateInput) (*RecipeFragrancesUpdatePayload, error)
	DeleteRecipeFragrance(ctx context.Context, id string) (*RecipeFragranceDeletePayload, error)
	DeleteRecipeFragrances(ctx context.Context, filter *RecipeFragranceFilter) (*RecipeFragrancesDeletePayload, error)
	CreateRecipeLipid(ctx context.Context, input RecipeLipidCreateInput) (*RecipeLipidPayload, error)
	UpdateRecipeLipid(ctx context.Context, id string, input RecipeLipidUpdateInput) (*RecipeLipidPayload, error)
	UpdateRecipeLipids(ctx context.Context, filter *RecipeLipidFilter, input RecipeLipidUpdateInput) (*RecipeLipidsUpdatePayload, error)
	DeleteRecipeLipid(ctx context.Context, id string) (*RecipeLipidDeletePayload, error)
	DeleteRecipeLipids(ctx context.Context, filter *RecipeLipidFilter) (*RecipeLipidsDeletePayload, error)
	CreateRecipeStep(ctx context.Context, input RecipeStepCreateInput) (*RecipeStepPayload, error)
	UpdateRecipeStep(ctx context.Context, id string, input RecipeStepUpdateInput) (*RecipeStepPayload, error)
	UpdateRecipeSteps(ctx context.Context, filter *RecipeStepFilter, input RecipeStepUpdateInput) (*RecipeStepsUpdatePayload, error)
	DeleteRecipeStep(ctx context.Context, id string) (*RecipeStepDeletePayload, error)
	DeleteRecipeSteps(ctx context.Context, filter *RecipeStepFilter) (*RecipeStepsDeletePayload, error)
	CreateSupplier(ctx context.Context, input SupplierCreateInput) (*SupplierPayload, error)
	UpdateSupplier(ctx context.Context, id string, input SupplierUpdateInput) (*SupplierPayload, error)
	UpdateSuppliers(ctx context.Context, filter *SupplierFilter, input SupplierUpdateInput) (*SuppliersUpdatePayload, error)
	DeleteSupplier(ctx context.Context, id string) (*SupplierDeletePayload, error)
	DeleteSuppliers(ctx context.Context, filter *SupplierFilter) (*SuppliersDeletePayload, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (Node, error)
	Additive(ctx context.Context, id string) (*Additive, error)
	Additives(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AdditiveOrdering, filter *AdditiveFilter) (*AdditiveConnection, error)
	AdditiveInventory(ctx context.Context, id string) (*AdditiveInventory, error)
	AdditiveInventories(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AdditiveInventoryOrdering, filter *AdditiveInventoryFilter) (*AdditiveInventoryConnection, error)
	AuthGroup(ctx context.Context, id string) (*AuthGroup, error)
	AuthGroups(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AuthGroupOrdering, filter *AuthGroupFilter) (*AuthGroupConnection, error)
	AuthGroupPermission(ctx context.Context, id string) (*AuthGroupPermission, error)
	AuthGroupPermissions(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AuthGroupPermissionOrdering, filter *AuthGroupPermissionFilter) (*AuthGroupPermissionConnection, error)
	AuthPermission(ctx context.Context, id string) (*AuthPermission, error)
	AuthPermissions(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AuthPermissionOrdering, filter *AuthPermissionFilter) (*AuthPermissionConnection, error)
	AuthUser(ctx context.Context, id string) (*AuthUser, error)
	AuthUsers(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AuthUserOrdering, filter *AuthUserFilter) (*AuthUserConnection, error)
	AuthUserGroup(ctx context.Context, id string) (*AuthUserGroup, error)
	AuthUserGroups(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AuthUserGroupOrdering, filter *AuthUserGroupFilter) (*AuthUserGroupConnection, error)
	AuthUserUserPermission(ctx context.Context, id string) (*AuthUserUserPermission, error)
	AuthUserUserPermissions(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*AuthUserUserPermissionOrdering, filter *AuthUserUserPermissionFilter) (*AuthUserUserPermissionConnection, error)
	Fragrance(ctx context.Context, id string) (*Fragrance, error)
	Fragrances(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*FragranceOrdering, filter *FragranceFilter) (*FragranceConnection, error)
	FragranceInventory(ctx context.Context, id string) (*FragranceInventory, error)
	FragranceInventories(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*FragranceInventoryOrdering, filter *FragranceInventoryFilter) (*FragranceInventoryConnection, error)
	Lipid(ctx context.Context, id string) (*Lipid, error)
	Lipids(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*LipidOrdering, filter *LipidFilter) (*LipidConnection, error)
	LipidInventory(ctx context.Context, id string) (*LipidInventory, error)
	LipidInventories(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*LipidInventoryOrdering, filter *LipidInventoryFilter) (*LipidInventoryConnection, error)
	Lye(ctx context.Context, id string) (*Lye, error)
	Lyes(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*LyeOrdering, filter *LyeFilter) (*LyeConnection, error)
	LyeInventory(ctx context.Context, id string) (*LyeInventory, error)
	LyeInventories(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*LyeInventoryOrdering, filter *LyeInventoryFilter) (*LyeInventoryConnection, error)
	Recipe(ctx context.Context, id string) (*Recipe, error)
	Recipes(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeOrdering, filter *RecipeFilter) (*RecipeConnection, error)
	RecipeAdditive(ctx context.Context, id string) (*RecipeAdditive, error)
	RecipeAdditives(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeAdditiveOrdering, filter *RecipeAdditiveFilter) (*RecipeAdditiveConnection, error)
	RecipeBatch(ctx context.Context, id string) (*RecipeBatch, error)
	RecipeBatches(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchOrdering, filter *RecipeBatchFilter) (*RecipeBatchConnection, error)
	RecipeBatchAdditive(ctx context.Context, id string) (*RecipeBatchAdditive, error)
	RecipeBatchAdditives(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchAdditiveOrdering, filter *RecipeBatchAdditiveFilter) (*RecipeBatchAdditiveConnection, error)
	RecipeBatchFragrance(ctx context.Context, id string) (*RecipeBatchFragrance, error)
	RecipeBatchFragrances(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchFragranceOrdering, filter *RecipeBatchFragranceFilter) (*RecipeBatchFragranceConnection, error)
	RecipeBatchLipid(ctx context.Context, id string) (*RecipeBatchLipid, error)
	RecipeBatchLipids(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchLipidOrdering, filter *RecipeBatchLipidFilter) (*RecipeBatchLipidConnection, error)
	RecipeBatchLye(ctx context.Context, id string) (*RecipeBatchLye, error)
	RecipeBatchLyes(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchLyeOrdering, filter *RecipeBatchLyeFilter) (*RecipeBatchLyeConnection, error)
	RecipeBatchNote(ctx context.Context, id string) (*RecipeBatchNote, error)
	RecipeBatchNotes(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeBatchNoteOrdering, filter *RecipeBatchNoteFilter) (*RecipeBatchNoteConnection, error)
	RecipeFragrance(ctx context.Context, id string) (*RecipeFragrance, error)
	RecipeFragrances(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeFragranceOrdering, filter *RecipeFragranceFilter) (*RecipeFragranceConnection, error)
	RecipeLipid(ctx context.Context, id string) (*RecipeLipid, error)
	RecipeLipids(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeLipidOrdering, filter *RecipeLipidFilter) (*RecipeLipidConnection, error)
	RecipeStep(ctx context.Context, id string) (*RecipeStep, error)
	RecipeSteps(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*RecipeStepOrdering, filter *RecipeStepFilter) (*RecipeStepConnection, error)
	Supplier(ctx context.Context, id string) (*Supplier, error)
	Suppliers(ctx context.Context, pagination boilergql.ConnectionPagination, ordering []*SupplierOrdering, filter *SupplierFilter) (*SupplierConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Additive.additiveInventories":
		if e.complexity.Additive.AdditiveInventories == nil {
			break
		}

		return e.complexity.Additive.AdditiveInventories(childComplexity), true

	case "Additive.createdAt":
		if e.complexity.Additive.CreatedAt == nil {
			break
		}

		return e.complexity.Additive.CreatedAt(childComplexity), true

	case "Additive.deletedAt":
		if e.complexity.Additive.DeletedAt == nil {
			break
		}

		return e.complexity.Additive.DeletedAt(childComplexity), true

	case "Additive.id":
		if e.complexity.Additive.ID == nil {
			break
		}

		return e.complexity.Additive.ID(childComplexity), true

	case "Additive.name":
		if e.complexity.Additive.Name == nil {
			break
		}

		return e.complexity.Additive.Name(childComplexity), true

	case "Additive.note":
		if e.complexity.Additive.Note == nil {
			break
		}

		return e.complexity.Additive.Note(childComplexity), true

	case "Additive.recipeAdditive":
		if e.complexity.Additive.RecipeAdditive == nil {
			break
		}

		return e.complexity.Additive.RecipeAdditive(childComplexity), true

	case "Additive.recipeBatchAdditive":
		if e.complexity.Additive.RecipeBatchAdditive == nil {
			break
		}

		return e.complexity.Additive.RecipeBatchAdditive(childComplexity), true

	case "Additive.updatedAt":
		if e.complexity.Additive.UpdatedAt == nil {
			break
		}

		return e.complexity.Additive.UpdatedAt(childComplexity), true

	case "AdditiveConnection.edges":
		if e.complexity.AdditiveConnection.Edges == nil {
			break
		}

		return e.complexity.AdditiveConnection.Edges(childComplexity), true

	case "AdditiveConnection.pageInfo":
		if e.complexity.AdditiveConnection.PageInfo == nil {
			break
		}

		return e.complexity.AdditiveConnection.PageInfo(childComplexity), true

	case "AdditiveDeletePayload.id":
		if e.complexity.AdditiveDeletePayload.ID == nil {
			break
		}

		return e.complexity.AdditiveDeletePayload.ID(childComplexity), true

	case "AdditiveEdge.cursor":
		if e.complexity.AdditiveEdge.Cursor == nil {
			break
		}

		return e.complexity.AdditiveEdge.Cursor(childComplexity), true

	case "AdditiveEdge.node":
		if e.complexity.AdditiveEdge.Node == nil {
			break
		}

		return e.complexity.AdditiveEdge.Node(childComplexity), true

	case "AdditiveInventoriesDeletePayload.ids":
		if e.complexity.AdditiveInventoriesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AdditiveInventoriesDeletePayload.Ids(childComplexity), true

	case "AdditiveInventoriesUpdatePayload.ok":
		if e.complexity.AdditiveInventoriesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AdditiveInventoriesUpdatePayload.Ok(childComplexity), true

	case "AdditiveInventory.additive":
		if e.complexity.AdditiveInventory.Additive == nil {
			break
		}

		return e.complexity.AdditiveInventory.Additive(childComplexity), true

	case "AdditiveInventory.cost":
		if e.complexity.AdditiveInventory.Cost == nil {
			break
		}

		return e.complexity.AdditiveInventory.Cost(childComplexity), true

	case "AdditiveInventory.createdAt":
		if e.complexity.AdditiveInventory.CreatedAt == nil {
			break
		}

		return e.complexity.AdditiveInventory.CreatedAt(childComplexity), true

	case "AdditiveInventory.deletedAt":
		if e.complexity.AdditiveInventory.DeletedAt == nil {
			break
		}

		return e.complexity.AdditiveInventory.DeletedAt(childComplexity), true

	case "AdditiveInventory.expiryDate":
		if e.complexity.AdditiveInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.AdditiveInventory.ExpiryDate(childComplexity), true

	case "AdditiveInventory.id":
		if e.complexity.AdditiveInventory.ID == nil {
			break
		}

		return e.complexity.AdditiveInventory.ID(childComplexity), true

	case "AdditiveInventory.purchaseDate":
		if e.complexity.AdditiveInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.AdditiveInventory.PurchaseDate(childComplexity), true

	case "AdditiveInventory.supplier":
		if e.complexity.AdditiveInventory.Supplier == nil {
			break
		}

		return e.complexity.AdditiveInventory.Supplier(childComplexity), true

	case "AdditiveInventory.updatedAt":
		if e.complexity.AdditiveInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.AdditiveInventory.UpdatedAt(childComplexity), true

	case "AdditiveInventory.weight":
		if e.complexity.AdditiveInventory.Weight == nil {
			break
		}

		return e.complexity.AdditiveInventory.Weight(childComplexity), true

	case "AdditiveInventoryConnection.edges":
		if e.complexity.AdditiveInventoryConnection.Edges == nil {
			break
		}

		return e.complexity.AdditiveInventoryConnection.Edges(childComplexity), true

	case "AdditiveInventoryConnection.pageInfo":
		if e.complexity.AdditiveInventoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.AdditiveInventoryConnection.PageInfo(childComplexity), true

	case "AdditiveInventoryDeletePayload.id":
		if e.complexity.AdditiveInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.AdditiveInventoryDeletePayload.ID(childComplexity), true

	case "AdditiveInventoryEdge.cursor":
		if e.complexity.AdditiveInventoryEdge.Cursor == nil {
			break
		}

		return e.complexity.AdditiveInventoryEdge.Cursor(childComplexity), true

	case "AdditiveInventoryEdge.node":
		if e.complexity.AdditiveInventoryEdge.Node == nil {
			break
		}

		return e.complexity.AdditiveInventoryEdge.Node(childComplexity), true

	case "AdditiveInventoryPayload.additiveInventory":
		if e.complexity.AdditiveInventoryPayload.AdditiveInventory == nil {
			break
		}

		return e.complexity.AdditiveInventoryPayload.AdditiveInventory(childComplexity), true

	case "AdditivePayload.additive":
		if e.complexity.AdditivePayload.Additive == nil {
			break
		}

		return e.complexity.AdditivePayload.Additive(childComplexity), true

	case "AdditivesDeletePayload.ids":
		if e.complexity.AdditivesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AdditivesDeletePayload.Ids(childComplexity), true

	case "AdditivesUpdatePayload.ok":
		if e.complexity.AdditivesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AdditivesUpdatePayload.Ok(childComplexity), true

	case "AuthGroup.groupAuthGroupPermissions":
		if e.complexity.AuthGroup.GroupAuthGroupPermissions == nil {
			break
		}

		return e.complexity.AuthGroup.GroupAuthGroupPermissions(childComplexity), true

	case "AuthGroup.groupAuthUserGroups":
		if e.complexity.AuthGroup.GroupAuthUserGroups == nil {
			break
		}

		return e.complexity.AuthGroup.GroupAuthUserGroups(childComplexity), true

	case "AuthGroup.id":
		if e.complexity.AuthGroup.ID == nil {
			break
		}

		return e.complexity.AuthGroup.ID(childComplexity), true

	case "AuthGroup.name":
		if e.complexity.AuthGroup.Name == nil {
			break
		}

		return e.complexity.AuthGroup.Name(childComplexity), true

	case "AuthGroupConnection.edges":
		if e.complexity.AuthGroupConnection.Edges == nil {
			break
		}

		return e.complexity.AuthGroupConnection.Edges(childComplexity), true

	case "AuthGroupConnection.pageInfo":
		if e.complexity.AuthGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthGroupConnection.PageInfo(childComplexity), true

	case "AuthGroupDeletePayload.id":
		if e.complexity.AuthGroupDeletePayload.ID == nil {
			break
		}

		return e.complexity.AuthGroupDeletePayload.ID(childComplexity), true

	case "AuthGroupEdge.cursor":
		if e.complexity.AuthGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthGroupEdge.Cursor(childComplexity), true

	case "AuthGroupEdge.node":
		if e.complexity.AuthGroupEdge.Node == nil {
			break
		}

		return e.complexity.AuthGroupEdge.Node(childComplexity), true

	case "AuthGroupPayload.authGroup":
		if e.complexity.AuthGroupPayload.AuthGroup == nil {
			break
		}

		return e.complexity.AuthGroupPayload.AuthGroup(childComplexity), true

	case "AuthGroupPermission.group":
		if e.complexity.AuthGroupPermission.Group == nil {
			break
		}

		return e.complexity.AuthGroupPermission.Group(childComplexity), true

	case "AuthGroupPermission.id":
		if e.complexity.AuthGroupPermission.ID == nil {
			break
		}

		return e.complexity.AuthGroupPermission.ID(childComplexity), true

	case "AuthGroupPermission.permission":
		if e.complexity.AuthGroupPermission.Permission == nil {
			break
		}

		return e.complexity.AuthGroupPermission.Permission(childComplexity), true

	case "AuthGroupPermissionConnection.edges":
		if e.complexity.AuthGroupPermissionConnection.Edges == nil {
			break
		}

		return e.complexity.AuthGroupPermissionConnection.Edges(childComplexity), true

	case "AuthGroupPermissionConnection.pageInfo":
		if e.complexity.AuthGroupPermissionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthGroupPermissionConnection.PageInfo(childComplexity), true

	case "AuthGroupPermissionDeletePayload.id":
		if e.complexity.AuthGroupPermissionDeletePayload.ID == nil {
			break
		}

		return e.complexity.AuthGroupPermissionDeletePayload.ID(childComplexity), true

	case "AuthGroupPermissionEdge.cursor":
		if e.complexity.AuthGroupPermissionEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthGroupPermissionEdge.Cursor(childComplexity), true

	case "AuthGroupPermissionEdge.node":
		if e.complexity.AuthGroupPermissionEdge.Node == nil {
			break
		}

		return e.complexity.AuthGroupPermissionEdge.Node(childComplexity), true

	case "AuthGroupPermissionPayload.authGroupPermission":
		if e.complexity.AuthGroupPermissionPayload.AuthGroupPermission == nil {
			break
		}

		return e.complexity.AuthGroupPermissionPayload.AuthGroupPermission(childComplexity), true

	case "AuthGroupPermissionsDeletePayload.ids":
		if e.complexity.AuthGroupPermissionsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AuthGroupPermissionsDeletePayload.Ids(childComplexity), true

	case "AuthGroupPermissionsUpdatePayload.ok":
		if e.complexity.AuthGroupPermissionsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AuthGroupPermissionsUpdatePayload.Ok(childComplexity), true

	case "AuthGroupsDeletePayload.ids":
		if e.complexity.AuthGroupsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AuthGroupsDeletePayload.Ids(childComplexity), true

	case "AuthGroupsUpdatePayload.ok":
		if e.complexity.AuthGroupsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AuthGroupsUpdatePayload.Ok(childComplexity), true

	case "AuthPermission.codename":
		if e.complexity.AuthPermission.Codename == nil {
			break
		}

		return e.complexity.AuthPermission.Codename(childComplexity), true

	case "AuthPermission.contentTypeId":
		if e.complexity.AuthPermission.ContentTypeID == nil {
			break
		}

		return e.complexity.AuthPermission.ContentTypeID(childComplexity), true

	case "AuthPermission.id":
		if e.complexity.AuthPermission.ID == nil {
			break
		}

		return e.complexity.AuthPermission.ID(childComplexity), true

	case "AuthPermission.name":
		if e.complexity.AuthPermission.Name == nil {
			break
		}

		return e.complexity.AuthPermission.Name(childComplexity), true

	case "AuthPermission.permissionAuthGroupPermissions":
		if e.complexity.AuthPermission.PermissionAuthGroupPermissions == nil {
			break
		}

		return e.complexity.AuthPermission.PermissionAuthGroupPermissions(childComplexity), true

	case "AuthPermission.permissionAuthUserUserPermissions":
		if e.complexity.AuthPermission.PermissionAuthUserUserPermissions == nil {
			break
		}

		return e.complexity.AuthPermission.PermissionAuthUserUserPermissions(childComplexity), true

	case "AuthPermissionConnection.edges":
		if e.complexity.AuthPermissionConnection.Edges == nil {
			break
		}

		return e.complexity.AuthPermissionConnection.Edges(childComplexity), true

	case "AuthPermissionConnection.pageInfo":
		if e.complexity.AuthPermissionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthPermissionConnection.PageInfo(childComplexity), true

	case "AuthPermissionDeletePayload.id":
		if e.complexity.AuthPermissionDeletePayload.ID == nil {
			break
		}

		return e.complexity.AuthPermissionDeletePayload.ID(childComplexity), true

	case "AuthPermissionEdge.cursor":
		if e.complexity.AuthPermissionEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthPermissionEdge.Cursor(childComplexity), true

	case "AuthPermissionEdge.node":
		if e.complexity.AuthPermissionEdge.Node == nil {
			break
		}

		return e.complexity.AuthPermissionEdge.Node(childComplexity), true

	case "AuthPermissionPayload.authPermission":
		if e.complexity.AuthPermissionPayload.AuthPermission == nil {
			break
		}

		return e.complexity.AuthPermissionPayload.AuthPermission(childComplexity), true

	case "AuthPermissionsDeletePayload.ids":
		if e.complexity.AuthPermissionsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AuthPermissionsDeletePayload.Ids(childComplexity), true

	case "AuthPermissionsUpdatePayload.ok":
		if e.complexity.AuthPermissionsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AuthPermissionsUpdatePayload.Ok(childComplexity), true

	case "AuthUser.dateJoined":
		if e.complexity.AuthUser.DateJoined == nil {
			break
		}

		return e.complexity.AuthUser.DateJoined(childComplexity), true

	case "AuthUser.email":
		if e.complexity.AuthUser.Email == nil {
			break
		}

		return e.complexity.AuthUser.Email(childComplexity), true

	case "AuthUser.firstName":
		if e.complexity.AuthUser.FirstName == nil {
			break
		}

		return e.complexity.AuthUser.FirstName(childComplexity), true

	case "AuthUser.id":
		if e.complexity.AuthUser.ID == nil {
			break
		}

		return e.complexity.AuthUser.ID(childComplexity), true

	case "AuthUser.isActive":
		if e.complexity.AuthUser.IsActive == nil {
			break
		}

		return e.complexity.AuthUser.IsActive(childComplexity), true

	case "AuthUser.isStaff":
		if e.complexity.AuthUser.IsStaff == nil {
			break
		}

		return e.complexity.AuthUser.IsStaff(childComplexity), true

	case "AuthUser.isSuperuser":
		if e.complexity.AuthUser.IsSuperuser == nil {
			break
		}

		return e.complexity.AuthUser.IsSuperuser(childComplexity), true

	case "AuthUser.lastLogin":
		if e.complexity.AuthUser.LastLogin == nil {
			break
		}

		return e.complexity.AuthUser.LastLogin(childComplexity), true

	case "AuthUser.lastName":
		if e.complexity.AuthUser.LastName == nil {
			break
		}

		return e.complexity.AuthUser.LastName(childComplexity), true

	case "AuthUser.password":
		if e.complexity.AuthUser.Password == nil {
			break
		}

		return e.complexity.AuthUser.Password(childComplexity), true

	case "AuthUser.userAuthUserGroups":
		if e.complexity.AuthUser.UserAuthUserGroups == nil {
			break
		}

		return e.complexity.AuthUser.UserAuthUserGroups(childComplexity), true

	case "AuthUser.userAuthUserUserPermissions":
		if e.complexity.AuthUser.UserAuthUserUserPermissions == nil {
			break
		}

		return e.complexity.AuthUser.UserAuthUserUserPermissions(childComplexity), true

	case "AuthUser.username":
		if e.complexity.AuthUser.Username == nil {
			break
		}

		return e.complexity.AuthUser.Username(childComplexity), true

	case "AuthUserConnection.edges":
		if e.complexity.AuthUserConnection.Edges == nil {
			break
		}

		return e.complexity.AuthUserConnection.Edges(childComplexity), true

	case "AuthUserConnection.pageInfo":
		if e.complexity.AuthUserConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthUserConnection.PageInfo(childComplexity), true

	case "AuthUserDeletePayload.id":
		if e.complexity.AuthUserDeletePayload.ID == nil {
			break
		}

		return e.complexity.AuthUserDeletePayload.ID(childComplexity), true

	case "AuthUserEdge.cursor":
		if e.complexity.AuthUserEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthUserEdge.Cursor(childComplexity), true

	case "AuthUserEdge.node":
		if e.complexity.AuthUserEdge.Node == nil {
			break
		}

		return e.complexity.AuthUserEdge.Node(childComplexity), true

	case "AuthUserGroup.group":
		if e.complexity.AuthUserGroup.Group == nil {
			break
		}

		return e.complexity.AuthUserGroup.Group(childComplexity), true

	case "AuthUserGroup.id":
		if e.complexity.AuthUserGroup.ID == nil {
			break
		}

		return e.complexity.AuthUserGroup.ID(childComplexity), true

	case "AuthUserGroup.user":
		if e.complexity.AuthUserGroup.User == nil {
			break
		}

		return e.complexity.AuthUserGroup.User(childComplexity), true

	case "AuthUserGroupConnection.edges":
		if e.complexity.AuthUserGroupConnection.Edges == nil {
			break
		}

		return e.complexity.AuthUserGroupConnection.Edges(childComplexity), true

	case "AuthUserGroupConnection.pageInfo":
		if e.complexity.AuthUserGroupConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthUserGroupConnection.PageInfo(childComplexity), true

	case "AuthUserGroupDeletePayload.id":
		if e.complexity.AuthUserGroupDeletePayload.ID == nil {
			break
		}

		return e.complexity.AuthUserGroupDeletePayload.ID(childComplexity), true

	case "AuthUserGroupEdge.cursor":
		if e.complexity.AuthUserGroupEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthUserGroupEdge.Cursor(childComplexity), true

	case "AuthUserGroupEdge.node":
		if e.complexity.AuthUserGroupEdge.Node == nil {
			break
		}

		return e.complexity.AuthUserGroupEdge.Node(childComplexity), true

	case "AuthUserGroupPayload.authUserGroup":
		if e.complexity.AuthUserGroupPayload.AuthUserGroup == nil {
			break
		}

		return e.complexity.AuthUserGroupPayload.AuthUserGroup(childComplexity), true

	case "AuthUserGroupsDeletePayload.ids":
		if e.complexity.AuthUserGroupsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AuthUserGroupsDeletePayload.Ids(childComplexity), true

	case "AuthUserGroupsUpdatePayload.ok":
		if e.complexity.AuthUserGroupsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AuthUserGroupsUpdatePayload.Ok(childComplexity), true

	case "AuthUserPayload.authUser":
		if e.complexity.AuthUserPayload.AuthUser == nil {
			break
		}

		return e.complexity.AuthUserPayload.AuthUser(childComplexity), true

	case "AuthUserUserPermission.id":
		if e.complexity.AuthUserUserPermission.ID == nil {
			break
		}

		return e.complexity.AuthUserUserPermission.ID(childComplexity), true

	case "AuthUserUserPermission.permission":
		if e.complexity.AuthUserUserPermission.Permission == nil {
			break
		}

		return e.complexity.AuthUserUserPermission.Permission(childComplexity), true

	case "AuthUserUserPermission.user":
		if e.complexity.AuthUserUserPermission.User == nil {
			break
		}

		return e.complexity.AuthUserUserPermission.User(childComplexity), true

	case "AuthUserUserPermissionConnection.edges":
		if e.complexity.AuthUserUserPermissionConnection.Edges == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionConnection.Edges(childComplexity), true

	case "AuthUserUserPermissionConnection.pageInfo":
		if e.complexity.AuthUserUserPermissionConnection.PageInfo == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionConnection.PageInfo(childComplexity), true

	case "AuthUserUserPermissionDeletePayload.id":
		if e.complexity.AuthUserUserPermissionDeletePayload.ID == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionDeletePayload.ID(childComplexity), true

	case "AuthUserUserPermissionEdge.cursor":
		if e.complexity.AuthUserUserPermissionEdge.Cursor == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionEdge.Cursor(childComplexity), true

	case "AuthUserUserPermissionEdge.node":
		if e.complexity.AuthUserUserPermissionEdge.Node == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionEdge.Node(childComplexity), true

	case "AuthUserUserPermissionPayload.authUserUserPermission":
		if e.complexity.AuthUserUserPermissionPayload.AuthUserUserPermission == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionPayload.AuthUserUserPermission(childComplexity), true

	case "AuthUserUserPermissionsDeletePayload.ids":
		if e.complexity.AuthUserUserPermissionsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionsDeletePayload.Ids(childComplexity), true

	case "AuthUserUserPermissionsUpdatePayload.ok":
		if e.complexity.AuthUserUserPermissionsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AuthUserUserPermissionsUpdatePayload.Ok(childComplexity), true

	case "AuthUsersDeletePayload.ids":
		if e.complexity.AuthUsersDeletePayload.Ids == nil {
			break
		}

		return e.complexity.AuthUsersDeletePayload.Ids(childComplexity), true

	case "AuthUsersUpdatePayload.ok":
		if e.complexity.AuthUsersUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.AuthUsersUpdatePayload.Ok(childComplexity), true

	case "Fragrance.createdAt":
		if e.complexity.Fragrance.CreatedAt == nil {
			break
		}

		return e.complexity.Fragrance.CreatedAt(childComplexity), true

	case "Fragrance.deletedAt":
		if e.complexity.Fragrance.DeletedAt == nil {
			break
		}

		return e.complexity.Fragrance.DeletedAt(childComplexity), true

	case "Fragrance.fragranceInventories":
		if e.complexity.Fragrance.FragranceInventories == nil {
			break
		}

		return e.complexity.Fragrance.FragranceInventories(childComplexity), true

	case "Fragrance.id":
		if e.complexity.Fragrance.ID == nil {
			break
		}

		return e.complexity.Fragrance.ID(childComplexity), true

	case "Fragrance.name":
		if e.complexity.Fragrance.Name == nil {
			break
		}

		return e.complexity.Fragrance.Name(childComplexity), true

	case "Fragrance.note":
		if e.complexity.Fragrance.Note == nil {
			break
		}

		return e.complexity.Fragrance.Note(childComplexity), true

	case "Fragrance.recipeBatchFragrance":
		if e.complexity.Fragrance.RecipeBatchFragrance == nil {
			break
		}

		return e.complexity.Fragrance.RecipeBatchFragrance(childComplexity), true

	case "Fragrance.recipeFragrance":
		if e.complexity.Fragrance.RecipeFragrance == nil {
			break
		}

		return e.complexity.Fragrance.RecipeFragrance(childComplexity), true

	case "Fragrance.updatedAt":
		if e.complexity.Fragrance.UpdatedAt == nil {
			break
		}

		return e.complexity.Fragrance.UpdatedAt(childComplexity), true

	case "FragranceConnection.edges":
		if e.complexity.FragranceConnection.Edges == nil {
			break
		}

		return e.complexity.FragranceConnection.Edges(childComplexity), true

	case "FragranceConnection.pageInfo":
		if e.complexity.FragranceConnection.PageInfo == nil {
			break
		}

		return e.complexity.FragranceConnection.PageInfo(childComplexity), true

	case "FragranceDeletePayload.id":
		if e.complexity.FragranceDeletePayload.ID == nil {
			break
		}

		return e.complexity.FragranceDeletePayload.ID(childComplexity), true

	case "FragranceEdge.cursor":
		if e.complexity.FragranceEdge.Cursor == nil {
			break
		}

		return e.complexity.FragranceEdge.Cursor(childComplexity), true

	case "FragranceEdge.node":
		if e.complexity.FragranceEdge.Node == nil {
			break
		}

		return e.complexity.FragranceEdge.Node(childComplexity), true

	case "FragranceInventoriesDeletePayload.ids":
		if e.complexity.FragranceInventoriesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.FragranceInventoriesDeletePayload.Ids(childComplexity), true

	case "FragranceInventoriesUpdatePayload.ok":
		if e.complexity.FragranceInventoriesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.FragranceInventoriesUpdatePayload.Ok(childComplexity), true

	case "FragranceInventory.cost":
		if e.complexity.FragranceInventory.Cost == nil {
			break
		}

		return e.complexity.FragranceInventory.Cost(childComplexity), true

	case "FragranceInventory.createdAt":
		if e.complexity.FragranceInventory.CreatedAt == nil {
			break
		}

		return e.complexity.FragranceInventory.CreatedAt(childComplexity), true

	case "FragranceInventory.deletedAt":
		if e.complexity.FragranceInventory.DeletedAt == nil {
			break
		}

		return e.complexity.FragranceInventory.DeletedAt(childComplexity), true

	case "FragranceInventory.expiryDate":
		if e.complexity.FragranceInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.FragranceInventory.ExpiryDate(childComplexity), true

	case "FragranceInventory.fragrance":
		if e.complexity.FragranceInventory.Fragrance == nil {
			break
		}

		return e.complexity.FragranceInventory.Fragrance(childComplexity), true

	case "FragranceInventory.id":
		if e.complexity.FragranceInventory.ID == nil {
			break
		}

		return e.complexity.FragranceInventory.ID(childComplexity), true

	case "FragranceInventory.purchaseDate":
		if e.complexity.FragranceInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.FragranceInventory.PurchaseDate(childComplexity), true

	case "FragranceInventory.supplier":
		if e.complexity.FragranceInventory.Supplier == nil {
			break
		}

		return e.complexity.FragranceInventory.Supplier(childComplexity), true

	case "FragranceInventory.updatedAt":
		if e.complexity.FragranceInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.FragranceInventory.UpdatedAt(childComplexity), true

	case "FragranceInventory.weight":
		if e.complexity.FragranceInventory.Weight == nil {
			break
		}

		return e.complexity.FragranceInventory.Weight(childComplexity), true

	case "FragranceInventoryConnection.edges":
		if e.complexity.FragranceInventoryConnection.Edges == nil {
			break
		}

		return e.complexity.FragranceInventoryConnection.Edges(childComplexity), true

	case "FragranceInventoryConnection.pageInfo":
		if e.complexity.FragranceInventoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.FragranceInventoryConnection.PageInfo(childComplexity), true

	case "FragranceInventoryDeletePayload.id":
		if e.complexity.FragranceInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.FragranceInventoryDeletePayload.ID(childComplexity), true

	case "FragranceInventoryEdge.cursor":
		if e.complexity.FragranceInventoryEdge.Cursor == nil {
			break
		}

		return e.complexity.FragranceInventoryEdge.Cursor(childComplexity), true

	case "FragranceInventoryEdge.node":
		if e.complexity.FragranceInventoryEdge.Node == nil {
			break
		}

		return e.complexity.FragranceInventoryEdge.Node(childComplexity), true

	case "FragranceInventoryPayload.fragranceInventory":
		if e.complexity.FragranceInventoryPayload.FragranceInventory == nil {
			break
		}

		return e.complexity.FragranceInventoryPayload.FragranceInventory(childComplexity), true

	case "FragrancePayload.fragrance":
		if e.complexity.FragrancePayload.Fragrance == nil {
			break
		}

		return e.complexity.FragrancePayload.Fragrance(childComplexity), true

	case "FragrancesDeletePayload.ids":
		if e.complexity.FragrancesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.FragrancesDeletePayload.Ids(childComplexity), true

	case "FragrancesUpdatePayload.ok":
		if e.complexity.FragrancesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.FragrancesUpdatePayload.Ok(childComplexity), true

	case "Lipid.bubbly":
		if e.complexity.Lipid.Bubbly == nil {
			break
		}

		return e.complexity.Lipid.Bubbly(childComplexity), true

	case "Lipid.cleansing":
		if e.complexity.Lipid.Cleansing == nil {
			break
		}

		return e.complexity.Lipid.Cleansing(childComplexity), true

	case "Lipid.conditioning":
		if e.complexity.Lipid.Conditioning == nil {
			break
		}

		return e.complexity.Lipid.Conditioning(childComplexity), true

	case "Lipid.creamy":
		if e.complexity.Lipid.Creamy == nil {
			break
		}

		return e.complexity.Lipid.Creamy(childComplexity), true

	case "Lipid.createdAt":
		if e.complexity.Lipid.CreatedAt == nil {
			break
		}

		return e.complexity.Lipid.CreatedAt(childComplexity), true

	case "Lipid.deletedAt":
		if e.complexity.Lipid.DeletedAt == nil {
			break
		}

		return e.complexity.Lipid.DeletedAt(childComplexity), true

	case "Lipid.family":
		if e.complexity.Lipid.Family == nil {
			break
		}

		return e.complexity.Lipid.Family(childComplexity), true

	case "Lipid.hardness":
		if e.complexity.Lipid.Hardness == nil {
			break
		}

		return e.complexity.Lipid.Hardness(childComplexity), true

	case "Lipid.id":
		if e.complexity.Lipid.ID == nil {
			break
		}

		return e.complexity.Lipid.ID(childComplexity), true

	case "Lipid.inciName":
		if e.complexity.Lipid.InciName == nil {
			break
		}

		return e.complexity.Lipid.InciName(childComplexity), true

	case "Lipid.ins":
		if e.complexity.Lipid.Ins == nil {
			break
		}

		return e.complexity.Lipid.Ins(childComplexity), true

	case "Lipid.iodine":
		if e.complexity.Lipid.Iodine == nil {
			break
		}

		return e.complexity.Lipid.Iodine(childComplexity), true

	case "Lipid.lauric":
		if e.complexity.Lipid.Lauric == nil {
			break
		}

		return e.complexity.Lipid.Lauric(childComplexity), true

	case "Lipid.linoleic":
		if e.complexity.Lipid.Linoleic == nil {
			break
		}

		return e.complexity.Lipid.Linoleic(childComplexity), true

	case "Lipid.linolenic":
		if e.complexity.Lipid.Linolenic == nil {
			break
		}

		return e.complexity.Lipid.Linolenic(childComplexity), true

	case "Lipid.lipidInventories":
		if e.complexity.Lipid.LipidInventories == nil {
			break
		}

		return e.complexity.Lipid.LipidInventories(childComplexity), true

	case "Lipid.myristic":
		if e.complexity.Lipid.Myristic == nil {
			break
		}

		return e.complexity.Lipid.Myristic(childComplexity), true

	case "Lipid.name":
		if e.complexity.Lipid.Name == nil {
			break
		}

		return e.complexity.Lipid.Name(childComplexity), true

	case "Lipid.naoh":
		if e.complexity.Lipid.Naoh == nil {
			break
		}

		return e.complexity.Lipid.Naoh(childComplexity), true

	case "Lipid.oleic":
		if e.complexity.Lipid.Oleic == nil {
			break
		}

		return e.complexity.Lipid.Oleic(childComplexity), true

	case "Lipid.palmitic":
		if e.complexity.Lipid.Palmitic == nil {
			break
		}

		return e.complexity.Lipid.Palmitic(childComplexity), true

	case "Lipid.recipeBatchLipid":
		if e.complexity.Lipid.RecipeBatchLipid == nil {
			break
		}

		return e.complexity.Lipid.RecipeBatchLipid(childComplexity), true

	case "Lipid.recipeLipid":
		if e.complexity.Lipid.RecipeLipid == nil {
			break
		}

		return e.complexity.Lipid.RecipeLipid(childComplexity), true

	case "Lipid.ricinoleic":
		if e.complexity.Lipid.Ricinoleic == nil {
			break
		}

		return e.complexity.Lipid.Ricinoleic(childComplexity), true

	case "Lipid.stearic":
		if e.complexity.Lipid.Stearic == nil {
			break
		}

		return e.complexity.Lipid.Stearic(childComplexity), true

	case "Lipid.updatedAt":
		if e.complexity.Lipid.UpdatedAt == nil {
			break
		}

		return e.complexity.Lipid.UpdatedAt(childComplexity), true

	case "LipidConnection.edges":
		if e.complexity.LipidConnection.Edges == nil {
			break
		}

		return e.complexity.LipidConnection.Edges(childComplexity), true

	case "LipidConnection.pageInfo":
		if e.complexity.LipidConnection.PageInfo == nil {
			break
		}

		return e.complexity.LipidConnection.PageInfo(childComplexity), true

	case "LipidDeletePayload.id":
		if e.complexity.LipidDeletePayload.ID == nil {
			break
		}

		return e.complexity.LipidDeletePayload.ID(childComplexity), true

	case "LipidEdge.cursor":
		if e.complexity.LipidEdge.Cursor == nil {
			break
		}

		return e.complexity.LipidEdge.Cursor(childComplexity), true

	case "LipidEdge.node":
		if e.complexity.LipidEdge.Node == nil {
			break
		}

		return e.complexity.LipidEdge.Node(childComplexity), true

	case "LipidInventoriesDeletePayload.ids":
		if e.complexity.LipidInventoriesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.LipidInventoriesDeletePayload.Ids(childComplexity), true

	case "LipidInventoriesUpdatePayload.ok":
		if e.complexity.LipidInventoriesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.LipidInventoriesUpdatePayload.Ok(childComplexity), true

	case "LipidInventory.cost":
		if e.complexity.LipidInventory.Cost == nil {
			break
		}

		return e.complexity.LipidInventory.Cost(childComplexity), true

	case "LipidInventory.createdAt":
		if e.complexity.LipidInventory.CreatedAt == nil {
			break
		}

		return e.complexity.LipidInventory.CreatedAt(childComplexity), true

	case "LipidInventory.deletedAt":
		if e.complexity.LipidInventory.DeletedAt == nil {
			break
		}

		return e.complexity.LipidInventory.DeletedAt(childComplexity), true

	case "LipidInventory.expiryDate":
		if e.complexity.LipidInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.LipidInventory.ExpiryDate(childComplexity), true

	case "LipidInventory.gramsPerLiter":
		if e.complexity.LipidInventory.GramsPerLiter == nil {
			break
		}

		return e.complexity.LipidInventory.GramsPerLiter(childComplexity), true

	case "LipidInventory.id":
		if e.complexity.LipidInventory.ID == nil {
			break
		}

		return e.complexity.LipidInventory.ID(childComplexity), true

	case "LipidInventory.koh":
		if e.complexity.LipidInventory.Koh == nil {
			break
		}

		return e.complexity.LipidInventory.Koh(childComplexity), true

	case "LipidInventory.lipid":
		if e.complexity.LipidInventory.Lipid == nil {
			break
		}

		return e.complexity.LipidInventory.Lipid(childComplexity), true

	case "LipidInventory.naoh":
		if e.complexity.LipidInventory.Naoh == nil {
			break
		}

		return e.complexity.LipidInventory.Naoh(childComplexity), true

	case "LipidInventory.purchaseDate":
		if e.complexity.LipidInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.LipidInventory.PurchaseDate(childComplexity), true

	case "LipidInventory.sap":
		if e.complexity.LipidInventory.Sap == nil {
			break
		}

		return e.complexity.LipidInventory.Sap(childComplexity), true

	case "LipidInventory.supplier":
		if e.complexity.LipidInventory.Supplier == nil {
			break
		}

		return e.complexity.LipidInventory.Supplier(childComplexity), true

	case "LipidInventory.updatedAt":
		if e.complexity.LipidInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.LipidInventory.UpdatedAt(childComplexity), true

	case "LipidInventory.weight":
		if e.complexity.LipidInventory.Weight == nil {
			break
		}

		return e.complexity.LipidInventory.Weight(childComplexity), true

	case "LipidInventoryConnection.edges":
		if e.complexity.LipidInventoryConnection.Edges == nil {
			break
		}

		return e.complexity.LipidInventoryConnection.Edges(childComplexity), true

	case "LipidInventoryConnection.pageInfo":
		if e.complexity.LipidInventoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.LipidInventoryConnection.PageInfo(childComplexity), true

	case "LipidInventoryDeletePayload.id":
		if e.complexity.LipidInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.LipidInventoryDeletePayload.ID(childComplexity), true

	case "LipidInventoryEdge.cursor":
		if e.complexity.LipidInventoryEdge.Cursor == nil {
			break
		}

		return e.complexity.LipidInventoryEdge.Cursor(childComplexity), true

	case "LipidInventoryEdge.node":
		if e.complexity.LipidInventoryEdge.Node == nil {
			break
		}

		return e.complexity.LipidInventoryEdge.Node(childComplexity), true

	case "LipidInventoryPayload.lipidInventory":
		if e.complexity.LipidInventoryPayload.LipidInventory == nil {
			break
		}

		return e.complexity.LipidInventoryPayload.LipidInventory(childComplexity), true

	case "LipidPayload.lipid":
		if e.complexity.LipidPayload.Lipid == nil {
			break
		}

		return e.complexity.LipidPayload.Lipid(childComplexity), true

	case "LipidsDeletePayload.ids":
		if e.complexity.LipidsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.LipidsDeletePayload.Ids(childComplexity), true

	case "LipidsUpdatePayload.ok":
		if e.complexity.LipidsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.LipidsUpdatePayload.Ok(childComplexity), true

	case "Lye.createdAt":
		if e.complexity.Lye.CreatedAt == nil {
			break
		}

		return e.complexity.Lye.CreatedAt(childComplexity), true

	case "Lye.deletedAt":
		if e.complexity.Lye.DeletedAt == nil {
			break
		}

		return e.complexity.Lye.DeletedAt(childComplexity), true

	case "Lye.id":
		if e.complexity.Lye.ID == nil {
			break
		}

		return e.complexity.Lye.ID(childComplexity), true

	case "Lye.kind":
		if e.complexity.Lye.Kind == nil {
			break
		}

		return e.complexity.Lye.Kind(childComplexity), true

	case "Lye.lyeInventories":
		if e.complexity.Lye.LyeInventories == nil {
			break
		}

		return e.complexity.Lye.LyeInventories(childComplexity), true

	case "Lye.name":
		if e.complexity.Lye.Name == nil {
			break
		}

		return e.complexity.Lye.Name(childComplexity), true

	case "Lye.note":
		if e.complexity.Lye.Note == nil {
			break
		}

		return e.complexity.Lye.Note(childComplexity), true

	case "Lye.recipeBatchLye":
		if e.complexity.Lye.RecipeBatchLye == nil {
			break
		}

		return e.complexity.Lye.RecipeBatchLye(childComplexity), true

	case "Lye.updatedAt":
		if e.complexity.Lye.UpdatedAt == nil {
			break
		}

		return e.complexity.Lye.UpdatedAt(childComplexity), true

	case "LyeConnection.edges":
		if e.complexity.LyeConnection.Edges == nil {
			break
		}

		return e.complexity.LyeConnection.Edges(childComplexity), true

	case "LyeConnection.pageInfo":
		if e.complexity.LyeConnection.PageInfo == nil {
			break
		}

		return e.complexity.LyeConnection.PageInfo(childComplexity), true

	case "LyeDeletePayload.id":
		if e.complexity.LyeDeletePayload.ID == nil {
			break
		}

		return e.complexity.LyeDeletePayload.ID(childComplexity), true

	case "LyeEdge.cursor":
		if e.complexity.LyeEdge.Cursor == nil {
			break
		}

		return e.complexity.LyeEdge.Cursor(childComplexity), true

	case "LyeEdge.node":
		if e.complexity.LyeEdge.Node == nil {
			break
		}

		return e.complexity.LyeEdge.Node(childComplexity), true

	case "LyeInventoriesDeletePayload.ids":
		if e.complexity.LyeInventoriesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.LyeInventoriesDeletePayload.Ids(childComplexity), true

	case "LyeInventoriesUpdatePayload.ok":
		if e.complexity.LyeInventoriesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.LyeInventoriesUpdatePayload.Ok(childComplexity), true

	case "LyeInventory.concentration":
		if e.complexity.LyeInventory.Concentration == nil {
			break
		}

		return e.complexity.LyeInventory.Concentration(childComplexity), true

	case "LyeInventory.cost":
		if e.complexity.LyeInventory.Cost == nil {
			break
		}

		return e.complexity.LyeInventory.Cost(childComplexity), true

	case "LyeInventory.createdAt":
		if e.complexity.LyeInventory.CreatedAt == nil {
			break
		}

		return e.complexity.LyeInventory.CreatedAt(childComplexity), true

	case "LyeInventory.deletedAt":
		if e.complexity.LyeInventory.DeletedAt == nil {
			break
		}

		return e.complexity.LyeInventory.DeletedAt(childComplexity), true

	case "LyeInventory.expiryDate":
		if e.complexity.LyeInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.LyeInventory.ExpiryDate(childComplexity), true

	case "LyeInventory.id":
		if e.complexity.LyeInventory.ID == nil {
			break
		}

		return e.complexity.LyeInventory.ID(childComplexity), true

	case "LyeInventory.lye":
		if e.complexity.LyeInventory.Lye == nil {
			break
		}

		return e.complexity.LyeInventory.Lye(childComplexity), true

	case "LyeInventory.purchaseDate":
		if e.complexity.LyeInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.LyeInventory.PurchaseDate(childComplexity), true

	case "LyeInventory.supplier":
		if e.complexity.LyeInventory.Supplier == nil {
			break
		}

		return e.complexity.LyeInventory.Supplier(childComplexity), true

	case "LyeInventory.updatedAt":
		if e.complexity.LyeInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.LyeInventory.UpdatedAt(childComplexity), true

	case "LyeInventory.weight":
		if e.complexity.LyeInventory.Weight == nil {
			break
		}

		return e.complexity.LyeInventory.Weight(childComplexity), true

	case "LyeInventoryConnection.edges":
		if e.complexity.LyeInventoryConnection.Edges == nil {
			break
		}

		return e.complexity.LyeInventoryConnection.Edges(childComplexity), true

	case "LyeInventoryConnection.pageInfo":
		if e.complexity.LyeInventoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.LyeInventoryConnection.PageInfo(childComplexity), true

	case "LyeInventoryDeletePayload.id":
		if e.complexity.LyeInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.LyeInventoryDeletePayload.ID(childComplexity), true

	case "LyeInventoryEdge.cursor":
		if e.complexity.LyeInventoryEdge.Cursor == nil {
			break
		}

		return e.complexity.LyeInventoryEdge.Cursor(childComplexity), true

	case "LyeInventoryEdge.node":
		if e.complexity.LyeInventoryEdge.Node == nil {
			break
		}

		return e.complexity.LyeInventoryEdge.Node(childComplexity), true

	case "LyeInventoryPayload.lyeInventory":
		if e.complexity.LyeInventoryPayload.LyeInventory == nil {
			break
		}

		return e.complexity.LyeInventoryPayload.LyeInventory(childComplexity), true

	case "LyePayload.lye":
		if e.complexity.LyePayload.Lye == nil {
			break
		}

		return e.complexity.LyePayload.Lye(childComplexity), true

	case "LyesDeletePayload.ids":
		if e.complexity.LyesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.LyesDeletePayload.Ids(childComplexity), true

	case "LyesUpdatePayload.ok":
		if e.complexity.LyesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.LyesUpdatePayload.Ok(childComplexity), true

	case "Mutation.createAdditive":
		if e.complexity.Mutation.CreateAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_createAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdditive(childComplexity, args["input"].(AdditiveCreateInput)), true

	case "Mutation.createAdditiveInventory":
		if e.complexity.Mutation.CreateAdditiveInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createAdditiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdditiveInventory(childComplexity, args["input"].(AdditiveInventoryCreateInput)), true

	case "Mutation.createAuthGroup":
		if e.complexity.Mutation.CreateAuthGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthGroup(childComplexity, args["input"].(AuthGroupCreateInput)), true

	case "Mutation.createAuthGroupPermission":
		if e.complexity.Mutation.CreateAuthGroupPermission == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthGroupPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthGroupPermission(childComplexity, args["input"].(AuthGroupPermissionCreateInput)), true

	case "Mutation.createAuthPermission":
		if e.complexity.Mutation.CreateAuthPermission == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthPermission(childComplexity, args["input"].(AuthPermissionCreateInput)), true

	case "Mutation.createAuthUser":
		if e.complexity.Mutation.CreateAuthUser == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthUser(childComplexity, args["input"].(AuthUserCreateInput)), true

	case "Mutation.createAuthUserGroup":
		if e.complexity.Mutation.CreateAuthUserGroup == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthUserGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthUserGroup(childComplexity, args["input"].(AuthUserGroupCreateInput)), true

	case "Mutation.createAuthUserUserPermission":
		if e.complexity.Mutation.CreateAuthUserUserPermission == nil {
			break
		}

		args, err := ec.field_Mutation_createAuthUserUserPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuthUserUserPermission(childComplexity, args["input"].(AuthUserUserPermissionCreateInput)), true

	case "Mutation.createFragrance":
		if e.complexity.Mutation.CreateFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_createFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFragrance(childComplexity, args["input"].(FragranceCreateInput)), true

	case "Mutation.createFragranceInventory":
		if e.complexity.Mutation.CreateFragranceInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createFragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFragranceInventory(childComplexity, args["input"].(FragranceInventoryCreateInput)), true

	case "Mutation.createLipid":
		if e.complexity.Mutation.CreateLipid == nil {
			break
		}

		args, err := ec.field_Mutation_createLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLipid(childComplexity, args["input"].(LipidCreateInput)), true

	case "Mutation.createLipidInventory":
		if e.complexity.Mutation.CreateLipidInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createLipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLipidInventory(childComplexity, args["input"].(LipidInventoryCreateInput)), true

	case "Mutation.createLye":
		if e.complexity.Mutation.CreateLye == nil {
			break
		}

		args, err := ec.field_Mutation_createLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLye(childComplexity, args["input"].(LyeCreateInput)), true

	case "Mutation.createLyeInventory":
		if e.complexity.Mutation.CreateLyeInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createLyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLyeInventory(childComplexity, args["input"].(LyeInventoryCreateInput)), true

	case "Mutation.createRecipe":
		if e.complexity.Mutation.CreateRecipe == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipe(childComplexity, args["input"].(RecipeCreateInput)), true

	case "Mutation.createRecipeAdditive":
		if e.complexity.Mutation.CreateRecipeAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeAdditive(childComplexity, args["input"].(RecipeAdditiveCreateInput)), true

	case "Mutation.createRecipeBatch":
		if e.complexity.Mutation.CreateRecipeBatch == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatch(childComplexity, args["input"].(RecipeBatchCreateInput)), true

	case "Mutation.createRecipeBatchAdditive":
		if e.complexity.Mutation.CreateRecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchAdditive(childComplexity, args["input"].(RecipeBatchAdditiveCreateInput)), true

	case "Mutation.createRecipeBatchFragrance":
		if e.complexity.Mutation.CreateRecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchFragrance(childComplexity, args["input"].(RecipeBatchFragranceCreateInput)), true

	case "Mutation.createRecipeBatchLipid":
		if e.complexity.Mutation.CreateRecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchLipid(childComplexity, args["input"].(RecipeBatchLipidCreateInput)), true

	case "Mutation.createRecipeBatchLye":
		if e.complexity.Mutation.CreateRecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchLye(childComplexity, args["input"].(RecipeBatchLyeCreateInput)), true

	case "Mutation.createRecipeBatchNote":
		if e.complexity.Mutation.CreateRecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchNote(childComplexity, args["input"].(RecipeBatchNoteCreateInput)), true

	case "Mutation.createRecipeFragrance":
		if e.complexity.Mutation.CreateRecipeFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeFragrance(childComplexity, args["input"].(RecipeFragranceCreateInput)), true

	case "Mutation.createRecipeLipid":
		if e.complexity.Mutation.CreateRecipeLipid == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeLipid(childComplexity, args["input"].(RecipeLipidCreateInput)), true

	case "Mutation.createRecipeStep":
		if e.complexity.Mutation.CreateRecipeStep == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeStep(childComplexity, args["input"].(RecipeStepCreateInput)), true

	case "Mutation.createSupplier":
		if e.complexity.Mutation.CreateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_createSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSupplier(childComplexity, args["input"].(SupplierCreateInput)), true

	case "Mutation.deleteAdditive":
		if e.complexity.Mutation.DeleteAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdditive(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAdditiveInventories":
		if e.complexity.Mutation.DeleteAdditiveInventories == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdditiveInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdditiveInventories(childComplexity, args["filter"].(*AdditiveInventoryFilter)), true

	case "Mutation.deleteAdditiveInventory":
		if e.complexity.Mutation.DeleteAdditiveInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdditiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdditiveInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAdditives":
		if e.complexity.Mutation.DeleteAdditives == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdditives(childComplexity, args["filter"].(*AdditiveFilter)), true

	case "Mutation.deleteAuthGroup":
		if e.complexity.Mutation.DeleteAuthGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthGroup(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAuthGroupPermission":
		if e.complexity.Mutation.DeleteAuthGroupPermission == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthGroupPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthGroupPermission(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAuthGroupPermissions":
		if e.complexity.Mutation.DeleteAuthGroupPermissions == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthGroupPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthGroupPermissions(childComplexity, args["filter"].(*AuthGroupPermissionFilter)), true

	case "Mutation.deleteAuthGroups":
		if e.complexity.Mutation.DeleteAuthGroups == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthGroups(childComplexity, args["filter"].(*AuthGroupFilter)), true

	case "Mutation.deleteAuthPermission":
		if e.complexity.Mutation.DeleteAuthPermission == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthPermission(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAuthPermissions":
		if e.complexity.Mutation.DeleteAuthPermissions == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthPermissions(childComplexity, args["filter"].(*AuthPermissionFilter)), true

	case "Mutation.deleteAuthUser":
		if e.complexity.Mutation.DeleteAuthUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthUser(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAuthUserGroup":
		if e.complexity.Mutation.DeleteAuthUserGroup == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthUserGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthUserGroup(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAuthUserGroups":
		if e.complexity.Mutation.DeleteAuthUserGroups == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthUserGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthUserGroups(childComplexity, args["filter"].(*AuthUserGroupFilter)), true

	case "Mutation.deleteAuthUserUserPermission":
		if e.complexity.Mutation.DeleteAuthUserUserPermission == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthUserUserPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthUserUserPermission(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAuthUserUserPermissions":
		if e.complexity.Mutation.DeleteAuthUserUserPermissions == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthUserUserPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthUserUserPermissions(childComplexity, args["filter"].(*AuthUserUserPermissionFilter)), true

	case "Mutation.deleteAuthUsers":
		if e.complexity.Mutation.DeleteAuthUsers == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAuthUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAuthUsers(childComplexity, args["filter"].(*AuthUserFilter)), true

	case "Mutation.deleteFragrance":
		if e.complexity.Mutation.DeleteFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFragrance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFragranceInventories":
		if e.complexity.Mutation.DeleteFragranceInventories == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFragranceInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFragranceInventories(childComplexity, args["filter"].(*FragranceInventoryFilter)), true

	case "Mutation.deleteFragranceInventory":
		if e.complexity.Mutation.DeleteFragranceInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFragranceInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFragrances":
		if e.complexity.Mutation.DeleteFragrances == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFragrances(childComplexity, args["filter"].(*FragranceFilter)), true

	case "Mutation.deleteLipid":
		if e.complexity.Mutation.DeleteLipid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLipid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLipidInventories":
		if e.complexity.Mutation.DeleteLipidInventories == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLipidInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLipidInventories(childComplexity, args["filter"].(*LipidInventoryFilter)), true

	case "Mutation.deleteLipidInventory":
		if e.complexity.Mutation.DeleteLipidInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLipidInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLipids":
		if e.complexity.Mutation.DeleteLipids == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLipids(childComplexity, args["filter"].(*LipidFilter)), true

	case "Mutation.deleteLye":
		if e.complexity.Mutation.DeleteLye == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLye(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLyeInventories":
		if e.complexity.Mutation.DeleteLyeInventories == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLyeInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLyeInventories(childComplexity, args["filter"].(*LyeInventoryFilter)), true

	case "Mutation.deleteLyeInventory":
		if e.complexity.Mutation.DeleteLyeInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLyeInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLyes":
		if e.complexity.Mutation.DeleteLyes == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLyes(childComplexity, args["filter"].(*LyeFilter)), true

	case "Mutation.deleteRecipe":
		if e.complexity.Mutation.DeleteRecipe == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipe(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeAdditive":
		if e.complexity.Mutation.DeleteRecipeAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeAdditive(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeAdditives":
		if e.complexity.Mutation.DeleteRecipeAdditives == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeAdditives(childComplexity, args["filter"].(*RecipeAdditiveFilter)), true

	case "Mutation.deleteRecipeBatch":
		if e.complexity.Mutation.DeleteRecipeBatch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatch(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchAdditive":
		if e.complexity.Mutation.DeleteRecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchAdditive(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchAdditives":
		if e.complexity.Mutation.DeleteRecipeBatchAdditives == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchAdditives(childComplexity, args["filter"].(*RecipeBatchAdditiveFilter)), true

	case "Mutation.deleteRecipeBatchFragrance":
		if e.complexity.Mutation.DeleteRecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchFragrance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchFragrances":
		if e.complexity.Mutation.DeleteRecipeBatchFragrances == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchFragrances(childComplexity, args["filter"].(*RecipeBatchFragranceFilter)), true

	case "Mutation.deleteRecipeBatchLipid":
		if e.complexity.Mutation.DeleteRecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchLipid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchLipids":
		if e.complexity.Mutation.DeleteRecipeBatchLipids == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchLipids(childComplexity, args["filter"].(*RecipeBatchLipidFilter)), true

	case "Mutation.deleteRecipeBatchLye":
		if e.complexity.Mutation.DeleteRecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchLye(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchLyes":
		if e.complexity.Mutation.DeleteRecipeBatchLyes == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchLyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchLyes(childComplexity, args["filter"].(*RecipeBatchLyeFilter)), true

	case "Mutation.deleteRecipeBatchNote":
		if e.complexity.Mutation.DeleteRecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchNote(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchNotes":
		if e.complexity.Mutation.DeleteRecipeBatchNotes == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchNotes(childComplexity, args["filter"].(*RecipeBatchNoteFilter)), true

	case "Mutation.deleteRecipeBatches":
		if e.complexity.Mutation.DeleteRecipeBatches == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatches(childComplexity, args["filter"].(*RecipeBatchFilter)), true

	case "Mutation.deleteRecipeFragrance":
		if e.complexity.Mutation.DeleteRecipeFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeFragrance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeFragrances":
		if e.complexity.Mutation.DeleteRecipeFragrances == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeFragrances(childComplexity, args["filter"].(*RecipeFragranceFilter)), true

	case "Mutation.deleteRecipeLipid":
		if e.complexity.Mutation.DeleteRecipeLipid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeLipid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeLipids":
		if e.complexity.Mutation.DeleteRecipeLipids == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeLipids(childComplexity, args["filter"].(*RecipeLipidFilter)), true

	case "Mutation.deleteRecipeStep":
		if e.complexity.Mutation.DeleteRecipeStep == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeStep(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeSteps":
		if e.complexity.Mutation.DeleteRecipeSteps == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeSteps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeSteps(childComplexity, args["filter"].(*RecipeStepFilter)), true

	case "Mutation.deleteRecipes":
		if e.complexity.Mutation.DeleteRecipes == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipes(childComplexity, args["filter"].(*RecipeFilter)), true

	case "Mutation.deleteSupplier":
		if e.complexity.Mutation.DeleteSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSupplier(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSuppliers":
		if e.complexity.Mutation.DeleteSuppliers == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSuppliers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSuppliers(childComplexity, args["filter"].(*SupplierFilter)), true

	case "Mutation.updateAdditive":
		if e.complexity.Mutation.UpdateAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdditive(childComplexity, args["id"].(string), args["input"].(AdditiveUpdateInput)), true

	case "Mutation.updateAdditiveInventories":
		if e.complexity.Mutation.UpdateAdditiveInventories == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdditiveInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdditiveInventories(childComplexity, args["filter"].(*AdditiveInventoryFilter), args["input"].(AdditiveInventoryUpdateInput)), true

	case "Mutation.updateAdditiveInventory":
		if e.complexity.Mutation.UpdateAdditiveInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdditiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdditiveInventory(childComplexity, args["id"].(string), args["input"].(AdditiveInventoryUpdateInput)), true

	case "Mutation.updateAdditives":
		if e.complexity.Mutation.UpdateAdditives == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdditives(childComplexity, args["filter"].(*AdditiveFilter), args["input"].(AdditiveUpdateInput)), true

	case "Mutation.updateAuthGroup":
		if e.complexity.Mutation.UpdateAuthGroup == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthGroup(childComplexity, args["id"].(string), args["input"].(AuthGroupUpdateInput)), true

	case "Mutation.updateAuthGroupPermission":
		if e.complexity.Mutation.UpdateAuthGroupPermission == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthGroupPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthGroupPermission(childComplexity, args["id"].(string), args["input"].(AuthGroupPermissionUpdateInput)), true

	case "Mutation.updateAuthGroupPermissions":
		if e.complexity.Mutation.UpdateAuthGroupPermissions == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthGroupPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthGroupPermissions(childComplexity, args["filter"].(*AuthGroupPermissionFilter), args["input"].(AuthGroupPermissionUpdateInput)), true

	case "Mutation.updateAuthGroups":
		if e.complexity.Mutation.UpdateAuthGroups == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthGroups(childComplexity, args["filter"].(*AuthGroupFilter), args["input"].(AuthGroupUpdateInput)), true

	case "Mutation.updateAuthPermission":
		if e.complexity.Mutation.UpdateAuthPermission == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthPermission(childComplexity, args["id"].(string), args["input"].(AuthPermissionUpdateInput)), true

	case "Mutation.updateAuthPermissions":
		if e.complexity.Mutation.UpdateAuthPermissions == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthPermissions(childComplexity, args["filter"].(*AuthPermissionFilter), args["input"].(AuthPermissionUpdateInput)), true

	case "Mutation.updateAuthUser":
		if e.complexity.Mutation.UpdateAuthUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthUser(childComplexity, args["id"].(string), args["input"].(AuthUserUpdateInput)), true

	case "Mutation.updateAuthUserGroup":
		if e.complexity.Mutation.UpdateAuthUserGroup == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthUserGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthUserGroup(childComplexity, args["id"].(string), args["input"].(AuthUserGroupUpdateInput)), true

	case "Mutation.updateAuthUserGroups":
		if e.complexity.Mutation.UpdateAuthUserGroups == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthUserGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthUserGroups(childComplexity, args["filter"].(*AuthUserGroupFilter), args["input"].(AuthUserGroupUpdateInput)), true

	case "Mutation.updateAuthUserUserPermission":
		if e.complexity.Mutation.UpdateAuthUserUserPermission == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthUserUserPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthUserUserPermission(childComplexity, args["id"].(string), args["input"].(AuthUserUserPermissionUpdateInput)), true

	case "Mutation.updateAuthUserUserPermissions":
		if e.complexity.Mutation.UpdateAuthUserUserPermissions == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthUserUserPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthUserUserPermissions(childComplexity, args["filter"].(*AuthUserUserPermissionFilter), args["input"].(AuthUserUserPermissionUpdateInput)), true

	case "Mutation.updateAuthUsers":
		if e.complexity.Mutation.UpdateAuthUsers == nil {
			break
		}

		args, err := ec.field_Mutation_updateAuthUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAuthUsers(childComplexity, args["filter"].(*AuthUserFilter), args["input"].(AuthUserUpdateInput)), true

	case "Mutation.updateFragrance":
		if e.complexity.Mutation.UpdateFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_updateFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFragrance(childComplexity, args["id"].(string), args["input"].(FragranceUpdateInput)), true

	case "Mutation.updateFragranceInventories":
		if e.complexity.Mutation.UpdateFragranceInventories == nil {
			break
		}

		args, err := ec.field_Mutation_updateFragranceInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFragranceInventories(childComplexity, args["filter"].(*FragranceInventoryFilter), args["input"].(FragranceInventoryUpdateInput)), true

	case "Mutation.updateFragranceInventory":
		if e.complexity.Mutation.UpdateFragranceInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateFragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFragranceInventory(childComplexity, args["id"].(string), args["input"].(FragranceInventoryUpdateInput)), true

	case "Mutation.updateFragrances":
		if e.complexity.Mutation.UpdateFragrances == nil {
			break
		}

		args, err := ec.field_Mutation_updateFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFragrances(childComplexity, args["filter"].(*FragranceFilter), args["input"].(FragranceUpdateInput)), true

	case "Mutation.updateLipid":
		if e.complexity.Mutation.UpdateLipid == nil {
			break
		}

		args, err := ec.field_Mutation_updateLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLipid(childComplexity, args["id"].(string), args["input"].(LipidUpdateInput)), true

	case "Mutation.updateLipidInventories":
		if e.complexity.Mutation.UpdateLipidInventories == nil {
			break
		}

		args, err := ec.field_Mutation_updateLipidInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLipidInventories(childComplexity, args["filter"].(*LipidInventoryFilter), args["input"].(LipidInventoryUpdateInput)), true

	case "Mutation.updateLipidInventory":
		if e.complexity.Mutation.UpdateLipidInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateLipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLipidInventory(childComplexity, args["id"].(string), args["input"].(LipidInventoryUpdateInput)), true

	case "Mutation.updateLipids":
		if e.complexity.Mutation.UpdateLipids == nil {
			break
		}

		args, err := ec.field_Mutation_updateLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLipids(childComplexity, args["filter"].(*LipidFilter), args["input"].(LipidUpdateInput)), true

	case "Mutation.updateLye":
		if e.complexity.Mutation.UpdateLye == nil {
			break
		}

		args, err := ec.field_Mutation_updateLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLye(childComplexity, args["id"].(string), args["input"].(LyeUpdateInput)), true

	case "Mutation.updateLyeInventories":
		if e.complexity.Mutation.UpdateLyeInventories == nil {
			break
		}

		args, err := ec.field_Mutation_updateLyeInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLyeInventories(childComplexity, args["filter"].(*LyeInventoryFilter), args["input"].(LyeInventoryUpdateInput)), true

	case "Mutation.updateLyeInventory":
		if e.complexity.Mutation.UpdateLyeInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateLyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLyeInventory(childComplexity, args["id"].(string), args["input"].(LyeInventoryUpdateInput)), true

	case "Mutation.updateLyes":
		if e.complexity.Mutation.UpdateLyes == nil {
			break
		}

		args, err := ec.field_Mutation_updateLyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLyes(childComplexity, args["filter"].(*LyeFilter), args["input"].(LyeUpdateInput)), true

	case "Mutation.updateRecipe":
		if e.complexity.Mutation.UpdateRecipe == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipe(childComplexity, args["id"].(string), args["input"].(RecipeUpdateInput)), true

	case "Mutation.updateRecipeAdditive":
		if e.complexity.Mutation.UpdateRecipeAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeAdditive(childComplexity, args["id"].(string), args["input"].(RecipeAdditiveUpdateInput)), true

	case "Mutation.updateRecipeAdditives":
		if e.complexity.Mutation.UpdateRecipeAdditives == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeAdditives(childComplexity, args["filter"].(*RecipeAdditiveFilter), args["input"].(RecipeAdditiveUpdateInput)), true

	case "Mutation.updateRecipeBatch":
		if e.complexity.Mutation.UpdateRecipeBatch == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatch(childComplexity, args["id"].(string), args["input"].(RecipeBatchUpdateInput)), true

	case "Mutation.updateRecipeBatchAdditive":
		if e.complexity.Mutation.UpdateRecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchAdditive(childComplexity, args["id"].(string), args["input"].(RecipeBatchAdditiveUpdateInput)), true

	case "Mutation.updateRecipeBatchAdditives":
		if e.complexity.Mutation.UpdateRecipeBatchAdditives == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchAdditives(childComplexity, args["filter"].(*RecipeBatchAdditiveFilter), args["input"].(RecipeBatchAdditiveUpdateInput)), true

	case "Mutation.updateRecipeBatchFragrance":
		if e.complexity.Mutation.UpdateRecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchFragrance(childComplexity, args["id"].(string), args["input"].(RecipeBatchFragranceUpdateInput)), true

	case "Mutation.updateRecipeBatchFragrances":
		if e.complexity.Mutation.UpdateRecipeBatchFragrances == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchFragrances(childComplexity, args["filter"].(*RecipeBatchFragranceFilter), args["input"].(RecipeBatchFragranceUpdateInput)), true

	case "Mutation.updateRecipeBatchLipid":
		if e.complexity.Mutation.UpdateRecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchLipid(childComplexity, args["id"].(string), args["input"].(RecipeBatchLipidUpdateInput)), true

	case "Mutation.updateRecipeBatchLipids":
		if e.complexity.Mutation.UpdateRecipeBatchLipids == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchLipids(childComplexity, args["filter"].(*RecipeBatchLipidFilter), args["input"].(RecipeBatchLipidUpdateInput)), true

	case "Mutation.updateRecipeBatchLye":
		if e.complexity.Mutation.UpdateRecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchLye(childComplexity, args["id"].(string), args["input"].(RecipeBatchLyeUpdateInput)), true

	case "Mutation.updateRecipeBatchLyes":
		if e.complexity.Mutation.UpdateRecipeBatchLyes == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchLyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchLyes(childComplexity, args["filter"].(*RecipeBatchLyeFilter), args["input"].(RecipeBatchLyeUpdateInput)), true

	case "Mutation.updateRecipeBatchNote":
		if e.complexity.Mutation.UpdateRecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchNote(childComplexity, args["id"].(string), args["input"].(RecipeBatchNoteUpdateInput)), true

	case "Mutation.updateRecipeBatchNotes":
		if e.complexity.Mutation.UpdateRecipeBatchNotes == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchNotes(childComplexity, args["filter"].(*RecipeBatchNoteFilter), args["input"].(RecipeBatchNoteUpdateInput)), true

	case "Mutation.updateRecipeBatches":
		if e.complexity.Mutation.UpdateRecipeBatches == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatches(childComplexity, args["filter"].(*RecipeBatchFilter), args["input"].(RecipeBatchUpdateInput)), true

	case "Mutation.updateRecipeFragrance":
		if e.complexity.Mutation.UpdateRecipeFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeFragrance(childComplexity, args["id"].(string), args["input"].(RecipeFragranceUpdateInput)), true

	case "Mutation.updateRecipeFragrances":
		if e.complexity.Mutation.UpdateRecipeFragrances == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeFragrances(childComplexity, args["filter"].(*RecipeFragranceFilter), args["input"].(RecipeFragranceUpdateInput)), true

	case "Mutation.updateRecipeLipid":
		if e.complexity.Mutation.UpdateRecipeLipid == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeLipid(childComplexity, args["id"].(string), args["input"].(RecipeLipidUpdateInput)), true

	case "Mutation.updateRecipeLipids":
		if e.complexity.Mutation.UpdateRecipeLipids == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeLipids(childComplexity, args["filter"].(*RecipeLipidFilter), args["input"].(RecipeLipidUpdateInput)), true

	case "Mutation.updateRecipeStep":
		if e.complexity.Mutation.UpdateRecipeStep == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeStep(childComplexity, args["id"].(string), args["input"].(RecipeStepUpdateInput)), true

	case "Mutation.updateRecipeSteps":
		if e.complexity.Mutation.UpdateRecipeSteps == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeSteps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeSteps(childComplexity, args["filter"].(*RecipeStepFilter), args["input"].(RecipeStepUpdateInput)), true

	case "Mutation.updateRecipes":
		if e.complexity.Mutation.UpdateRecipes == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipes(childComplexity, args["filter"].(*RecipeFilter), args["input"].(RecipeUpdateInput)), true

	case "Mutation.updateSupplier":
		if e.complexity.Mutation.UpdateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_updateSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSupplier(childComplexity, args["id"].(string), args["input"].(SupplierUpdateInput)), true

	case "Mutation.updateSuppliers":
		if e.complexity.Mutation.UpdateSuppliers == nil {
			break
		}

		args, err := ec.field_Mutation_updateSuppliers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSuppliers(childComplexity, args["filter"].(*SupplierFilter), args["input"].(SupplierUpdateInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.additive":
		if e.complexity.Query.Additive == nil {
			break
		}

		args, err := ec.field_Query_additive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Additive(childComplexity, args["id"].(string)), true

	case "Query.additiveInventories":
		if e.complexity.Query.AdditiveInventories == nil {
			break
		}

		args, err := ec.field_Query_additiveInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdditiveInventories(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AdditiveInventoryOrdering), args["filter"].(*AdditiveInventoryFilter)), true

	case "Query.additiveInventory":
		if e.complexity.Query.AdditiveInventory == nil {
			break
		}

		args, err := ec.field_Query_additiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AdditiveInventory(childComplexity, args["id"].(string)), true

	case "Query.additives":
		if e.complexity.Query.Additives == nil {
			break
		}

		args, err := ec.field_Query_additives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Additives(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AdditiveOrdering), args["filter"].(*AdditiveFilter)), true

	case "Query.authGroup":
		if e.complexity.Query.AuthGroup == nil {
			break
		}

		args, err := ec.field_Query_authGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthGroup(childComplexity, args["id"].(string)), true

	case "Query.authGroupPermission":
		if e.complexity.Query.AuthGroupPermission == nil {
			break
		}

		args, err := ec.field_Query_authGroupPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthGroupPermission(childComplexity, args["id"].(string)), true

	case "Query.authGroupPermissions":
		if e.complexity.Query.AuthGroupPermissions == nil {
			break
		}

		args, err := ec.field_Query_authGroupPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthGroupPermissions(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthGroupPermissionOrdering), args["filter"].(*AuthGroupPermissionFilter)), true

	case "Query.authGroups":
		if e.complexity.Query.AuthGroups == nil {
			break
		}

		args, err := ec.field_Query_authGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthGroups(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthGroupOrdering), args["filter"].(*AuthGroupFilter)), true

	case "Query.authPermission":
		if e.complexity.Query.AuthPermission == nil {
			break
		}

		args, err := ec.field_Query_authPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthPermission(childComplexity, args["id"].(string)), true

	case "Query.authPermissions":
		if e.complexity.Query.AuthPermissions == nil {
			break
		}

		args, err := ec.field_Query_authPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthPermissions(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthPermissionOrdering), args["filter"].(*AuthPermissionFilter)), true

	case "Query.authUser":
		if e.complexity.Query.AuthUser == nil {
			break
		}

		args, err := ec.field_Query_authUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUser(childComplexity, args["id"].(string)), true

	case "Query.authUserGroup":
		if e.complexity.Query.AuthUserGroup == nil {
			break
		}

		args, err := ec.field_Query_authUserGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUserGroup(childComplexity, args["id"].(string)), true

	case "Query.authUserGroups":
		if e.complexity.Query.AuthUserGroups == nil {
			break
		}

		args, err := ec.field_Query_authUserGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUserGroups(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthUserGroupOrdering), args["filter"].(*AuthUserGroupFilter)), true

	case "Query.authUserUserPermission":
		if e.complexity.Query.AuthUserUserPermission == nil {
			break
		}

		args, err := ec.field_Query_authUserUserPermission_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUserUserPermission(childComplexity, args["id"].(string)), true

	case "Query.authUserUserPermissions":
		if e.complexity.Query.AuthUserUserPermissions == nil {
			break
		}

		args, err := ec.field_Query_authUserUserPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUserUserPermissions(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthUserUserPermissionOrdering), args["filter"].(*AuthUserUserPermissionFilter)), true

	case "Query.authUsers":
		if e.complexity.Query.AuthUsers == nil {
			break
		}

		args, err := ec.field_Query_authUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUsers(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthUserOrdering), args["filter"].(*AuthUserFilter)), true

	case "Query.fragrance":
		if e.complexity.Query.Fragrance == nil {
			break
		}

		args, err := ec.field_Query_fragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fragrance(childComplexity, args["id"].(string)), true

	case "Query.fragranceInventories":
		if e.complexity.Query.FragranceInventories == nil {
			break
		}

		args, err := ec.field_Query_fragranceInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FragranceInventories(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*FragranceInventoryOrdering), args["filter"].(*FragranceInventoryFilter)), true

	case "Query.fragranceInventory":
		if e.complexity.Query.FragranceInventory == nil {
			break
		}

		args, err := ec.field_Query_fragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FragranceInventory(childComplexity, args["id"].(string)), true

	case "Query.fragrances":
		if e.complexity.Query.Fragrances == nil {
			break
		}

		args, err := ec.field_Query_fragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fragrances(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*FragranceOrdering), args["filter"].(*FragranceFilter)), true

	case "Query.lipid":
		if e.complexity.Query.Lipid == nil {
			break
		}

		args, err := ec.field_Query_lipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lipid(childComplexity, args["id"].(string)), true

	case "Query.lipidInventories":
		if e.complexity.Query.LipidInventories == nil {
			break
		}

		args, err := ec.field_Query_lipidInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LipidInventories(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LipidInventoryOrdering), args["filter"].(*LipidInventoryFilter)), true

	case "Query.lipidInventory":
		if e.complexity.Query.LipidInventory == nil {
			break
		}

		args, err := ec.field_Query_lipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LipidInventory(childComplexity, args["id"].(string)), true

	case "Query.lipids":
		if e.complexity.Query.Lipids == nil {
			break
		}

		args, err := ec.field_Query_lipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lipids(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LipidOrdering), args["filter"].(*LipidFilter)), true

	case "Query.lye":
		if e.complexity.Query.Lye == nil {
			break
		}

		args, err := ec.field_Query_lye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lye(childComplexity, args["id"].(string)), true

	case "Query.lyeInventories":
		if e.complexity.Query.LyeInventories == nil {
			break
		}

		args, err := ec.field_Query_lyeInventories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LyeInventories(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LyeInventoryOrdering), args["filter"].(*LyeInventoryFilter)), true

	case "Query.lyeInventory":
		if e.complexity.Query.LyeInventory == nil {
			break
		}

		args, err := ec.field_Query_lyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LyeInventory(childComplexity, args["id"].(string)), true

	case "Query.lyes":
		if e.complexity.Query.Lyes == nil {
			break
		}

		args, err := ec.field_Query_lyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lyes(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LyeOrdering), args["filter"].(*LyeFilter)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.recipe":
		if e.complexity.Query.Recipe == nil {
			break
		}

		args, err := ec.field_Query_recipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Recipe(childComplexity, args["id"].(string)), true

	case "Query.recipeAdditive":
		if e.complexity.Query.RecipeAdditive == nil {
			break
		}

		args, err := ec.field_Query_recipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeAdditive(childComplexity, args["id"].(string)), true

	case "Query.recipeAdditives":
		if e.complexity.Query.RecipeAdditives == nil {
			break
		}

		args, err := ec.field_Query_recipeAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeAdditives(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeAdditiveOrdering), args["filter"].(*RecipeAdditiveFilter)), true

	case "Query.recipeBatch":
		if e.complexity.Query.RecipeBatch == nil {
			break
		}

		args, err := ec.field_Query_recipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatch(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchAdditive":
		if e.complexity.Query.RecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchAdditive(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchAdditives":
		if e.complexity.Query.RecipeBatchAdditives == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchAdditives(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchAdditiveOrdering), args["filter"].(*RecipeBatchAdditiveFilter)), true

	case "Query.recipeBatchFragrance":
		if e.complexity.Query.RecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchFragrance(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchFragrances":
		if e.complexity.Query.RecipeBatchFragrances == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchFragrances(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchFragranceOrdering), args["filter"].(*RecipeBatchFragranceFilter)), true

	case "Query.recipeBatchLipid":
		if e.complexity.Query.RecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLipid(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchLipids":
		if e.complexity.Query.RecipeBatchLipids == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLipids(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchLipidOrdering), args["filter"].(*RecipeBatchLipidFilter)), true

	case "Query.recipeBatchLye":
		if e.complexity.Query.RecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLye(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchLyes":
		if e.complexity.Query.RecipeBatchLyes == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLyes(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchLyeOrdering), args["filter"].(*RecipeBatchLyeFilter)), true

	case "Query.recipeBatchNote":
		if e.complexity.Query.RecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchNote(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchNotes":
		if e.complexity.Query.RecipeBatchNotes == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchNotes(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchNoteOrdering), args["filter"].(*RecipeBatchNoteFilter)), true

	case "Query.recipeBatches":
		if e.complexity.Query.RecipeBatches == nil {
			break
		}

		args, err := ec.field_Query_recipeBatches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatches(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchOrdering), args["filter"].(*RecipeBatchFilter)), true

	case "Query.recipeFragrance":
		if e.complexity.Query.RecipeFragrance == nil {
			break
		}

		args, err := ec.field_Query_recipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeFragrance(childComplexity, args["id"].(string)), true

	case "Query.recipeFragrances":
		if e.complexity.Query.RecipeFragrances == nil {
			break
		}

		args, err := ec.field_Query_recipeFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeFragrances(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeFragranceOrdering), args["filter"].(*RecipeFragranceFilter)), true

	case "Query.recipeLipid":
		if e.complexity.Query.RecipeLipid == nil {
			break
		}

		args, err := ec.field_Query_recipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeLipid(childComplexity, args["id"].(string)), true

	case "Query.recipeLipids":
		if e.complexity.Query.RecipeLipids == nil {
			break
		}

		args, err := ec.field_Query_recipeLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeLipids(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeLipidOrdering), args["filter"].(*RecipeLipidFilter)), true

	case "Query.recipeStep":
		if e.complexity.Query.RecipeStep == nil {
			break
		}

		args, err := ec.field_Query_recipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeStep(childComplexity, args["id"].(string)), true

	case "Query.recipeSteps":
		if e.complexity.Query.RecipeSteps == nil {
			break
		}

		args, err := ec.field_Query_recipeSteps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeSteps(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeStepOrdering), args["filter"].(*RecipeStepFilter)), true

	case "Query.recipes":
		if e.complexity.Query.Recipes == nil {
			break
		}

		args, err := ec.field_Query_recipes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Recipes(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeOrdering), args["filter"].(*RecipeFilter)), true

	case "Query.supplier":
		if e.complexity.Query.Supplier == nil {
			break
		}

		args, err := ec.field_Query_supplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Supplier(childComplexity, args["id"].(string)), true

	case "Query.suppliers":
		if e.complexity.Query.Suppliers == nil {
			break
		}

		args, err := ec.field_Query_suppliers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Suppliers(childComplexity, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*SupplierOrdering), args["filter"].(*SupplierFilter)), true

	case "Recipe.createdAt":
		if e.complexity.Recipe.CreatedAt == nil {
			break
		}

		return e.complexity.Recipe.CreatedAt(childComplexity), true

	case "Recipe.deletedAt":
		if e.complexity.Recipe.DeletedAt == nil {
			break
		}

		return e.complexity.Recipe.DeletedAt(childComplexity), true

	case "Recipe.id":
		if e.complexity.Recipe.ID == nil {
			break
		}

		return e.complexity.Recipe.ID(childComplexity), true

	case "Recipe.name":
		if e.complexity.Recipe.Name == nil {
			break
		}

		return e.complexity.Recipe.Name(childComplexity), true

	case "Recipe.note":
		if e.complexity.Recipe.Note == nil {
			break
		}

		return e.complexity.Recipe.Note(childComplexity), true

	case "Recipe.recipeAdditives":
		if e.complexity.Recipe.RecipeAdditives == nil {
			break
		}

		return e.complexity.Recipe.RecipeAdditives(childComplexity), true

	case "Recipe.recipeBatches":
		if e.complexity.Recipe.RecipeBatches == nil {
			break
		}

		return e.complexity.Recipe.RecipeBatches(childComplexity), true

	case "Recipe.recipeFragrances":
		if e.complexity.Recipe.RecipeFragrances == nil {
			break
		}

		return e.complexity.Recipe.RecipeFragrances(childComplexity), true

	case "Recipe.recipeLipids":
		if e.complexity.Recipe.RecipeLipids == nil {
			break
		}

		return e.complexity.Recipe.RecipeLipids(childComplexity), true

	case "Recipe.recipeSteps":
		if e.complexity.Recipe.RecipeSteps == nil {
			break
		}

		return e.complexity.Recipe.RecipeSteps(childComplexity), true

	case "Recipe.updatedAt":
		if e.complexity.Recipe.UpdatedAt == nil {
			break
		}

		return e.complexity.Recipe.UpdatedAt(childComplexity), true

	case "RecipeAdditive.additive":
		if e.complexity.RecipeAdditive.Additive == nil {
			break
		}

		return e.complexity.RecipeAdditive.Additive(childComplexity), true

	case "RecipeAdditive.createdAt":
		if e.complexity.RecipeAdditive.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeAdditive.CreatedAt(childComplexity), true

	case "RecipeAdditive.deletedAt":
		if e.complexity.RecipeAdditive.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeAdditive.DeletedAt(childComplexity), true

	case "RecipeAdditive.id":
		if e.complexity.RecipeAdditive.ID == nil {
			break
		}

		return e.complexity.RecipeAdditive.ID(childComplexity), true

	case "RecipeAdditive.percentage":
		if e.complexity.RecipeAdditive.Percentage == nil {
			break
		}

		return e.complexity.RecipeAdditive.Percentage(childComplexity), true

	case "RecipeAdditive.recipe":
		if e.complexity.RecipeAdditive.Recipe == nil {
			break
		}

		return e.complexity.RecipeAdditive.Recipe(childComplexity), true

	case "RecipeAdditive.updatedAt":
		if e.complexity.RecipeAdditive.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeAdditive.UpdatedAt(childComplexity), true

	case "RecipeAdditiveConnection.edges":
		if e.complexity.RecipeAdditiveConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeAdditiveConnection.Edges(childComplexity), true

	case "RecipeAdditiveConnection.pageInfo":
		if e.complexity.RecipeAdditiveConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeAdditiveConnection.PageInfo(childComplexity), true

	case "RecipeAdditiveDeletePayload.id":
		if e.complexity.RecipeAdditiveDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeAdditiveDeletePayload.ID(childComplexity), true

	case "RecipeAdditiveEdge.cursor":
		if e.complexity.RecipeAdditiveEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeAdditiveEdge.Cursor(childComplexity), true

	case "RecipeAdditiveEdge.node":
		if e.complexity.RecipeAdditiveEdge.Node == nil {
			break
		}

		return e.complexity.RecipeAdditiveEdge.Node(childComplexity), true

	case "RecipeAdditivePayload.recipeAdditive":
		if e.complexity.RecipeAdditivePayload.RecipeAdditive == nil {
			break
		}

		return e.complexity.RecipeAdditivePayload.RecipeAdditive(childComplexity), true

	case "RecipeAdditivesDeletePayload.ids":
		if e.complexity.RecipeAdditivesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeAdditivesDeletePayload.Ids(childComplexity), true

	case "RecipeAdditivesUpdatePayload.ok":
		if e.complexity.RecipeAdditivesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeAdditivesUpdatePayload.Ok(childComplexity), true

	case "RecipeBatch.batchRecipeBatchAdditives":
		if e.complexity.RecipeBatch.BatchRecipeBatchAdditives == nil {
			break
		}

		return e.complexity.RecipeBatch.BatchRecipeBatchAdditives(childComplexity), true

	case "RecipeBatch.batchRecipeBatchFragrances":
		if e.complexity.RecipeBatch.BatchRecipeBatchFragrances == nil {
			break
		}

		return e.complexity.RecipeBatch.BatchRecipeBatchFragrances(childComplexity), true

	case "RecipeBatch.batchRecipeBatchLipids":
		if e.complexity.RecipeBatch.BatchRecipeBatchLipids == nil {
			break
		}

		return e.complexity.RecipeBatch.BatchRecipeBatchLipids(childComplexity), true

	case "RecipeBatch.batchRecipeBatchLyes":
		if e.complexity.RecipeBatch.BatchRecipeBatchLyes == nil {
			break
		}

		return e.complexity.RecipeBatch.BatchRecipeBatchLyes(childComplexity), true

	case "RecipeBatch.batchRecipeBatchNotes":
		if e.complexity.RecipeBatch.BatchRecipeBatchNotes == nil {
			break
		}

		return e.complexity.RecipeBatch.BatchRecipeBatchNotes(childComplexity), true

	case "RecipeBatch.createdAt":
		if e.complexity.RecipeBatch.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatch.CreatedAt(childComplexity), true

	case "RecipeBatch.curedWeight":
		if e.complexity.RecipeBatch.CuredWeight == nil {
			break
		}

		return e.complexity.RecipeBatch.CuredWeight(childComplexity), true

	case "RecipeBatch.deletedAt":
		if e.complexity.RecipeBatch.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatch.DeletedAt(childComplexity), true

	case "RecipeBatch.id":
		if e.complexity.RecipeBatch.ID == nil {
			break
		}

		return e.complexity.RecipeBatch.ID(childComplexity), true

	case "RecipeBatch.lipidWeight":
		if e.complexity.RecipeBatch.LipidWeight == nil {
			break
		}

		return e.complexity.RecipeBatch.LipidWeight(childComplexity), true

	case "RecipeBatch.note":
		if e.complexity.RecipeBatch.Note == nil {
			break
		}

		return e.complexity.RecipeBatch.Note(childComplexity), true

	case "RecipeBatch.productionDate":
		if e.complexity.RecipeBatch.ProductionDate == nil {
			break
		}

		return e.complexity.RecipeBatch.ProductionDate(childComplexity), true

	case "RecipeBatch.productionWeight":
		if e.complexity.RecipeBatch.ProductionWeight == nil {
			break
		}

		return e.complexity.RecipeBatch.ProductionWeight(childComplexity), true

	case "RecipeBatch.recipe":
		if e.complexity.RecipeBatch.Recipe == nil {
			break
		}

		return e.complexity.RecipeBatch.Recipe(childComplexity), true

	case "RecipeBatch.sellableDate":
		if e.complexity.RecipeBatch.SellableDate == nil {
			break
		}

		return e.complexity.RecipeBatch.SellableDate(childComplexity), true

	case "RecipeBatch.tag":
		if e.complexity.RecipeBatch.Tag == nil {
			break
		}

		return e.complexity.RecipeBatch.Tag(childComplexity), true

	case "RecipeBatch.updatedAt":
		if e.complexity.RecipeBatch.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatch.UpdatedAt(childComplexity), true

	case "RecipeBatchAdditive.additive":
		if e.complexity.RecipeBatchAdditive.Additive == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Additive(childComplexity), true

	case "RecipeBatchAdditive.batch":
		if e.complexity.RecipeBatchAdditive.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Batch(childComplexity), true

	case "RecipeBatchAdditive.cost":
		if e.complexity.RecipeBatchAdditive.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Cost(childComplexity), true

	case "RecipeBatchAdditive.createdAt":
		if e.complexity.RecipeBatchAdditive.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.CreatedAt(childComplexity), true

	case "RecipeBatchAdditive.deletedAt":
		if e.complexity.RecipeBatchAdditive.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.DeletedAt(childComplexity), true

	case "RecipeBatchAdditive.id":
		if e.complexity.RecipeBatchAdditive.ID == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.ID(childComplexity), true

	case "RecipeBatchAdditive.updatedAt":
		if e.complexity.RecipeBatchAdditive.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.UpdatedAt(childComplexity), true

	case "RecipeBatchAdditive.weight":
		if e.complexity.RecipeBatchAdditive.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Weight(childComplexity), true

	case "RecipeBatchAdditiveConnection.edges":
		if e.complexity.RecipeBatchAdditiveConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeBatchAdditiveConnection.Edges(childComplexity), true

	case "RecipeBatchAdditiveConnection.pageInfo":
		if e.complexity.RecipeBatchAdditiveConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeBatchAdditiveConnection.PageInfo(childComplexity), true

	case "RecipeBatchAdditiveDeletePayload.id":
		if e.complexity.RecipeBatchAdditiveDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchAdditiveDeletePayload.ID(childComplexity), true

	case "RecipeBatchAdditiveEdge.cursor":
		if e.complexity.RecipeBatchAdditiveEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeBatchAdditiveEdge.Cursor(childComplexity), true

	case "RecipeBatchAdditiveEdge.node":
		if e.complexity.RecipeBatchAdditiveEdge.Node == nil {
			break
		}

		return e.complexity.RecipeBatchAdditiveEdge.Node(childComplexity), true

	case "RecipeBatchAdditivePayload.recipeBatchAdditive":
		if e.complexity.RecipeBatchAdditivePayload.RecipeBatchAdditive == nil {
			break
		}

		return e.complexity.RecipeBatchAdditivePayload.RecipeBatchAdditive(childComplexity), true

	case "RecipeBatchAdditivesDeletePayload.ids":
		if e.complexity.RecipeBatchAdditivesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeBatchAdditivesDeletePayload.Ids(childComplexity), true

	case "RecipeBatchAdditivesUpdatePayload.ok":
		if e.complexity.RecipeBatchAdditivesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeBatchAdditivesUpdatePayload.Ok(childComplexity), true

	case "RecipeBatchConnection.edges":
		if e.complexity.RecipeBatchConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeBatchConnection.Edges(childComplexity), true

	case "RecipeBatchConnection.pageInfo":
		if e.complexity.RecipeBatchConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeBatchConnection.PageInfo(childComplexity), true

	case "RecipeBatchDeletePayload.id":
		if e.complexity.RecipeBatchDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchDeletePayload.ID(childComplexity), true

	case "RecipeBatchEdge.cursor":
		if e.complexity.RecipeBatchEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeBatchEdge.Cursor(childComplexity), true

	case "RecipeBatchEdge.node":
		if e.complexity.RecipeBatchEdge.Node == nil {
			break
		}

		return e.complexity.RecipeBatchEdge.Node(childComplexity), true

	case "RecipeBatchFragrance.batch":
		if e.complexity.RecipeBatchFragrance.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Batch(childComplexity), true

	case "RecipeBatchFragrance.cost":
		if e.complexity.RecipeBatchFragrance.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Cost(childComplexity), true

	case "RecipeBatchFragrance.createdAt":
		if e.complexity.RecipeBatchFragrance.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.CreatedAt(childComplexity), true

	case "RecipeBatchFragrance.deletedAt":
		if e.complexity.RecipeBatchFragrance.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.DeletedAt(childComplexity), true

	case "RecipeBatchFragrance.fragrance":
		if e.complexity.RecipeBatchFragrance.Fragrance == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Fragrance(childComplexity), true

	case "RecipeBatchFragrance.id":
		if e.complexity.RecipeBatchFragrance.ID == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.ID(childComplexity), true

	case "RecipeBatchFragrance.updatedAt":
		if e.complexity.RecipeBatchFragrance.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.UpdatedAt(childComplexity), true

	case "RecipeBatchFragrance.weight":
		if e.complexity.RecipeBatchFragrance.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Weight(childComplexity), true

	case "RecipeBatchFragranceConnection.edges":
		if e.complexity.RecipeBatchFragranceConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeBatchFragranceConnection.Edges(childComplexity), true

	case "RecipeBatchFragranceConnection.pageInfo":
		if e.complexity.RecipeBatchFragranceConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeBatchFragranceConnection.PageInfo(childComplexity), true

	case "RecipeBatchFragranceDeletePayload.id":
		if e.complexity.RecipeBatchFragranceDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchFragranceDeletePayload.ID(childComplexity), true

	case "RecipeBatchFragranceEdge.cursor":
		if e.complexity.RecipeBatchFragranceEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeBatchFragranceEdge.Cursor(childComplexity), true

	case "RecipeBatchFragranceEdge.node":
		if e.complexity.RecipeBatchFragranceEdge.Node == nil {
			break
		}

		return e.complexity.RecipeBatchFragranceEdge.Node(childComplexity), true

	case "RecipeBatchFragrancePayload.recipeBatchFragrance":
		if e.complexity.RecipeBatchFragrancePayload.RecipeBatchFragrance == nil {
			break
		}

		return e.complexity.RecipeBatchFragrancePayload.RecipeBatchFragrance(childComplexity), true

	case "RecipeBatchFragrancesDeletePayload.ids":
		if e.complexity.RecipeBatchFragrancesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeBatchFragrancesDeletePayload.Ids(childComplexity), true

	case "RecipeBatchFragrancesUpdatePayload.ok":
		if e.complexity.RecipeBatchFragrancesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeBatchFragrancesUpdatePayload.Ok(childComplexity), true

	case "RecipeBatchLipid.batch":
		if e.complexity.RecipeBatchLipid.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Batch(childComplexity), true

	case "RecipeBatchLipid.cost":
		if e.complexity.RecipeBatchLipid.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Cost(childComplexity), true

	case "RecipeBatchLipid.createdAt":
		if e.complexity.RecipeBatchLipid.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.CreatedAt(childComplexity), true

	case "RecipeBatchLipid.deletedAt":
		if e.complexity.RecipeBatchLipid.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.DeletedAt(childComplexity), true

	case "RecipeBatchLipid.id":
		if e.complexity.RecipeBatchLipid.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.ID(childComplexity), true

	case "RecipeBatchLipid.lipid":
		if e.complexity.RecipeBatchLipid.Lipid == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Lipid(childComplexity), true

	case "RecipeBatchLipid.updatedAt":
		if e.complexity.RecipeBatchLipid.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.UpdatedAt(childComplexity), true

	case "RecipeBatchLipid.weight":
		if e.complexity.RecipeBatchLipid.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Weight(childComplexity), true

	case "RecipeBatchLipidConnection.edges":
		if e.complexity.RecipeBatchLipidConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeBatchLipidConnection.Edges(childComplexity), true

	case "RecipeBatchLipidConnection.pageInfo":
		if e.complexity.RecipeBatchLipidConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeBatchLipidConnection.PageInfo(childComplexity), true

	case "RecipeBatchLipidDeletePayload.id":
		if e.complexity.RecipeBatchLipidDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLipidDeletePayload.ID(childComplexity), true

	case "RecipeBatchLipidEdge.cursor":
		if e.complexity.RecipeBatchLipidEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeBatchLipidEdge.Cursor(childComplexity), true

	case "RecipeBatchLipidEdge.node":
		if e.complexity.RecipeBatchLipidEdge.Node == nil {
			break
		}

		return e.complexity.RecipeBatchLipidEdge.Node(childComplexity), true

	case "RecipeBatchLipidPayload.recipeBatchLipid":
		if e.complexity.RecipeBatchLipidPayload.RecipeBatchLipid == nil {
			break
		}

		return e.complexity.RecipeBatchLipidPayload.RecipeBatchLipid(childComplexity), true

	case "RecipeBatchLipidsDeletePayload.ids":
		if e.complexity.RecipeBatchLipidsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeBatchLipidsDeletePayload.Ids(childComplexity), true

	case "RecipeBatchLipidsUpdatePayload.ok":
		if e.complexity.RecipeBatchLipidsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeBatchLipidsUpdatePayload.Ok(childComplexity), true

	case "RecipeBatchLye.batch":
		if e.complexity.RecipeBatchLye.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Batch(childComplexity), true

	case "RecipeBatchLye.cost":
		if e.complexity.RecipeBatchLye.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Cost(childComplexity), true

	case "RecipeBatchLye.createdAt":
		if e.complexity.RecipeBatchLye.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLye.CreatedAt(childComplexity), true

	case "RecipeBatchLye.deletedAt":
		if e.complexity.RecipeBatchLye.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLye.DeletedAt(childComplexity), true

	case "RecipeBatchLye.discount":
		if e.complexity.RecipeBatchLye.Discount == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Discount(childComplexity), true

	case "RecipeBatchLye.id":
		if e.complexity.RecipeBatchLye.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLye.ID(childComplexity), true

	case "RecipeBatchLye.lye":
		if e.complexity.RecipeBatchLye.Lye == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Lye(childComplexity), true

	case "RecipeBatchLye.updatedAt":
		if e.complexity.RecipeBatchLye.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLye.UpdatedAt(childComplexity), true

	case "RecipeBatchLye.weight":
		if e.complexity.RecipeBatchLye.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Weight(childComplexity), true

	case "RecipeBatchLyeConnection.edges":
		if e.complexity.RecipeBatchLyeConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeBatchLyeConnection.Edges(childComplexity), true

	case "RecipeBatchLyeConnection.pageInfo":
		if e.complexity.RecipeBatchLyeConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeBatchLyeConnection.PageInfo(childComplexity), true

	case "RecipeBatchLyeDeletePayload.id":
		if e.complexity.RecipeBatchLyeDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLyeDeletePayload.ID(childComplexity), true

	case "RecipeBatchLyeEdge.cursor":
		if e.complexity.RecipeBatchLyeEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeBatchLyeEdge.Cursor(childComplexity), true

	case "RecipeBatchLyeEdge.node":
		if e.complexity.RecipeBatchLyeEdge.Node == nil {
			break
		}

		return e.complexity.RecipeBatchLyeEdge.Node(childComplexity), true

	case "RecipeBatchLyePayload.recipeBatchLye":
		if e.complexity.RecipeBatchLyePayload.RecipeBatchLye == nil {
			break
		}

		return e.complexity.RecipeBatchLyePayload.RecipeBatchLye(childComplexity), true

	case "RecipeBatchLyesDeletePayload.ids":
		if e.complexity.RecipeBatchLyesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeBatchLyesDeletePayload.Ids(childComplexity), true

	case "RecipeBatchLyesUpdatePayload.ok":
		if e.complexity.RecipeBatchLyesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeBatchLyesUpdatePayload.Ok(childComplexity), true

	case "RecipeBatchNote.batch":
		if e.complexity.RecipeBatchNote.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchNote.Batch(childComplexity), true

	case "RecipeBatchNote.createdAt":
		if e.complexity.RecipeBatchNote.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchNote.CreatedAt(childComplexity), true

	case "RecipeBatchNote.deletedAt":
		if e.complexity.RecipeBatchNote.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchNote.DeletedAt(childComplexity), true

	case "RecipeBatchNote.id":
		if e.complexity.RecipeBatchNote.ID == nil {
			break
		}

		return e.complexity.RecipeBatchNote.ID(childComplexity), true

	case "RecipeBatchNote.link":
		if e.complexity.RecipeBatchNote.Link == nil {
			break
		}

		return e.complexity.RecipeBatchNote.Link(childComplexity), true

	case "RecipeBatchNote.note":
		if e.complexity.RecipeBatchNote.Note == nil {
			break
		}

		return e.complexity.RecipeBatchNote.Note(childComplexity), true

	case "RecipeBatchNote.updatedAt":
		if e.complexity.RecipeBatchNote.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchNote.UpdatedAt(childComplexity), true

	case "RecipeBatchNoteConnection.edges":
		if e.complexity.RecipeBatchNoteConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeBatchNoteConnection.Edges(childComplexity), true

	case "RecipeBatchNoteConnection.pageInfo":
		if e.complexity.RecipeBatchNoteConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeBatchNoteConnection.PageInfo(childComplexity), true

	case "RecipeBatchNoteDeletePayload.id":
		if e.complexity.RecipeBatchNoteDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchNoteDeletePayload.ID(childComplexity), true

	case "RecipeBatchNoteEdge.cursor":
		if e.complexity.RecipeBatchNoteEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeBatchNoteEdge.Cursor(childComplexity), true

	case "RecipeBatchNoteEdge.node":
		if e.complexity.RecipeBatchNoteEdge.Node == nil {
			break
		}

		return e.complexity.RecipeBatchNoteEdge.Node(childComplexity), true

	case "RecipeBatchNotePayload.recipeBatchNote":
		if e.complexity.RecipeBatchNotePayload.RecipeBatchNote == nil {
			break
		}

		return e.complexity.RecipeBatchNotePayload.RecipeBatchNote(childComplexity), true

	case "RecipeBatchNotesDeletePayload.ids":
		if e.complexity.RecipeBatchNotesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeBatchNotesDeletePayload.Ids(childComplexity), true

	case "RecipeBatchNotesUpdatePayload.ok":
		if e.complexity.RecipeBatchNotesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeBatchNotesUpdatePayload.Ok(childComplexity), true

	case "RecipeBatchPayload.recipeBatch":
		if e.complexity.RecipeBatchPayload.RecipeBatch == nil {
			break
		}

		return e.complexity.RecipeBatchPayload.RecipeBatch(childComplexity), true

	case "RecipeBatchesDeletePayload.ids":
		if e.complexity.RecipeBatchesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeBatchesDeletePayload.Ids(childComplexity), true

	case "RecipeBatchesUpdatePayload.ok":
		if e.complexity.RecipeBatchesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeBatchesUpdatePayload.Ok(childComplexity), true

	case "RecipeConnection.edges":
		if e.complexity.RecipeConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeConnection.Edges(childComplexity), true

	case "RecipeConnection.pageInfo":
		if e.complexity.RecipeConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeConnection.PageInfo(childComplexity), true

	case "RecipeDeletePayload.id":
		if e.complexity.RecipeDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeDeletePayload.ID(childComplexity), true

	case "RecipeEdge.cursor":
		if e.complexity.RecipeEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeEdge.Cursor(childComplexity), true

	case "RecipeEdge.node":
		if e.complexity.RecipeEdge.Node == nil {
			break
		}

		return e.complexity.RecipeEdge.Node(childComplexity), true

	case "RecipeFragrance.createdAt":
		if e.complexity.RecipeFragrance.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeFragrance.CreatedAt(childComplexity), true

	case "RecipeFragrance.deletedAt":
		if e.complexity.RecipeFragrance.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeFragrance.DeletedAt(childComplexity), true

	case "RecipeFragrance.fragrance":
		if e.complexity.RecipeFragrance.Fragrance == nil {
			break
		}

		return e.complexity.RecipeFragrance.Fragrance(childComplexity), true

	case "RecipeFragrance.id":
		if e.complexity.RecipeFragrance.ID == nil {
			break
		}

		return e.complexity.RecipeFragrance.ID(childComplexity), true

	case "RecipeFragrance.percentage":
		if e.complexity.RecipeFragrance.Percentage == nil {
			break
		}

		return e.complexity.RecipeFragrance.Percentage(childComplexity), true

	case "RecipeFragrance.recipe":
		if e.complexity.RecipeFragrance.Recipe == nil {
			break
		}

		return e.complexity.RecipeFragrance.Recipe(childComplexity), true

	case "RecipeFragrance.updatedAt":
		if e.complexity.RecipeFragrance.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeFragrance.UpdatedAt(childComplexity), true

	case "RecipeFragranceConnection.edges":
		if e.complexity.RecipeFragranceConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeFragranceConnection.Edges(childComplexity), true

	case "RecipeFragranceConnection.pageInfo":
		if e.complexity.RecipeFragranceConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeFragranceConnection.PageInfo(childComplexity), true

	case "RecipeFragranceDeletePayload.id":
		if e.complexity.RecipeFragranceDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeFragranceDeletePayload.ID(childComplexity), true

	case "RecipeFragranceEdge.cursor":
		if e.complexity.RecipeFragranceEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeFragranceEdge.Cursor(childComplexity), true

	case "RecipeFragranceEdge.node":
		if e.complexity.RecipeFragranceEdge.Node == nil {
			break
		}

		return e.complexity.RecipeFragranceEdge.Node(childComplexity), true

	case "RecipeFragrancePayload.recipeFragrance":
		if e.complexity.RecipeFragrancePayload.RecipeFragrance == nil {
			break
		}

		return e.complexity.RecipeFragrancePayload.RecipeFragrance(childComplexity), true

	case "RecipeFragrancesDeletePayload.ids":
		if e.complexity.RecipeFragrancesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeFragrancesDeletePayload.Ids(childComplexity), true

	case "RecipeFragrancesUpdatePayload.ok":
		if e.complexity.RecipeFragrancesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeFragrancesUpdatePayload.Ok(childComplexity), true

	case "RecipeLipid.createdAt":
		if e.complexity.RecipeLipid.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeLipid.CreatedAt(childComplexity), true

	case "RecipeLipid.deletedAt":
		if e.complexity.RecipeLipid.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeLipid.DeletedAt(childComplexity), true

	case "RecipeLipid.id":
		if e.complexity.RecipeLipid.ID == nil {
			break
		}

		return e.complexity.RecipeLipid.ID(childComplexity), true

	case "RecipeLipid.lipid":
		if e.complexity.RecipeLipid.Lipid == nil {
			break
		}

		return e.complexity.RecipeLipid.Lipid(childComplexity), true

	case "RecipeLipid.percentage":
		if e.complexity.RecipeLipid.Percentage == nil {
			break
		}

		return e.complexity.RecipeLipid.Percentage(childComplexity), true

	case "RecipeLipid.recipe":
		if e.complexity.RecipeLipid.Recipe == nil {
			break
		}

		return e.complexity.RecipeLipid.Recipe(childComplexity), true

	case "RecipeLipid.updatedAt":
		if e.complexity.RecipeLipid.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeLipid.UpdatedAt(childComplexity), true

	case "RecipeLipidConnection.edges":
		if e.complexity.RecipeLipidConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeLipidConnection.Edges(childComplexity), true

	case "RecipeLipidConnection.pageInfo":
		if e.complexity.RecipeLipidConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeLipidConnection.PageInfo(childComplexity), true

	case "RecipeLipidDeletePayload.id":
		if e.complexity.RecipeLipidDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeLipidDeletePayload.ID(childComplexity), true

	case "RecipeLipidEdge.cursor":
		if e.complexity.RecipeLipidEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeLipidEdge.Cursor(childComplexity), true

	case "RecipeLipidEdge.node":
		if e.complexity.RecipeLipidEdge.Node == nil {
			break
		}

		return e.complexity.RecipeLipidEdge.Node(childComplexity), true

	case "RecipeLipidPayload.recipeLipid":
		if e.complexity.RecipeLipidPayload.RecipeLipid == nil {
			break
		}

		return e.complexity.RecipeLipidPayload.RecipeLipid(childComplexity), true

	case "RecipeLipidsDeletePayload.ids":
		if e.complexity.RecipeLipidsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeLipidsDeletePayload.Ids(childComplexity), true

	case "RecipeLipidsUpdatePayload.ok":
		if e.complexity.RecipeLipidsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeLipidsUpdatePayload.Ok(childComplexity), true

	case "RecipePayload.recipe":
		if e.complexity.RecipePayload.Recipe == nil {
			break
		}

		return e.complexity.RecipePayload.Recipe(childComplexity), true

	case "RecipeStep.createdAt":
		if e.complexity.RecipeStep.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeStep.CreatedAt(childComplexity), true

	case "RecipeStep.deletedAt":
		if e.complexity.RecipeStep.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeStep.DeletedAt(childComplexity), true

	case "RecipeStep.id":
		if e.complexity.RecipeStep.ID == nil {
			break
		}

		return e.complexity.RecipeStep.ID(childComplexity), true

	case "RecipeStep.note":
		if e.complexity.RecipeStep.Note == nil {
			break
		}

		return e.complexity.RecipeStep.Note(childComplexity), true

	case "RecipeStep.num":
		if e.complexity.RecipeStep.Num == nil {
			break
		}

		return e.complexity.RecipeStep.Num(childComplexity), true

	case "RecipeStep.recipe":
		if e.complexity.RecipeStep.Recipe == nil {
			break
		}

		return e.complexity.RecipeStep.Recipe(childComplexity), true

	case "RecipeStep.updatedAt":
		if e.complexity.RecipeStep.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeStep.UpdatedAt(childComplexity), true

	case "RecipeStepConnection.edges":
		if e.complexity.RecipeStepConnection.Edges == nil {
			break
		}

		return e.complexity.RecipeStepConnection.Edges(childComplexity), true

	case "RecipeStepConnection.pageInfo":
		if e.complexity.RecipeStepConnection.PageInfo == nil {
			break
		}

		return e.complexity.RecipeStepConnection.PageInfo(childComplexity), true

	case "RecipeStepDeletePayload.id":
		if e.complexity.RecipeStepDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeStepDeletePayload.ID(childComplexity), true

	case "RecipeStepEdge.cursor":
		if e.complexity.RecipeStepEdge.Cursor == nil {
			break
		}

		return e.complexity.RecipeStepEdge.Cursor(childComplexity), true

	case "RecipeStepEdge.node":
		if e.complexity.RecipeStepEdge.Node == nil {
			break
		}

		return e.complexity.RecipeStepEdge.Node(childComplexity), true

	case "RecipeStepPayload.recipeStep":
		if e.complexity.RecipeStepPayload.RecipeStep == nil {
			break
		}

		return e.complexity.RecipeStepPayload.RecipeStep(childComplexity), true

	case "RecipeStepsDeletePayload.ids":
		if e.complexity.RecipeStepsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipeStepsDeletePayload.Ids(childComplexity), true

	case "RecipeStepsUpdatePayload.ok":
		if e.complexity.RecipeStepsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipeStepsUpdatePayload.Ok(childComplexity), true

	case "RecipesDeletePayload.ids":
		if e.complexity.RecipesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.RecipesDeletePayload.Ids(childComplexity), true

	case "RecipesUpdatePayload.ok":
		if e.complexity.RecipesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.RecipesUpdatePayload.Ok(childComplexity), true

	case "Supplier.additiveInventories":
		if e.complexity.Supplier.AdditiveInventories == nil {
			break
		}

		return e.complexity.Supplier.AdditiveInventories(childComplexity), true

	case "Supplier.createdAt":
		if e.complexity.Supplier.CreatedAt == nil {
			break
		}

		return e.complexity.Supplier.CreatedAt(childComplexity), true

	case "Supplier.deletedAt":
		if e.complexity.Supplier.DeletedAt == nil {
			break
		}

		return e.complexity.Supplier.DeletedAt(childComplexity), true

	case "Supplier.fragranceInventories":
		if e.complexity.Supplier.FragranceInventories == nil {
			break
		}

		return e.complexity.Supplier.FragranceInventories(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.lipidInventories":
		if e.complexity.Supplier.LipidInventories == nil {
			break
		}

		return e.complexity.Supplier.LipidInventories(childComplexity), true

	case "Supplier.lyeInventories":
		if e.complexity.Supplier.LyeInventories == nil {
			break
		}

		return e.complexity.Supplier.LyeInventories(childComplexity), true

	case "Supplier.name":
		if e.complexity.Supplier.Name == nil {
			break
		}

		return e.complexity.Supplier.Name(childComplexity), true

	case "Supplier.note":
		if e.complexity.Supplier.Note == nil {
			break
		}

		return e.complexity.Supplier.Note(childComplexity), true

	case "Supplier.updatedAt":
		if e.complexity.Supplier.UpdatedAt == nil {
			break
		}

		return e.complexity.Supplier.UpdatedAt(childComplexity), true

	case "Supplier.website":
		if e.complexity.Supplier.Website == nil {
			break
		}

		return e.complexity.Supplier.Website(childComplexity), true

	case "SupplierConnection.edges":
		if e.complexity.SupplierConnection.Edges == nil {
			break
		}

		return e.complexity.SupplierConnection.Edges(childComplexity), true

	case "SupplierConnection.pageInfo":
		if e.complexity.SupplierConnection.PageInfo == nil {
			break
		}

		return e.complexity.SupplierConnection.PageInfo(childComplexity), true

	case "SupplierDeletePayload.id":
		if e.complexity.SupplierDeletePayload.ID == nil {
			break
		}

		return e.complexity.SupplierDeletePayload.ID(childComplexity), true

	case "SupplierEdge.cursor":
		if e.complexity.SupplierEdge.Cursor == nil {
			break
		}

		return e.complexity.SupplierEdge.Cursor(childComplexity), true

	case "SupplierEdge.node":
		if e.complexity.SupplierEdge.Node == nil {
			break
		}

		return e.complexity.SupplierEdge.Node(childComplexity), true

	case "SupplierPayload.supplier":
		if e.complexity.SupplierPayload.Supplier == nil {
			break
		}

		return e.complexity.SupplierPayload.Supplier(childComplexity), true

	case "SuppliersDeletePayload.ids":
		if e.complexity.SuppliersDeletePayload.Ids == nil {
			break
		}

		return e.complexity.SuppliersDeletePayload.Ids(childComplexity), true

	case "SuppliersUpdatePayload.ok":
		if e.complexity.SuppliersUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.SuppliersUpdatePayload.Ok(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "schema.graphql", Input: `directive @IsAuthenticated on FIELD_DEFINITION

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ConnectionForwardPagination {
  first: Int!
  after: ID
}

input ConnectionBackwardPagination {
  last: Int!
  before: ID
}

input ConnectionPagination {
  forward: ConnectionForwardPagination
  backward: ConnectionBackwardPagination
}

enum SortDirection {
  ASC
  DESC
}

enum AdditiveSort {
  ID
  NAME
  NOTE
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input AdditiveOrdering {
  sort: AdditiveSort!
  direction: SortDirection! = ASC
}

enum AdditiveInventorySort {
  ID
  PURCHASE_DATE
  EXPIRY_DATE
  COST
  WEIGHT
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input AdditiveInventoryOrdering {
  sort: AdditiveInventorySort!
  direction: SortDirection! = ASC
}

enum AuthGroupSort {
  ID
  NAME
}

input AuthGroupOrdering {
  sort: AuthGroupSort!
  direction: SortDirection! = ASC
}

enum AuthGroupPermissionSort {
  ID
}

input AuthGroupPermissionOrdering {
  sort: AuthGroupPermissionSort!
  direction: SortDirection! = ASC
}

enum AuthPermissionSort {
  ID
  NAME
  CODENAME
}

input AuthPermissionOrdering {
  sort: AuthPermissionSort!
  direction: SortDirection! = ASC
}

enum AuthUserSort {
  ID
  PASSWORD
  LAST_LOGIN
  IS_SUPERUSER
  USERNAME
  FIRST_NAME
  LAST_NAME
  EMAIL
  IS_STAFF
  IS_ACTIVE
  DATE_JOINED
}

input AuthUserOrdering {
  sort: AuthUserSort!
  direction: SortDirection! = ASC
}

enum AuthUserGroupSort {
  ID
}

input AuthUserGroupOrdering {
  sort: AuthUserGroupSort!
  direction: SortDirection! = ASC
}

enum AuthUserUserPermissionSort {
  ID
}

input AuthUserUserPermissionOrdering {
  sort: AuthUserUserPermissionSort!
  direction: SortDirection! = ASC
}

enum FragranceSort {
  ID
  NAME
  NOTE
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input FragranceOrdering {
  sort: FragranceSort!
  direction: SortDirection! = ASC
}

enum FragranceInventorySort {
  ID
  PURCHASE_DATE
  EXPIRY_DATE
  COST
  WEIGHT
  UPDATED_AT
  CREATED_AT
  DELETED_AT
}

input FragranceInventoryOrdering {
  sort: FragranceInventorySort!
  direction: SortDirection! = ASC
}

enum LipidSort {
  ID
  NAME
  LAURIC
  MYRISTIC
  PALMITIC
  STEARIC
  RICINOLEIC
  OLEIC
  LINOLEIC
  LINOLENIC
  HARDNESS
  CLEANSING
  CONDITIONING
  BUBBLY
  CREAMY
  IODINE
  INS
  INCI_NAME
  FAMILY
  NAOH
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input LipidOrdering {
  sort: LipidSort!
  direction: SortDirection! = ASC
}

enum LipidInventorySort {
  ID
  PURCHASE_DATE
  EXPIRY_DATE
  COST
  WEIGHT
  SAP
  NAOH
  KOH
  GRAMS_PER_LITER
  CREATED_AT
  UPDATED_AT
  DELETED_AT
}

input LipidInventoryOrdering {
  sort: LipidInventorySort!
  direction: SortDirection! = ASC
}

enum LyeSort {
  ID
  KIND
  NAME
  NOTE
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input LyeOrdering {
  sort: LyeSort!
  direction: SortDirection! = ASC
}

enum LyeInventorySort {
  ID
  PURCHASE_DATE
  EXPIRY_DATE
  COST
  WEIGHT
  CONCENTRATION
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input LyeInventoryOrdering {
  sort: LyeInventorySort!
  direction: SortDirection! = ASC
}

enum RecipeSort {
  ID
  NAME
  NOTE
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeOrdering {
  sort: RecipeSort!
  direction: SortDirection! = ASC
}

enum RecipeAdditiveSort {
  ID
  PERCENTAGE
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input RecipeAdditiveOrdering {
  sort: RecipeAdditiveSort!
  direction: SortDirection! = ASC
}

enum RecipeBatchSort {
  ID
  TAG
  PRODUCTION_DATE
  SELLABLE_DATE
  NOTE
  LIPID_WEIGHT
  PRODUCTION_WEIGHT
  CURED_WEIGHT
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input RecipeBatchOrdering {
  sort: RecipeBatchSort!
  direction: SortDirection! = ASC
}

enum RecipeBatchAdditiveSort {
  ID
  WEIGHT
  COST
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeBatchAdditiveOrdering {
  sort: RecipeBatchAdditiveSort!
  direction: SortDirection! = ASC
}

enum RecipeBatchFragranceSort {
  ID
  WEIGHT
  COST
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeBatchFragranceOrdering {
  sort: RecipeBatchFragranceSort!
  direction: SortDirection! = ASC
}

enum RecipeBatchLipidSort {
  ID
  WEIGHT
  COST
  DELETED_AT
  CREATED_AT
  UPDATED_AT
}

input RecipeBatchLipidOrdering {
  sort: RecipeBatchLipidSort!
  direction: SortDirection! = ASC
}

enum RecipeBatchLyeSort {
  ID
  WEIGHT
  DISCOUNT
  COST
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeBatchLyeOrdering {
  sort: RecipeBatchLyeSort!
  direction: SortDirection! = ASC
}

enum RecipeBatchNoteSort {
  ID
  NOTE
  LINK
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeBatchNoteOrdering {
  sort: RecipeBatchNoteSort!
  direction: SortDirection! = ASC
}

enum RecipeFragranceSort {
  ID
  PERCENTAGE
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeFragranceOrdering {
  sort: RecipeFragranceSort!
  direction: SortDirection! = ASC
}

enum RecipeLipidSort {
  ID
  PERCENTAGE
  DELETED_AT
  UPDATED_AT
  CREATED_AT
}

input RecipeLipidOrdering {
  sort: RecipeLipidSort!
  direction: SortDirection! = ASC
}

enum RecipeStepSort {
  ID
  NUM
  NOTE
  UPDATED_AT
  CREATED_AT
  DELETED_AT
}

input RecipeStepOrdering {
  sort: RecipeStepSort!
  direction: SortDirection! = ASC
}

enum SupplierSort {
  ID
  NAME
  WEBSITE
  NOTE
  UPDATED_AT
  DELETED_AT
  CREATED_AT
}

input SupplierOrdering {
  sort: SupplierSort!
  direction: SortDirection! = ASC
}

type Additive implements Node {
  id: ID!
  name: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
  recipeAdditive: RecipeAdditive
  recipeBatchAdditive: RecipeBatchAdditive
  additiveInventories: [AdditiveInventory]
}

type AdditiveInventory implements Node {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  additive: Additive!
  supplier: Supplier!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type AuthGroup implements Node {
  id: ID!
  name: String!
  groupAuthGroupPermissions: [AuthGroupPermission]
  groupAuthUserGroups: [AuthUserGroup]
}

type AuthGroupPermission implements Node {
  id: ID!
  group: AuthGroup!
  permission: AuthPermission!
}

type AuthPermission implements Node {
  id: ID!
  name: String!
  contentTypeId: ID!
  codename: String!
  permissionAuthGroupPermissions: [AuthGroupPermission]
  permissionAuthUserUserPermissions: [AuthUserUserPermission]
}

type AuthUser implements Node {
  id: ID!
  password: String!
  lastLogin: Int
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: Int!
  userAuthUserGroups: [AuthUserGroup]
  userAuthUserUserPermissions: [AuthUserUserPermission]
}

type AuthUserGroup implements Node {
  id: ID!
  user: AuthUser!
  group: AuthGroup!
}

type AuthUserUserPermission implements Node {
  id: ID!
  user: AuthUser!
  permission: AuthPermission!
}

type Fragrance implements Node {
  id: ID!
  name: String!
  note: String!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
  recipeBatchFragrance: RecipeBatchFragrance
  recipeFragrance: RecipeFragrance
  fragranceInventories: [FragranceInventory]
}

type FragranceInventory implements Node {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  fragrance: Fragrance!
  supplier: Supplier!
  updatedAt: Int!
  createdAt: Int!
  deletedAt: Int
}

type Lipid implements Node {
  id: ID!
  name: String!
  lauric: Int!
  myristic: Int!
  palmitic: Int!
  stearic: Int!
  ricinoleic: Int!
  oleic: Int!
  linoleic: Int!
  linolenic: Int!
  hardness: Int!
  cleansing: Int!
  conditioning: Int!
  bubbly: Int!
  creamy: Int!
  iodine: Int!
  ins: Int!
  inciName: String!
  family: String!
  naoh: Float!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
  recipeBatchLipid: RecipeBatchLipid
  recipeLipid: RecipeLipid
  lipidInventories: [LipidInventory]
}

type LipidInventory implements Node {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  sap: Float!
  naoh: Float!
  koh: Float!
  gramsPerLiter: Float!
  lipid: Lipid!
  supplier: Supplier!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

type Lye implements Node {
  id: ID!
  kind: String!
  name: String!
  note: String!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
  recipeBatchLye: RecipeBatchLye
  lyeInventories: [LyeInventory]
}

type LyeInventory implements Node {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  concentration: Float!
  lye: Lye!
  supplier: Supplier!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

type Recipe implements Node {
  id: ID!
  name: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
  recipeAdditives: [RecipeAdditive]
  recipeBatches: [RecipeBatch]
  recipeFragrances: [RecipeFragrance]
  recipeLipids: [RecipeLipid]
  recipeSteps: [RecipeStep]
}

type RecipeAdditive implements Node {
  id: ID!
  percentage: Float!
  additive: Additive!
  recipe: Recipe!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

type RecipeBatch implements Node {
  id: ID!
  tag: String!
  productionDate: Int!
  sellableDate: Int!
  note: String!
  lipidWeight: Float!
  productionWeight: Float!
  curedWeight: Float!
  recipe: Recipe!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
  batchRecipeBatchAdditives: [RecipeBatchAdditive]
  batchRecipeBatchFragrances: [RecipeBatchFragrance]
  batchRecipeBatchLipids: [RecipeBatchLipid]
  batchRecipeBatchLyes: [RecipeBatchLye]
  batchRecipeBatchNotes: [RecipeBatchNote]
}

type RecipeBatchAdditive implements Node {
  id: ID!
  weight: Float!
  cost: Float!
  additive: Additive!
  batch: RecipeBatch!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeBatchFragrance implements Node {
  id: ID!
  weight: Float!
  cost: Float!
  fragrance: Fragrance!
  batch: RecipeBatch!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeBatchLipid implements Node {
  id: ID!
  weight: Float!
  cost: Float!
  lipid: Lipid!
  batch: RecipeBatch!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

type RecipeBatchLye implements Node {
  id: ID!
  weight: Float!
  discount: Float!
  cost: Float!
  lye: Lye!
  batch: RecipeBatch!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeBatchNote implements Node {
  id: ID!
  note: String!
  link: String!
  batch: RecipeBatch!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeFragrance implements Node {
  id: ID!
  percentage: Float!
  fragrance: Fragrance!
  recipe: Recipe!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeLipid implements Node {
  id: ID!
  percentage: Float!
  lipid: Lipid!
  recipe: Recipe!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeStep implements Node {
  id: ID!
  num: Int!
  note: String!
  recipe: Recipe!
  updatedAt: Int!
  createdAt: Int!
  deletedAt: Int
}

type Supplier implements Node {
  id: ID!
  name: String!
  website: String!
  note: String!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
  additiveInventories: [AdditiveInventory]
  fragranceInventories: [FragranceInventory]
  lipidInventories: [LipidInventory]
  lyeInventories: [LyeInventory]
}

type AdditiveEdge {
  cursor: String!
  node: Additive
}

type AdditiveInventoryEdge {
  cursor: String!
  node: AdditiveInventory
}

type AuthGroupEdge {
  cursor: String!
  node: AuthGroup
}

type AuthGroupPermissionEdge {
  cursor: String!
  node: AuthGroupPermission
}

type AuthPermissionEdge {
  cursor: String!
  node: AuthPermission
}

type AuthUserEdge {
  cursor: String!
  node: AuthUser
}

type AuthUserGroupEdge {
  cursor: String!
  node: AuthUserGroup
}

type AuthUserUserPermissionEdge {
  cursor: String!
  node: AuthUserUserPermission
}

type FragranceEdge {
  cursor: String!
  node: Fragrance
}

type FragranceInventoryEdge {
  cursor: String!
  node: FragranceInventory
}

type LipidEdge {
  cursor: String!
  node: Lipid
}

type LipidInventoryEdge {
  cursor: String!
  node: LipidInventory
}

type LyeEdge {
  cursor: String!
  node: Lye
}

type LyeInventoryEdge {
  cursor: String!
  node: LyeInventory
}

type RecipeEdge {
  cursor: String!
  node: Recipe
}

type RecipeAdditiveEdge {
  cursor: String!
  node: RecipeAdditive
}

type RecipeBatchEdge {
  cursor: String!
  node: RecipeBatch
}

type RecipeBatchAdditiveEdge {
  cursor: String!
  node: RecipeBatchAdditive
}

type RecipeBatchFragranceEdge {
  cursor: String!
  node: RecipeBatchFragrance
}

type RecipeBatchLipidEdge {
  cursor: String!
  node: RecipeBatchLipid
}

type RecipeBatchLyeEdge {
  cursor: String!
  node: RecipeBatchLye
}

type RecipeBatchNoteEdge {
  cursor: String!
  node: RecipeBatchNote
}

type RecipeFragranceEdge {
  cursor: String!
  node: RecipeFragrance
}

type RecipeLipidEdge {
  cursor: String!
  node: RecipeLipid
}

type RecipeStepEdge {
  cursor: String!
  node: RecipeStep
}

type SupplierEdge {
  cursor: String!
  node: Supplier
}

type AdditiveConnection {
  edges: [AdditiveEdge]
  pageInfo: PageInfo!
}

type AdditiveInventoryConnection {
  edges: [AdditiveInventoryEdge]
  pageInfo: PageInfo!
}

type AuthGroupConnection {
  edges: [AuthGroupEdge]
  pageInfo: PageInfo!
}

type AuthGroupPermissionConnection {
  edges: [AuthGroupPermissionEdge]
  pageInfo: PageInfo!
}

type AuthPermissionConnection {
  edges: [AuthPermissionEdge]
  pageInfo: PageInfo!
}

type AuthUserConnection {
  edges: [AuthUserEdge]
  pageInfo: PageInfo!
}

type AuthUserGroupConnection {
  edges: [AuthUserGroupEdge]
  pageInfo: PageInfo!
}

type AuthUserUserPermissionConnection {
  edges: [AuthUserUserPermissionEdge]
  pageInfo: PageInfo!
}

type FragranceConnection {
  edges: [FragranceEdge]
  pageInfo: PageInfo!
}

type FragranceInventoryConnection {
  edges: [FragranceInventoryEdge]
  pageInfo: PageInfo!
}

type LipidConnection {
  edges: [LipidEdge]
  pageInfo: PageInfo!
}

type LipidInventoryConnection {
  edges: [LipidInventoryEdge]
  pageInfo: PageInfo!
}

type LyeConnection {
  edges: [LyeEdge]
  pageInfo: PageInfo!
}

type LyeInventoryConnection {
  edges: [LyeInventoryEdge]
  pageInfo: PageInfo!
}

type RecipeConnection {
  edges: [RecipeEdge]
  pageInfo: PageInfo!
}

type RecipeAdditiveConnection {
  edges: [RecipeAdditiveEdge]
  pageInfo: PageInfo!
}

type RecipeBatchConnection {
  edges: [RecipeBatchEdge]
  pageInfo: PageInfo!
}

type RecipeBatchAdditiveConnection {
  edges: [RecipeBatchAdditiveEdge]
  pageInfo: PageInfo!
}

type RecipeBatchFragranceConnection {
  edges: [RecipeBatchFragranceEdge]
  pageInfo: PageInfo!
}

type RecipeBatchLipidConnection {
  edges: [RecipeBatchLipidEdge]
  pageInfo: PageInfo!
}

type RecipeBatchLyeConnection {
  edges: [RecipeBatchLyeEdge]
  pageInfo: PageInfo!
}

type RecipeBatchNoteConnection {
  edges: [RecipeBatchNoteEdge]
  pageInfo: PageInfo!
}

type RecipeFragranceConnection {
  edges: [RecipeFragranceEdge]
  pageInfo: PageInfo!
}

type RecipeLipidConnection {
  edges: [RecipeLipidEdge]
  pageInfo: PageInfo!
}

type RecipeStepConnection {
  edges: [RecipeStepEdge]
  pageInfo: PageInfo!
}

type SupplierConnection {
  edges: [SupplierEdge]
  pageInfo: PageInfo!
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  equalTo: Boolean
  notEqualTo: Boolean
}

input AdditiveFilter {
  search: String
  where: AdditiveWhere
}

input AdditiveWhere {
  id: IDFilter
  name: StringFilter
  note: StringFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  recipeAdditive: RecipeAdditiveWhere
  recipeBatchAdditive: RecipeBatchAdditiveWhere
  additiveInventories: AdditiveInventoryWhere
  or: AdditiveWhere
  and: AdditiveWhere
}

input AdditiveInventoryFilter {
  search: String
  where: AdditiveInventoryWhere
}

input AdditiveInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  additive: AdditiveWhere
  supplier: SupplierWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: AdditiveInventoryWhere
  and: AdditiveInventoryWhere
}

input AuthGroupFilter {
  search: String
  where: AuthGroupWhere
}

input AuthGroupWhere {
  id: IDFilter
  name: StringFilter
  groupAuthGroupPermissions: AuthGroupPermissionWhere
  groupAuthUserGroups: AuthUserGroupWhere
  or: AuthGroupWhere
  and: AuthGroupWhere
}

input AuthGroupPermissionFilter {
  search: String
  where: AuthGroupPermissionWhere
}

input AuthGroupPermissionWhere {
  id: IDFilter
  group: AuthGroupWhere
  permission: AuthPermissionWhere
  or: AuthGroupPermissionWhere
  and: AuthGroupPermissionWhere
}

input AuthPermissionFilter {
  search: String
  where: AuthPermissionWhere
}

input AuthPermissionWhere {
  id: IDFilter
  name: StringFilter
  contentTypeId: IDFilter
  codename: StringFilter
  permissionAuthGroupPermissions: AuthGroupPermissionWhere
  permissionAuthUserUserPermissions: AuthUserUserPermissionWhere
  or: AuthPermissionWhere
  and: AuthPermissionWhere
}

input AuthUserFilter {
  search: String
  where: AuthUserWhere
}

input AuthUserWhere {
  id: IDFilter
  password: StringFilter
  lastLogin: IntFilter
  isSuperuser: BooleanFilter
  username: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  isStaff: BooleanFilter
  isActive: BooleanFilter
  dateJoined: IntFilter
  userAuthUserGroups: AuthUserGroupWhere
  userAuthUserUserPermissions: AuthUserUserPermissionWhere
  or: AuthUserWhere
  and: AuthUserWhere
}

input AuthUserGroupFilter {
  search: String
  where: AuthUserGroupWhere
}

input AuthUserGroupWhere {
  id: IDFilter
  user: AuthUserWhere
  group: AuthGroupWhere
  or: AuthUserGroupWhere
  and: AuthUserGroupWhere
}

input AuthUserUserPermissionFilter {
  search: String
  where: AuthUserUserPermissionWhere
}

input AuthUserUserPermissionWhere {
  id: IDFilter
  user: AuthUserWhere
  permission: AuthPermissionWhere
  or: AuthUserUserPermissionWhere
  and: AuthUserUserPermissionWhere
}

input FragranceFilter {
  search: String
  where: FragranceWhere
}

input FragranceWhere {
  id: IDFilter
  name: StringFilter
  note: StringFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  recipeBatchFragrance: RecipeBatchFragranceWhere
  recipeFragrance: RecipeFragranceWhere
  fragranceInventories: FragranceInventoryWhere
  or: FragranceWhere
  and: FragranceWhere
}

input FragranceInventoryFilter {
  search: String
  where: FragranceInventoryWhere
}

input FragranceInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  fragrance: FragranceWhere
  supplier: SupplierWhere
  updatedAt: IntFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  or: FragranceInventoryWhere
  and: FragranceInventoryWhere
}

input LipidFilter {
  search: String
  where: LipidWhere
}

input LipidWhere {
  id: IDFilter
  name: StringFilter
  lauric: IntFilter
  myristic: IntFilter
  palmitic: IntFilter
  stearic: IntFilter
  ricinoleic: IntFilter
  oleic: IntFilter
  linoleic: IntFilter
  linolenic: IntFilter
  hardness: IntFilter
  cleansing: IntFilter
  conditioning: IntFilter
  bubbly: IntFilter
  creamy: IntFilter
  iodine: IntFilter
  ins: IntFilter
  inciName: StringFilter
  family: StringFilter
  naoh: FloatFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  recipeBatchLipid: RecipeBatchLipidWhere
  recipeLipid: RecipeLipidWhere
  lipidInventories: LipidInventoryWhere
  or: LipidWhere
  and: LipidWhere
}

input LipidInventoryFilter {
  search: String
  where: LipidInventoryWhere
}

input LipidInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  sap: FloatFilter
  naoh: FloatFilter
  koh: FloatFilter
  gramsPerLiter: FloatFilter
  lipid: LipidWhere
  supplier: SupplierWhere
  createdAt: IntFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  or: LipidInventoryWhere
  and: LipidInventoryWhere
}

input LyeFilter {
  search: String
  where: LyeWhere
}

input LyeWhere {
  id: IDFilter
  kind: StringFilter
  name: StringFilter
  note: StringFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  recipeBatchLye: RecipeBatchLyeWhere
  lyeInventories: LyeInventoryWhere
  or: LyeWhere
  and: LyeWhere
}

input LyeInventoryFilter {
  search: String
  where: LyeInventoryWhere
}

input LyeInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  concentration: FloatFilter
  lye: LyeWhere
  supplier: SupplierWhere
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  or: LyeInventoryWhere
  and: LyeInventoryWhere
}

input RecipeFilter {
  search: String
  where: RecipeWhere
}

input RecipeWhere {
  id: IDFilter
  name: StringFilter
  note: StringFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  recipeAdditives: RecipeAdditiveWhere
  recipeBatches: RecipeBatchWhere
  recipeFragrances: RecipeFragranceWhere
  recipeLipids: RecipeLipidWhere
  recipeSteps: RecipeStepWhere
  or: RecipeWhere
  and: RecipeWhere
}

input RecipeAdditiveFilter {
  search: String
  where: RecipeAdditiveWhere
}

input RecipeAdditiveWhere {
  id: IDFilter
  percentage: FloatFilter
  additive: AdditiveWhere
  recipe: RecipeWhere
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  or: RecipeAdditiveWhere
  and: RecipeAdditiveWhere
}

input RecipeBatchFilter {
  search: String
  where: RecipeBatchWhere
}

input RecipeBatchWhere {
  id: IDFilter
  tag: StringFilter
  productionDate: IntFilter
  sellableDate: IntFilter
  note: StringFilter
  lipidWeight: FloatFilter
  productionWeight: FloatFilter
  curedWeight: FloatFilter
  recipe: RecipeWhere
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  batchRecipeBatchAdditives: RecipeBatchAdditiveWhere
  batchRecipeBatchFragrances: RecipeBatchFragranceWhere
  batchRecipeBatchLipids: RecipeBatchLipidWhere
  batchRecipeBatchLyes: RecipeBatchLyeWhere
  batchRecipeBatchNotes: RecipeBatchNoteWhere
  or: RecipeBatchWhere
  and: RecipeBatchWhere
}

input RecipeBatchAdditiveFilter {
  search: String
  where: RecipeBatchAdditiveWhere
}

input RecipeBatchAdditiveWhere {
  id: IDFilter
  weight: FloatFilter
  cost: FloatFilter
  additive: AdditiveWhere
  batch: RecipeBatchWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchAdditiveWhere
  and: RecipeBatchAdditiveWhere
}

input RecipeBatchFragranceFilter {
  search: String
  where: RecipeBatchFragranceWhere
}

input RecipeBatchFragranceWhere {
  id: IDFilter
  weight: FloatFilter
  cost: FloatFilter
  fragrance: FragranceWhere
  batch: RecipeBatchWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchFragranceWhere
  and: RecipeBatchFragranceWhere
}

input RecipeBatchLipidFilter {
  search: String
  where: RecipeBatchLipidWhere
}

input RecipeBatchLipidWhere {
  id: IDFilter
  weight: FloatFilter
  cost: FloatFilter
  lipid: LipidWhere
  batch: RecipeBatchWhere
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  or: RecipeBatchLipidWhere
  and: RecipeBatchLipidWhere
}

input RecipeBatchLyeFilter {
  search: String
  where: RecipeBatchLyeWhere
}

input RecipeBatchLyeWhere {
  id: IDFilter
  weight: FloatFilter
  discount: FloatFilter
  cost: FloatFilter
  lye: LyeWhere
  batch: RecipeBatchWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchLyeWhere
  and: RecipeBatchLyeWhere
}

input RecipeBatchNoteFilter {
  search: String
  where: RecipeBatchNoteWhere
}

input RecipeBatchNoteWhere {
  id: IDFilter
  note: StringFilter
  link: StringFilter
  batch: RecipeBatchWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchNoteWhere
  and: RecipeBatchNoteWhere
}

input RecipeFragranceFilter {
  search: String
  where: RecipeFragranceWhere
}

input RecipeFragranceWhere {
  id: IDFilter
  percentage: FloatFilter
  fragrance: FragranceWhere
  recipe: RecipeWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeFragranceWhere
  and: RecipeFragranceWhere
}

input RecipeLipidFilter {
  search: String
  where: RecipeLipidWhere
}

input RecipeLipidWhere {
  id: IDFilter
  percentage: FloatFilter
  lipid: LipidWhere
  recipe: RecipeWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeLipidWhere
  and: RecipeLipidWhere
}

input RecipeStepFilter {
  search: String
  where: RecipeStepWhere
}

input RecipeStepWhere {
  id: IDFilter
  num: IntFilter
  note: StringFilter
  recipe: RecipeWhere
  updatedAt: IntFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  or: RecipeStepWhere
  and: RecipeStepWhere
}

input SupplierFilter {
  search: String
  where: SupplierWhere
}

input SupplierWhere {
  id: IDFilter
  name: StringFilter
  website: StringFilter
  note: StringFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  additiveInventories: AdditiveInventoryWhere
  fragranceInventories: FragranceInventoryWhere
  lipidInventories: LipidInventoryWhere
  lyeInventories: LyeInventoryWhere
  or: SupplierWhere
  and: SupplierWhere
}

type Query {
  node(id: ID!): Node
  additive(id: ID!): Additive! @IsAuthenticated
  additives(
    pagination: ConnectionPagination!
    ordering: [AdditiveOrdering!]
    filter: AdditiveFilter
  ): AdditiveConnection! @IsAuthenticated
  additiveInventory(id: ID!): AdditiveInventory! @IsAuthenticated
  additiveInventories(
    pagination: ConnectionPagination!
    ordering: [AdditiveInventoryOrdering!]
    filter: AdditiveInventoryFilter
  ): AdditiveInventoryConnection! @IsAuthenticated
  authGroup(id: ID!): AuthGroup! @IsAuthenticated
  authGroups(
    pagination: ConnectionPagination!
    ordering: [AuthGroupOrdering!]
    filter: AuthGroupFilter
  ): AuthGroupConnection! @IsAuthenticated
  authGroupPermission(id: ID!): AuthGroupPermission! @IsAuthenticated
  authGroupPermissions(
    pagination: ConnectionPagination!
    ordering: [AuthGroupPermissionOrdering!]
    filter: AuthGroupPermissionFilter
  ): AuthGroupPermissionConnection! @IsAuthenticated
  authPermission(id: ID!): AuthPermission! @IsAuthenticated
  authPermissions(
    pagination: ConnectionPagination!
    ordering: [AuthPermissionOrdering!]
    filter: AuthPermissionFilter
  ): AuthPermissionConnection! @IsAuthenticated
  authUser(id: ID!): AuthUser! @IsAuthenticated
  authUsers(
    pagination: ConnectionPagination!
    ordering: [AuthUserOrdering!]
    filter: AuthUserFilter
  ): AuthUserConnection! @IsAuthenticated
  authUserGroup(id: ID!): AuthUserGroup! @IsAuthenticated
  authUserGroups(
    pagination: ConnectionPagination!
    ordering: [AuthUserGroupOrdering!]
    filter: AuthUserGroupFilter
  ): AuthUserGroupConnection! @IsAuthenticated
  authUserUserPermission(id: ID!): AuthUserUserPermission! @IsAuthenticated
  authUserUserPermissions(
    pagination: ConnectionPagination!
    ordering: [AuthUserUserPermissionOrdering!]
    filter: AuthUserUserPermissionFilter
  ): AuthUserUserPermissionConnection! @IsAuthenticated
  fragrance(id: ID!): Fragrance! @IsAuthenticated
  fragrances(
    pagination: ConnectionPagination!
    ordering: [FragranceOrdering!]
    filter: FragranceFilter
  ): FragranceConnection! @IsAuthenticated
  fragranceInventory(id: ID!): FragranceInventory! @IsAuthenticated
  fragranceInventories(
    pagination: ConnectionPagination!
    ordering: [FragranceInventoryOrdering!]
    filter: FragranceInventoryFilter
  ): FragranceInventoryConnection! @IsAuthenticated
  lipid(id: ID!): Lipid! @IsAuthenticated
  lipids(
    pagination: ConnectionPagination!
    ordering: [LipidOrdering!]
    filter: LipidFilter
  ): LipidConnection! @IsAuthenticated
  lipidInventory(id: ID!): LipidInventory! @IsAuthenticated
  lipidInventories(
    pagination: ConnectionPagination!
    ordering: [LipidInventoryOrdering!]
    filter: LipidInventoryFilter
  ): LipidInventoryConnection! @IsAuthenticated
  lye(id: ID!): Lye! @IsAuthenticated
  lyes(
    pagination: ConnectionPagination!
    ordering: [LyeOrdering!]
    filter: LyeFilter
  ): LyeConnection! @IsAuthenticated
  lyeInventory(id: ID!): LyeInventory! @IsAuthenticated
  lyeInventories(
    pagination: ConnectionPagination!
    ordering: [LyeInventoryOrdering!]
    filter: LyeInventoryFilter
  ): LyeInventoryConnection! @IsAuthenticated
  recipe(id: ID!): Recipe! @IsAuthenticated
  recipes(
    pagination: ConnectionPagination!
    ordering: [RecipeOrdering!]
    filter: RecipeFilter
  ): RecipeConnection! @IsAuthenticated
  recipeAdditive(id: ID!): RecipeAdditive! @IsAuthenticated
  recipeAdditives(
    pagination: ConnectionPagination!
    ordering: [RecipeAdditiveOrdering!]
    filter: RecipeAdditiveFilter
  ): RecipeAdditiveConnection! @IsAuthenticated
  recipeBatch(id: ID!): RecipeBatch! @IsAuthenticated
  recipeBatches(
    pagination: ConnectionPagination!
    ordering: [RecipeBatchOrdering!]
    filter: RecipeBatchFilter
  ): RecipeBatchConnection! @IsAuthenticated
  recipeBatchAdditive(id: ID!): RecipeBatchAdditive! @IsAuthenticated
  recipeBatchAdditives(
    pagination: ConnectionPagination!
    ordering: [RecipeBatchAdditiveOrdering!]
    filter: RecipeBatchAdditiveFilter
  ): RecipeBatchAdditiveConnection! @IsAuthenticated
  recipeBatchFragrance(id: ID!): RecipeBatchFragrance! @IsAuthenticated
  recipeBatchFragrances(
    pagination: ConnectionPagination!
    ordering: [RecipeBatchFragranceOrdering!]
    filter: RecipeBatchFragranceFilter
  ): RecipeBatchFragranceConnection! @IsAuthenticated
  recipeBatchLipid(id: ID!): RecipeBatchLipid! @IsAuthenticated
  recipeBatchLipids(
    pagination: ConnectionPagination!
    ordering: [RecipeBatchLipidOrdering!]
    filter: RecipeBatchLipidFilter
  ): RecipeBatchLipidConnection! @IsAuthenticated
  recipeBatchLye(id: ID!): RecipeBatchLye! @IsAuthenticated
  recipeBatchLyes(
    pagination: ConnectionPagination!
    ordering: [RecipeBatchLyeOrdering!]
    filter: RecipeBatchLyeFilter
  ): RecipeBatchLyeConnection! @IsAuthenticated
  recipeBatchNote(id: ID!): RecipeBatchNote! @IsAuthenticated
  recipeBatchNotes(
    pagination: ConnectionPagination!
    ordering: [RecipeBatchNoteOrdering!]
    filter: RecipeBatchNoteFilter
  ): RecipeBatchNoteConnection! @IsAuthenticated
  recipeFragrance(id: ID!): RecipeFragrance! @IsAuthenticated
  recipeFragrances(
    pagination: ConnectionPagination!
    ordering: [RecipeFragranceOrdering!]
    filter: RecipeFragranceFilter
  ): RecipeFragranceConnection! @IsAuthenticated
  recipeLipid(id: ID!): RecipeLipid! @IsAuthenticated
  recipeLipids(
    pagination: ConnectionPagination!
    ordering: [RecipeLipidOrdering!]
    filter: RecipeLipidFilter
  ): RecipeLipidConnection! @IsAuthenticated
  recipeStep(id: ID!): RecipeStep! @IsAuthenticated
  recipeSteps(
    pagination: ConnectionPagination!
    ordering: [RecipeStepOrdering!]
    filter: RecipeStepFilter
  ): RecipeStepConnection! @IsAuthenticated
  supplier(id: ID!): Supplier! @IsAuthenticated
  suppliers(
    pagination: ConnectionPagination!
    ordering: [SupplierOrdering!]
    filter: SupplierFilter
  ): SupplierConnection! @IsAuthenticated
}

input AdditiveCreateInput {
  name: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input AdditiveUpdateInput {
  name: String
  note: String
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type AdditivePayload {
  additive: Additive!
}

type AdditiveDeletePayload {
  id: ID!
}

type AdditivesDeletePayload {
  ids: [ID!]!
}

type AdditivesUpdatePayload {
  ok: Boolean!
}

input AdditiveInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  additiveId: ID!
  supplierId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input AdditiveInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  additiveId: ID
  supplierId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type AdditiveInventoryPayload {
  additiveInventory: AdditiveInventory!
}

type AdditiveInventoryDeletePayload {
  id: ID!
}

type AdditiveInventoriesDeletePayload {
  ids: [ID!]!
}

type AdditiveInventoriesUpdatePayload {
  ok: Boolean!
}

input AuthGroupCreateInput {
  name: String!
}

input AuthGroupUpdateInput {
  name: String
}

type AuthGroupPayload {
  authGroup: AuthGroup!
}

type AuthGroupDeletePayload {
  id: ID!
}

type AuthGroupsDeletePayload {
  ids: [ID!]!
}

type AuthGroupsUpdatePayload {
  ok: Boolean!
}

input AuthGroupPermissionCreateInput {
  groupId: ID!
  permissionId: ID!
}

input AuthGroupPermissionUpdateInput {
  groupId: ID
  permissionId: ID
}

type AuthGroupPermissionPayload {
  authGroupPermission: AuthGroupPermission!
}

type AuthGroupPermissionDeletePayload {
  id: ID!
}

type AuthGroupPermissionsDeletePayload {
  ids: [ID!]!
}

type AuthGroupPermissionsUpdatePayload {
  ok: Boolean!
}

input AuthPermissionCreateInput {
  name: String!
  contentTypeId: ID!
  codename: String!
}

input AuthPermissionUpdateInput {
  name: String
  contentTypeId: ID
  codename: String
}

type AuthPermissionPayload {
  authPermission: AuthPermission!
}

type AuthPermissionDeletePayload {
  id: ID!
}

type AuthPermissionsDeletePayload {
  ids: [ID!]!
}

type AuthPermissionsUpdatePayload {
  ok: Boolean!
}

input AuthUserCreateInput {
  password: String!
  lastLogin: Int
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: Int!
}

input AuthUserUpdateInput {
  password: String
  lastLogin: Int
  isSuperuser: Boolean
  username: String
  firstName: String
  lastName: String
  email: String
  isStaff: Boolean
  isActive: Boolean
  dateJoined: Int
}

type AuthUserPayload {
  authUser: AuthUser!
}

type AuthUserDeletePayload {
  id: ID!
}

type AuthUsersDeletePayload {
  ids: [ID!]!
}

type AuthUsersUpdatePayload {
  ok: Boolean!
}

input AuthUserGroupCreateInput {
  userId: ID!
  groupId: ID!
}

input AuthUserGroupUpdateInput {
  userId: ID
  groupId: ID
}

type AuthUserGroupPayload {
  authUserGroup: AuthUserGroup!
}

type AuthUserGroupDeletePayload {
  id: ID!
}

type AuthUserGroupsDeletePayload {
  ids: [ID!]!
}

type AuthUserGroupsUpdatePayload {
  ok: Boolean!
}

input AuthUserUserPermissionCreateInput {
  userId: ID!
  permissionId: ID!
}

input AuthUserUserPermissionUpdateInput {
  userId: ID
  permissionId: ID
}

type AuthUserUserPermissionPayload {
  authUserUserPermission: AuthUserUserPermission!
}

type AuthUserUserPermissionDeletePayload {
  id: ID!
}

type AuthUserUserPermissionsDeletePayload {
  ids: [ID!]!
}

type AuthUserUserPermissionsUpdatePayload {
  ok: Boolean!
}

input FragranceCreateInput {
  name: String!
  note: String!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input FragranceUpdateInput {
  name: String
  note: String
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type FragrancePayload {
  fragrance: Fragrance!
}

type FragranceDeletePayload {
  id: ID!
}

type FragrancesDeletePayload {
  ids: [ID!]!
}

type FragrancesUpdatePayload {
  ok: Boolean!
}

input FragranceInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  fragranceId: ID!
  supplierId: ID!
  updatedAt: Int!
  createdAt: Int!
  deletedAt: Int
}

input FragranceInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  fragranceId: ID
  supplierId: ID
  updatedAt: Int
  createdAt: Int
  deletedAt: Int
}

type FragranceInventoryPayload {
  fragranceInventory: FragranceInventory!
}

type FragranceInventoryDeletePayload {
  id: ID!
}

type FragranceInventoriesDeletePayload {
  ids: [ID!]!
}

type FragranceInventoriesUpdatePayload {
  ok: Boolean!
}

input LipidCreateInput {
  name: String!
  lauric: Int!
  myristic: Int!
  palmitic: Int!
  stearic: Int!
  ricinoleic: Int!
  oleic: Int!
  linoleic: Int!
  linolenic: Int!
  hardness: Int!
  cleansing: Int!
  conditioning: Int!
  bubbly: Int!
  creamy: Int!
  iodine: Int!
  ins: Int!
  inciName: String!
  family: String!
  naoh: Float!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input LipidUpdateInput {
  name: String
  lauric: Int
  myristic: Int
  palmitic: Int
  stearic: Int
  ricinoleic: Int
  oleic: Int
  linoleic: Int
  linolenic: Int
  hardness: Int
  cleansing: Int
  conditioning: Int
  bubbly: Int
  creamy: Int
  iodine: Int
  ins: Int
  inciName: String
  family: String
  naoh: Float
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type LipidPayload {
  lipid: Lipid!
}

type LipidDeletePayload {
  id: ID!
}

type LipidsDeletePayload {
  ids: [ID!]!
}

type LipidsUpdatePayload {
  ok: Boolean!
}

input LipidInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  sap: Float!
  naoh: Float!
  koh: Float!
  gramsPerLiter: Float!
  lipidId: ID!
  supplierId: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

input LipidInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  sap: Float
  naoh: Float
  koh: Float
  gramsPerLiter: Float
  lipidId: ID
  supplierId: ID
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type LipidInventoryPayload {
  lipidInventory: LipidInventory!
}

type LipidInventoryDeletePayload {
  id: ID!
}

type LipidInventoriesDeletePayload {
  ids: [ID!]!
}

type LipidInventoriesUpdatePayload {
  ok: Boolean!
}

input LyeCreateInput {
  kind: String!
  name: String!
  note: String!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input LyeUpdateInput {
  kind: String
  name: String
  note: String
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type LyePayload {
  lye: Lye!
}

type LyeDeletePayload {
  id: ID!
}

type LyesDeletePayload {
  ids: [ID!]!
}

type LyesUpdatePayload {
  ok: Boolean!
}

input LyeInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  concentration: Float!
  lyeId: ID!
  supplierId: ID!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input LyeInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  concentration: Float
  lyeId: ID
  supplierId: ID
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type LyeInventoryPayload {
  lyeInventory: LyeInventory!
}

type LyeInventoryDeletePayload {
  id: ID!
}

type LyeInventoriesDeletePayload {
  ids: [ID!]!
}

type LyeInventoriesUpdatePayload {
  ok: Boolean!
}

input RecipeCreateInput {
  name: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeUpdateInput {
  name: String
  note: String
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipePayload {
  recipe: Recipe!
}

type RecipeDeletePayload {
  id: ID!
}

type RecipesDeletePayload {
  ids: [ID!]!
}

type RecipesUpdatePayload {
  ok: Boolean!
}

input RecipeAdditiveCreateInput {
  percentage: Float!
  additiveId: ID!
  recipeId: ID!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input RecipeAdditiveUpdateInput {
  percentage: Float
  additiveId: ID
  recipeId: ID
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type RecipeAdditivePayload {
  recipeAdditive: RecipeAdditive!
}

type RecipeAdditiveDeletePayload {
  id: ID!
}

type RecipeAdditivesDeletePayload {
  ids: [ID!]!
}

type RecipeAdditivesUpdatePayload {
  ok: Boolean!
}

input RecipeBatchCreateInput {
  tag: String!
  productionDate: Int!
  sellableDate: Int!
  note: String!
  lipidWeight: Float!
  productionWeight: Float!
  curedWeight: Float!
  recipeId: ID!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input RecipeBatchUpdateInput {
  tag: String
  productionDate: Int
  sellableDate: Int
  note: String
  lipidWeight: Float
  productionWeight: Float
  curedWeight: Float
  recipeId: ID
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type RecipeBatchPayload {
  recipeBatch: RecipeBatch!
}

type RecipeBatchDeletePayload {
  id: ID!
}

type RecipeBatchesDeletePayload {
  ids: [ID!]!
}

type RecipeBatchesUpdatePayload {
  ok: Boolean!
}

input RecipeBatchAdditiveCreateInput {
  weight: Float!
  cost: Float!
  additiveId: ID!
  batchId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeBatchAdditiveUpdateInput {
  weight: Float
  cost: Float
  additiveId: ID
  batchId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeBatchAdditivePayload {
  recipeBatchAdditive: RecipeBatchAdditive!
}

type RecipeBatchAdditiveDeletePayload {
  id: ID!
}

type RecipeBatchAdditivesDeletePayload {
  ids: [ID!]!
}

type RecipeBatchAdditivesUpdatePayload {
  ok: Boolean!
}

input RecipeBatchFragranceCreateInput {
  weight: Float!
  cost: Float!
  fragranceId: ID!
  batchId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeBatchFragranceUpdateInput {
  weight: Float
  cost: Float
  fragranceId: ID
  batchId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeBatchFragrancePayload {
  recipeBatchFragrance: RecipeBatchFragrance!
}

type RecipeBatchFragranceDeletePayload {
  id: ID!
}

type RecipeBatchFragrancesDeletePayload {
  ids: [ID!]!
}

type RecipeBatchFragrancesUpdatePayload {
  ok: Boolean!
}

input RecipeBatchLipidCreateInput {
  weight: Float!
  cost: Float!
  lipidId: ID!
  batchId: ID!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

input RecipeBatchLipidUpdateInput {
  weight: Float
  cost: Float
  lipidId: ID
  batchId: ID
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type RecipeBatchLipidPayload {
  recipeBatchLipid: RecipeBatchLipid!
}

type RecipeBatchLipidDeletePayload {
  id: ID!
}

type RecipeBatchLipidsDeletePayload {
  ids: [ID!]!
}

type RecipeBatchLipidsUpdatePayload {
  ok: Boolean!
}

input RecipeBatchLyeCreateInput {
  weight: Float!
  discount: Float!
  cost: Float!
  lyeId: ID!
  batchId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeBatchLyeUpdateInput {
  weight: Float
  discount: Float
  cost: Float
  lyeId: ID
  batchId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeBatchLyePayload {
  recipeBatchLye: RecipeBatchLye!
}

type RecipeBatchLyeDeletePayload {
  id: ID!
}

type RecipeBatchLyesDeletePayload {
  ids: [ID!]!
}

type RecipeBatchLyesUpdatePayload {
  ok: Boolean!
}

input RecipeBatchNoteCreateInput {
  note: String!
  link: String!
  batchId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeBatchNoteUpdateInput {
  note: String
  link: String
  batchId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeBatchNotePayload {
  recipeBatchNote: RecipeBatchNote!
}

type RecipeBatchNoteDeletePayload {
  id: ID!
}

type RecipeBatchNotesDeletePayload {
  ids: [ID!]!
}

type RecipeBatchNotesUpdatePayload {
  ok: Boolean!
}

input RecipeFragranceCreateInput {
  percentage: Float!
  fragranceId: ID!
  recipeId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeFragranceUpdateInput {
  percentage: Float
  fragranceId: ID
  recipeId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeFragrancePayload {
  recipeFragrance: RecipeFragrance!
}

type RecipeFragranceDeletePayload {
  id: ID!
}

type RecipeFragrancesDeletePayload {
  ids: [ID!]!
}

type RecipeFragrancesUpdatePayload {
  ok: Boolean!
}

input RecipeLipidCreateInput {
  percentage: Float!
  lipidId: ID!
  recipeId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeLipidUpdateInput {
  percentage: Float
  lipidId: ID
  recipeId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeLipidPayload {
  recipeLipid: RecipeLipid!
}

type RecipeLipidDeletePayload {
  id: ID!
}

type RecipeLipidsDeletePayload {
  ids: [ID!]!
}

type RecipeLipidsUpdatePayload {
  ok: Boolean!
}

input RecipeStepCreateInput {
  num: Int!
  note: String!
  recipeId: ID!
  updatedAt: Int!
  createdAt: Int!
  deletedAt: Int
}

input RecipeStepUpdateInput {
  num: Int
  note: String
  recipeId: ID
  updatedAt: Int
  createdAt: Int
  deletedAt: Int
}

type RecipeStepPayload {
  recipeStep: RecipeStep!
}

type RecipeStepDeletePayload {
  id: ID!
}

type RecipeStepsDeletePayload {
  ids: [ID!]!
}

type RecipeStepsUpdatePayload {
  ok: Boolean!
}

input SupplierCreateInput {
  name: String!
  website: String!
  note: String!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

input SupplierUpdateInput {
  name: String
  website: String
  note: String
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

type SupplierPayload {
  supplier: Supplier!
}

type SupplierDeletePayload {
  id: ID!
}

type SuppliersDeletePayload {
  ids: [ID!]!
}

type SuppliersUpdatePayload {
  ok: Boolean!
}

type Mutation {
  createAdditive(input: AdditiveCreateInput!): AdditivePayload! @IsAuthenticated
  updateAdditive(id: ID!, input: AdditiveUpdateInput!): AdditivePayload!
    @IsAuthenticated
  updateAdditives(
    filter: AdditiveFilter
    input: AdditiveUpdateInput!
  ): AdditivesUpdatePayload! @IsAuthenticated
  deleteAdditive(id: ID!): AdditiveDeletePayload! @IsAuthenticated
  deleteAdditives(filter: AdditiveFilter): AdditivesDeletePayload!
    @IsAuthenticated
  createAdditiveInventory(
    input: AdditiveInventoryCreateInput!
  ): AdditiveInventoryPayload! @IsAuthenticated
  updateAdditiveInventory(
    id: ID!
    input: AdditiveInventoryUpdateInput!
  ): AdditiveInventoryPayload! @IsAuthenticated
  updateAdditiveInventories(
    filter: AdditiveInventoryFilter
    input: AdditiveInventoryUpdateInput!
  ): AdditiveInventoriesUpdatePayload! @IsAuthenticated
  deleteAdditiveInventory(id: ID!): AdditiveInventoryDeletePayload!
    @IsAuthenticated
  deleteAdditiveInventories(
    filter: AdditiveInventoryFilter
  ): AdditiveInventoriesDeletePayload! @IsAuthenticated
  createAuthGroup(input: AuthGroupCreateInput!): AuthGroupPayload!
    @IsAuthenticated
  updateAuthGroup(id: ID!, input: AuthGroupUpdateInput!): AuthGroupPayload!
    @IsAuthenticated
  updateAuthGroups(
    filter: AuthGroupFilter
    input: AuthGroupUpdateInput!
  ): AuthGroupsUpdatePayload! @IsAuthenticated
  deleteAuthGroup(id: ID!): AuthGroupDeletePayload! @IsAuthenticated
  deleteAuthGroups(filter: AuthGroupFilter): AuthGroupsDeletePayload!
    @IsAuthenticated
  createAuthGroupPermission(
    input: AuthGroupPermissionCreateInput!
  ): AuthGroupPermissionPayload! @IsAuthenticated
  updateAuthGroupPermission(
    id: ID!
    input: AuthGroupPermissionUpdateInput!
  ): AuthGroupPermissionPayload! @IsAuthenticated
  updateAuthGroupPermissions(
    filter: AuthGroupPermissionFilter
    input: AuthGroupPermissionUpdateInput!
  ): AuthGroupPermissionsUpdatePayload! @IsAuthenticated
  deleteAuthGroupPermission(id: ID!): AuthGroupPermissionDeletePayload!
    @IsAuthenticated
  deleteAuthGroupPermissions(
    filter: AuthGroupPermissionFilter
  ): AuthGroupPermissionsDeletePayload! @IsAuthenticated
  createAuthPermission(
    input: AuthPermissionCreateInput!
  ): AuthPermissionPayload! @IsAuthenticated
  updateAuthPermission(
    id: ID!
    input: AuthPermissionUpdateInput!
  ): AuthPermissionPayload! @IsAuthenticated
  updateAuthPermissions(
    filter: AuthPermissionFilter
    input: AuthPermissionUpdateInput!
  ): AuthPermissionsUpdatePayload! @IsAuthenticated
  deleteAuthPermission(id: ID!): AuthPermissionDeletePayload! @IsAuthenticated
  deleteAuthPermissions(
    filter: AuthPermissionFilter
  ): AuthPermissionsDeletePayload! @IsAuthenticated
  createAuthUser(input: AuthUserCreateInput!): AuthUserPayload! @IsAuthenticated
  updateAuthUser(id: ID!, input: AuthUserUpdateInput!): AuthUserPayload!
    @IsAuthenticated
  updateAuthUsers(
    filter: AuthUserFilter
    input: AuthUserUpdateInput!
  ): AuthUsersUpdatePayload! @IsAuthenticated
  deleteAuthUser(id: ID!): AuthUserDeletePayload! @IsAuthenticated
  deleteAuthUsers(filter: AuthUserFilter): AuthUsersDeletePayload!
    @IsAuthenticated
  createAuthUserGroup(input: AuthUserGroupCreateInput!): AuthUserGroupPayload!
    @IsAuthenticated
  updateAuthUserGroup(
    id: ID!
    input: AuthUserGroupUpdateInput!
  ): AuthUserGroupPayload! @IsAuthenticated
  updateAuthUserGroups(
    filter: AuthUserGroupFilter
    input: AuthUserGroupUpdateInput!
  ): AuthUserGroupsUpdatePayload! @IsAuthenticated
  deleteAuthUserGroup(id: ID!): AuthUserGroupDeletePayload! @IsAuthenticated
  deleteAuthUserGroups(
    filter: AuthUserGroupFilter
  ): AuthUserGroupsDeletePayload! @IsAuthenticated
  createAuthUserUserPermission(
    input: AuthUserUserPermissionCreateInput!
  ): AuthUserUserPermissionPayload! @IsAuthenticated
  updateAuthUserUserPermission(
    id: ID!
    input: AuthUserUserPermissionUpdateInput!
  ): AuthUserUserPermissionPayload! @IsAuthenticated
  updateAuthUserUserPermissions(
    filter: AuthUserUserPermissionFilter
    input: AuthUserUserPermissionUpdateInput!
  ): AuthUserUserPermissionsUpdatePayload! @IsAuthenticated
  deleteAuthUserUserPermission(id: ID!): AuthUserUserPermissionDeletePayload!
    @IsAuthenticated
  deleteAuthUserUserPermissions(
    filter: AuthUserUserPermissionFilter
  ): AuthUserUserPermissionsDeletePayload! @IsAuthenticated
  createFragrance(input: FragranceCreateInput!): FragrancePayload!
    @IsAuthenticated
  updateFragrance(id: ID!, input: FragranceUpdateInput!): FragrancePayload!
    @IsAuthenticated
  updateFragrances(
    filter: FragranceFilter
    input: FragranceUpdateInput!
  ): FragrancesUpdatePayload! @IsAuthenticated
  deleteFragrance(id: ID!): FragranceDeletePayload! @IsAuthenticated
  deleteFragrances(filter: FragranceFilter): FragrancesDeletePayload!
    @IsAuthenticated
  createFragranceInventory(
    input: FragranceInventoryCreateInput!
  ): FragranceInventoryPayload! @IsAuthenticated
  updateFragranceInventory(
    id: ID!
    input: FragranceInventoryUpdateInput!
  ): FragranceInventoryPayload! @IsAuthenticated
  updateFragranceInventories(
    filter: FragranceInventoryFilter
    input: FragranceInventoryUpdateInput!
  ): FragranceInventoriesUpdatePayload! @IsAuthenticated
  deleteFragranceInventory(id: ID!): FragranceInventoryDeletePayload!
    @IsAuthenticated
  deleteFragranceInventories(
    filter: FragranceInventoryFilter
  ): FragranceInventoriesDeletePayload! @IsAuthenticated
  createLipid(input: LipidCreateInput!): LipidPayload! @IsAuthenticated
  updateLipid(id: ID!, input: LipidUpdateInput!): LipidPayload! @IsAuthenticated
  updateLipids(
    filter: LipidFilter
    input: LipidUpdateInput!
  ): LipidsUpdatePayload! @IsAuthenticated
  deleteLipid(id: ID!): LipidDeletePayload! @IsAuthenticated
  deleteLipids(filter: LipidFilter): LipidsDeletePayload! @IsAuthenticated
  createLipidInventory(
    input: LipidInventoryCreateInput!
  ): LipidInventoryPayload! @IsAuthenticated
  updateLipidInventory(
    id: ID!
    input: LipidInventoryUpdateInput!
  ): LipidInventoryPayload! @IsAuthenticated
  updateLipidInventories(
    filter: LipidInventoryFilter
    input: LipidInventoryUpdateInput!
  ): LipidInventoriesUpdatePayload! @IsAuthenticated
  deleteLipidInventory(id: ID!): LipidInventoryDeletePayload! @IsAuthenticated
  deleteLipidInventories(
    filter: LipidInventoryFilter
  ): LipidInventoriesDeletePayload! @IsAuthenticated
  createLye(input: LyeCreateInput!): LyePayload! @IsAuthenticated
  updateLye(id: ID!, input: LyeUpdateInput!): LyePayload! @IsAuthenticated
  updateLyes(filter: LyeFilter, input: LyeUpdateInput!): LyesUpdatePayload!
    @IsAuthenticated
  deleteLye(id: ID!): LyeDeletePayload! @IsAuthenticated
  deleteLyes(filter: LyeFilter): LyesDeletePayload! @IsAuthenticated
  createLyeInventory(input: LyeInventoryCreateInput!): LyeInventoryPayload!
    @IsAuthenticated
  updateLyeInventory(
    id: ID!
    input: LyeInventoryUpdateInput!
  ): LyeInventoryPayload! @IsAuthenticated
  updateLyeInventories(
    filter: LyeInventoryFilter
    input: LyeInventoryUpdateInput!
  ): LyeInventoriesUpdatePayload! @IsAuthenticated
  deleteLyeInventory(id: ID!): LyeInventoryDeletePayload! @IsAuthenticated
  deleteLyeInventories(
    filter: LyeInventoryFilter
  ): LyeInventoriesDeletePayload! @IsAuthenticated
  createRecipe(input: RecipeCreateInput!): RecipePayload! @IsAuthenticated
  updateRecipe(id: ID!, input: RecipeUpdateInput!): RecipePayload!
    @IsAuthenticated
  updateRecipes(
    filter: RecipeFilter
    input: RecipeUpdateInput!
  ): RecipesUpdatePayload! @IsAuthenticated
  deleteRecipe(id: ID!): RecipeDeletePayload! @IsAuthenticated
  deleteRecipes(filter: RecipeFilter): RecipesDeletePayload! @IsAuthenticated
  createRecipeAdditive(
    input: RecipeAdditiveCreateInput!
  ): RecipeAdditivePayload! @IsAuthenticated
  updateRecipeAdditive(
    id: ID!
    input: RecipeAdditiveUpdateInput!
  ): RecipeAdditivePayload! @IsAuthenticated
  updateRecipeAdditives(
    filter: RecipeAdditiveFilter
    input: RecipeAdditiveUpdateInput!
  ): RecipeAdditivesUpdatePayload! @IsAuthenticated
  deleteRecipeAdditive(id: ID!): RecipeAdditiveDeletePayload! @IsAuthenticated
  deleteRecipeAdditives(
    filter: RecipeAdditiveFilter
  ): RecipeAdditivesDeletePayload! @IsAuthenticated
  createRecipeBatch(input: RecipeBatchCreateInput!): RecipeBatchPayload!
    @IsAuthenticated
  updateRecipeBatch(
    id: ID!
    input: RecipeBatchUpdateInput!
  ): RecipeBatchPayload! @IsAuthenticated
  updateRecipeBatches(
    filter: RecipeBatchFilter
    input: RecipeBatchUpdateInput!
  ): RecipeBatchesUpdatePayload! @IsAuthenticated
  deleteRecipeBatch(id: ID!): RecipeBatchDeletePayload! @IsAuthenticated
  deleteRecipeBatches(filter: RecipeBatchFilter): RecipeBatchesDeletePayload!
    @IsAuthenticated
  createRecipeBatchAdditive(
    input: RecipeBatchAdditiveCreateInput!
  ): RecipeBatchAdditivePayload! @IsAuthenticated
  updateRecipeBatchAdditive(
    id: ID!
    input: RecipeBatchAdditiveUpdateInput!
  ): RecipeBatchAdditivePayload! @IsAuthenticated
  updateRecipeBatchAdditives(
    filter: RecipeBatchAdditiveFilter
    input: RecipeBatchAdditiveUpdateInput!
  ): RecipeBatchAdditivesUpdatePayload! @IsAuthenticated
  deleteRecipeBatchAdditive(id: ID!): RecipeBatchAdditiveDeletePayload!
    @IsAuthenticated
  deleteRecipeBatchAdditives(
    filter: RecipeBatchAdditiveFilter
  ): RecipeBatchAdditivesDeletePayload! @IsAuthenticated
  createRecipeBatchFragrance(
    input: RecipeBatchFragranceCreateInput!
  ): RecipeBatchFragrancePayload! @IsAuthenticated
  updateRecipeBatchFragrance(
    id: ID!
    input: RecipeBatchFragranceUpdateInput!
  ): RecipeBatchFragrancePayload! @IsAuthenticated
  updateRecipeBatchFragrances(
    filter: RecipeBatchFragranceFilter
    input: RecipeBatchFragranceUpdateInput!
  ): RecipeBatchFragrancesUpdatePayload! @IsAuthenticated
  deleteRecipeBatchFragrance(id: ID!): RecipeBatchFragranceDeletePayload!
    @IsAuthenticated
  deleteRecipeBatchFragrances(
    filter: RecipeBatchFragranceFilter
  ): RecipeBatchFragrancesDeletePayload! @IsAuthenticated
  createRecipeBatchLipid(
    input: RecipeBatchLipidCreateInput!
  ): RecipeBatchLipidPayload! @IsAuthenticated
  updateRecipeBatchLipid(
    id: ID!
    input: RecipeBatchLipidUpdateInput!
  ): RecipeBatchLipidPayload! @IsAuthenticated
  updateRecipeBatchLipids(
    filter: RecipeBatchLipidFilter
    input: RecipeBatchLipidUpdateInput!
  ): RecipeBatchLipidsUpdatePayload! @IsAuthenticated
  deleteRecipeBatchLipid(id: ID!): RecipeBatchLipidDeletePayload!
    @IsAuthenticated
  deleteRecipeBatchLipids(
    filter: RecipeBatchLipidFilter
  ): RecipeBatchLipidsDeletePayload! @IsAuthenticated
  createRecipeBatchLye(
    input: RecipeBatchLyeCreateInput!
  ): RecipeBatchLyePayload! @IsAuthenticated
  updateRecipeBatchLye(
    id: ID!
    input: RecipeBatchLyeUpdateInput!
  ): RecipeBatchLyePayload! @IsAuthenticated
  updateRecipeBatchLyes(
    filter: RecipeBatchLyeFilter
    input: RecipeBatchLyeUpdateInput!
  ): RecipeBatchLyesUpdatePayload! @IsAuthenticated
  deleteRecipeBatchLye(id: ID!): RecipeBatchLyeDeletePayload! @IsAuthenticated
  deleteRecipeBatchLyes(
    filter: RecipeBatchLyeFilter
  ): RecipeBatchLyesDeletePayload! @IsAuthenticated
  createRecipeBatchNote(
    input: RecipeBatchNoteCreateInput!
  ): RecipeBatchNotePayload! @IsAuthenticated
  updateRecipeBatchNote(
    id: ID!
    input: RecipeBatchNoteUpdateInput!
  ): RecipeBatchNotePayload! @IsAuthenticated
  updateRecipeBatchNotes(
    filter: RecipeBatchNoteFilter
    input: RecipeBatchNoteUpdateInput!
  ): RecipeBatchNotesUpdatePayload! @IsAuthenticated
  deleteRecipeBatchNote(id: ID!): RecipeBatchNoteDeletePayload! @IsAuthenticated
  deleteRecipeBatchNotes(
    filter: RecipeBatchNoteFilter
  ): RecipeBatchNotesDeletePayload! @IsAuthenticated
  createRecipeFragrance(
    input: RecipeFragranceCreateInput!
  ): RecipeFragrancePayload! @IsAuthenticated
  updateRecipeFragrance(
    id: ID!
    input: RecipeFragranceUpdateInput!
  ): RecipeFragrancePayload! @IsAuthenticated
  updateRecipeFragrances(
    filter: RecipeFragranceFilter
    input: RecipeFragranceUpdateInput!
  ): RecipeFragrancesUpdatePayload! @IsAuthenticated
  deleteRecipeFragrance(id: ID!): RecipeFragranceDeletePayload! @IsAuthenticated
  deleteRecipeFragrances(
    filter: RecipeFragranceFilter
  ): RecipeFragrancesDeletePayload! @IsAuthenticated
  createRecipeLipid(input: RecipeLipidCreateInput!): RecipeLipidPayload!
    @IsAuthenticated
  updateRecipeLipid(
    id: ID!
    input: RecipeLipidUpdateInput!
  ): RecipeLipidPayload! @IsAuthenticated
  updateRecipeLipids(
    filter: RecipeLipidFilter
    input: RecipeLipidUpdateInput!
  ): RecipeLipidsUpdatePayload! @IsAuthenticated
  deleteRecipeLipid(id: ID!): RecipeLipidDeletePayload! @IsAuthenticated
  deleteRecipeLipids(filter: RecipeLipidFilter): RecipeLipidsDeletePayload!
    @IsAuthenticated
  createRecipeStep(input: RecipeStepCreateInput!): RecipeStepPayload!
    @IsAuthenticated
  updateRecipeStep(id: ID!, input: RecipeStepUpdateInput!): RecipeStepPayload!
    @IsAuthenticated
  updateRecipeSteps(
    filter: RecipeStepFilter
    input: RecipeStepUpdateInput!
  ): RecipeStepsUpdatePayload! @IsAuthenticated
  deleteRecipeStep(id: ID!): RecipeStepDeletePayload! @IsAuthenticated
  deleteRecipeSteps(filter: RecipeStepFilter): RecipeStepsDeletePayload!
    @IsAuthenticated
  createSupplier(input: SupplierCreateInput!): SupplierPayload! @IsAuthenticated
  updateSupplier(id: ID!, input: SupplierUpdateInput!): SupplierPayload!
    @IsAuthenticated
  updateSuppliers(
    filter: SupplierFilter
    input: SupplierUpdateInput!
  ): SuppliersUpdatePayload! @IsAuthenticated
  deleteSupplier(id: ID!): SupplierDeletePayload! @IsAuthenticated
  deleteSuppliers(filter: SupplierFilter): SuppliersDeletePayload!
    @IsAuthenticated
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createAdditiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AdditiveInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAdditiveInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AdditiveCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAdditiveCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuthGroupPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuthGroupPermissionCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAuthGroupPermissionCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuthGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuthGroupCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAuthGroupCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuthPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuthPermissionCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAuthPermissionCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuthUserGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuthUserGroupCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAuthUserGroupCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuthUserUserPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuthUserUserPermissionCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAuthUserUserPermissionCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuthUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuthUserCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNAuthUserCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 FragranceInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNFragranceInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 FragranceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNFragranceCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LipidInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLipidInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LipidCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLipidCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LyeInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLyeInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LyeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLyeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeAdditiveCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeAdditiveCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeBatchAdditiveCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeBatchAdditiveCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeBatchFragranceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeBatchFragranceCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeBatchLipidCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeBatchLipidCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeBatchLyeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeBatchLyeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeBatchNoteCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeBatchNoteCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeBatchCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeBatchCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeFragranceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeFragranceCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeLipidCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeLipidCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeStepCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeStepCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RecipeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecipeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 SupplierCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSupplierCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdditiveInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AdditiveInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAdditiveInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdditiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthGroupPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthGroupPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthGroupPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthGroupPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthGroupFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthUserGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthUserGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthUserGroupFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthUserGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthUserUserPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthUserUserPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthUserUserPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthUserUserPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAuthUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFragranceInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FragranceInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFragranceInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLipidInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LipidInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLipidInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLyeInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LyeInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLyeInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchLyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchLyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchNoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchNoteFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeSteps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeStepFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeStepFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSuppliers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *SupplierFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOSupplierFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdditiveInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AdditiveInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAdditiveInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AdditiveInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAdditiveInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdditiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AdditiveInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAdditiveInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthGroupPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AuthGroupPermissionUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthGroupPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthGroupPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthGroupPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthGroupPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AuthGroupPermissionUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthGroupPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AuthGroupUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthGroupUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthGroupFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AuthGroupUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthGroupUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AuthPermissionUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AuthPermissionUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthUserGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AuthUserGroupUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthUserGroupUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthUserGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthUserGroupFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthUserGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AuthUserGroupUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthUserGroupUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthUserUserPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AuthUserUserPermissionUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthUserUserPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthUserUserPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthUserUserPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthUserUserPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AuthUserUserPermissionUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthUserUserPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AuthUserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthUserUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAuthUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuthUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOAuthUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 AuthUserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNAuthUserUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFragranceInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FragranceInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFragranceInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 FragranceInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFragranceInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 FragranceInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFragranceInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 FragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 FragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLipidInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LipidInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLipidInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 LipidInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLipidInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 LipidInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLipidInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 LipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 LipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLyeInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LyeInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLyeInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 LyeInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLyeInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 LyeInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLyeInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 LyeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLyeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 LyeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLyeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeAdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeAdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeBatchAdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeBatchAdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeBatchFragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeBatchFragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeBatchLipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeBatchLipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeBatchLyeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchLyeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchLyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchLyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeBatchLyeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchLyeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeBatchNoteUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchNoteUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchNoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchNoteFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeBatchNoteUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchNoteUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeBatchUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeBatchFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeBatchFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeBatchUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeBatchUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeFragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeFragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeLipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeLipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeStepUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeStepUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeSteps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeStepFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeStepFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeStepUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeStepUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 RecipeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *RecipeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalORecipeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 RecipeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNRecipeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 SupplierUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNSupplierUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSuppliers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *SupplierFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOSupplierFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 SupplierUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNSupplierUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_additiveInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AdditiveInventoryOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAdditiveInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AdditiveInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAdditiveInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_additiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_additive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_additives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AdditiveOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAdditiveOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authGroupPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authGroupPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AuthGroupPermissionOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAuthGroupPermissionOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AuthGroupPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAuthGroupPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AuthGroupOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAuthGroupOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AuthGroupFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAuthGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AuthPermissionOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAuthPermissionOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AuthPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAuthPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authUserGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authUserGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AuthUserGroupOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAuthUserGroupOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AuthUserGroupFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAuthUserGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authUserUserPermission_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authUserUserPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AuthUserUserPermissionOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAuthUserUserPermissionOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AuthUserUserPermissionFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAuthUserUserPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_authUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*AuthUserOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOAuthUserOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *AuthUserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOAuthUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_fragranceInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*FragranceInventoryOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOFragranceInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *FragranceInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOFragranceInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_fragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*FragranceOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOFragranceOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *FragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_lipidInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*LipidInventoryOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOLipidInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *LipidInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOLipidInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_lipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*LipidOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOLipidOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *LipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_lyeInventories_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*LyeInventoryOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOLyeInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *LyeInventoryFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOLyeInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_lyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*LyeOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOLyeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *LyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeAdditiveOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeAdditiveOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeBatchAdditiveOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeBatchAdditiveOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeBatchAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeBatchAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeBatchFragranceOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeBatchFragranceOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeBatchFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeBatchFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeBatchLipidOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeBatchLipidOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeBatchLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeBatchLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeBatchLyeOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeBatchLyeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeBatchLyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeBatchLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeBatchNoteOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeBatchNoteOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeBatchNoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeBatchNoteFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeBatchOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeBatchOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeBatchFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeBatchFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeFragranceOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeFragranceOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeLipidOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeLipidOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeSteps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeStepOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeStepOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeStepFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeStepFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_recipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*RecipeOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalORecipeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *RecipeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalORecipeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_supplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_suppliers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 boilergql.ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*SupplierOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOSupplierOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *SupplierFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOSupplierFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Additive_id(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_name(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_note(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_createdAt(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_recipeAdditive(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeAdditive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditive)
	fc.Result = res
	return ec.marshalORecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_recipeBatchAdditive(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchAdditive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalORecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_additiveInventories(ctx context.Context, field graphql.CollectedField, obj *Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Additive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditiveInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AdditiveInventory)
	fc.Result = res
	return ec.marshalOAdditiveInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AdditiveConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AdditiveEdge)
	fc.Result = res
	return ec.marshalOAdditiveEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AdditiveConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AdditiveDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AdditiveEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveEdge_node(ctx context.Context, field graphql.CollectedField, obj *AdditiveEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Additive)
	fc.Result = res
	return ec.marshalOAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoriesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoriesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoriesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoriesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoriesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoriesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_id(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_cost(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_weight(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_additive(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AdditiveInventoryEdge)
	fc.Result = res
	return ec.marshalOAdditiveInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoryDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventory)
	fc.Result = res
	return ec.marshalOAdditiveInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryPayload_additiveInventory(ctx context.Context, field graphql.CollectedField, obj *AdditiveInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditiveInventoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditiveInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventory)
	fc.Result = res
	return ec.marshalNAdditiveInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditivePayload_additive(ctx context.Context, field graphql.CollectedField, obj *AdditivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditivePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditivesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AdditivesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditivesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditivesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AdditivesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AdditivesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroup_id(ctx context.Context, field graphql.CollectedField, obj *AuthGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroup_name(ctx context.Context, field graphql.CollectedField, obj *AuthGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroup_groupAuthGroupPermissions(ctx context.Context, field graphql.CollectedField, obj *AuthGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupAuthGroupPermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthGroupPermission)
	fc.Result = res
	return ec.marshalOAuthGroupPermission2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroup_groupAuthUserGroups(ctx context.Context, field graphql.CollectedField, obj *AuthGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupAuthUserGroups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserGroup)
	fc.Result = res
	return ec.marshalOAuthUserGroup2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AuthGroupConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthGroupEdge)
	fc.Result = res
	return ec.marshalOAuthGroupEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuthGroupConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AuthGroupDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AuthGroupEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupEdge_node(ctx context.Context, field graphql.CollectedField, obj *AuthGroupEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuthGroup)
	fc.Result = res
	return ec.marshalOAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPayload_authGroup(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroup)
	fc.Result = res
	return ec.marshalNAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermission_id(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermission_group(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroup)
	fc.Result = res
	return ec.marshalNAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermission_permission(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermission)
	fc.Result = res
	return ec.marshalNAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthGroupPermissionEdge)
	fc.Result = res
	return ec.marshalOAuthGroupPermissionEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionEdge_node(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermission)
	fc.Result = res
	return ec.marshalOAuthGroupPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionPayload_authGroupPermission(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthGroupPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermission)
	fc.Result = res
	return ec.marshalNAuthGroupPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupPermissionsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AuthGroupPermissionsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupPermissionsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AuthGroupsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthGroupsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AuthGroupsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthGroupsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermission_id(ctx context.Context, field graphql.CollectedField, obj *AuthPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermission_name(ctx context.Context, field graphql.CollectedField, obj *AuthPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermission_contentTypeId(ctx context.Context, field graphql.CollectedField, obj *AuthPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermission_codename(ctx context.Context, field graphql.CollectedField, obj *AuthPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Codename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermission_permissionAuthGroupPermissions(ctx context.Context, field graphql.CollectedField, obj *AuthPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionAuthGroupPermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthGroupPermission)
	fc.Result = res
	return ec.marshalOAuthGroupPermission2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermission_permissionAuthUserUserPermissions(ctx context.Context, field graphql.CollectedField, obj *AuthPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PermissionAuthUserUserPermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserUserPermission)
	fc.Result = res
	return ec.marshalOAuthUserUserPermission2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthPermissionEdge)
	fc.Result = res
	return ec.marshalOAuthPermissionEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionEdge_node(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuthPermission)
	fc.Result = res
	return ec.marshalOAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionPayload_authPermission(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermission)
	fc.Result = res
	return ec.marshalNAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthPermissionsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AuthPermissionsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthPermissionsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_id(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_password(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_lastLogin(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastLogin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_isSuperuser(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSuperuser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_username(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_firstName(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_lastName(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_email(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_isStaff(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsStaff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_isActive(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_dateJoined(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateJoined, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_userAuthUserGroups(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAuthUserGroups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserGroup)
	fc.Result = res
	return ec.marshalOAuthUserGroup2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUser_userAuthUserUserPermissions(ctx context.Context, field graphql.CollectedField, obj *AuthUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserAuthUserUserPermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserUserPermission)
	fc.Result = res
	return ec.marshalOAuthUserUserPermission2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AuthUserConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserEdge)
	fc.Result = res
	return ec.marshalOAuthUserEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuthUserConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AuthUserDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AuthUserEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserEdge_node(ctx context.Context, field graphql.CollectedField, obj *AuthUserEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuthUser)
	fc.Result = res
	return ec.marshalOAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroup_id(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroup_user(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUser)
	fc.Result = res
	return ec.marshalNAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroup_group(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroup) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Group, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroup)
	fc.Result = res
	return ec.marshalNAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserGroupEdge)
	fc.Result = res
	return ec.marshalOAuthUserGroupEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupEdge_node(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroup)
	fc.Result = res
	return ec.marshalOAuthUserGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupPayload_authUserGroup(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthUserGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroup)
	fc.Result = res
	return ec.marshalNAuthUserGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserGroupsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AuthUserGroupsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserGroupsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserPayload_authUser(ctx context.Context, field graphql.CollectedField, obj *AuthUserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUser)
	fc.Result = res
	return ec.marshalNAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermission_id(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermission_user(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUser)
	fc.Result = res
	return ec.marshalNAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermission_permission(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermission",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Permission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermission)
	fc.Result = res
	return ec.marshalNAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AuthUserUserPermissionEdge)
	fc.Result = res
	return ec.marshalOAuthUserUserPermissionEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionEdge_node(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermission)
	fc.Result = res
	return ec.marshalOAuthUserUserPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionPayload_authUserUserPermission(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthUserUserPermission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermission)
	fc.Result = res
	return ec.marshalNAuthUserUserPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUserUserPermissionsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AuthUserUserPermissionsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUserUserPermissionsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUsersDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *AuthUsersDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUsersDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthUsersUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *AuthUsersUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "AuthUsersUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_id(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_name(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_note(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_createdAt(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_recipeBatchFragrance(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchFragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalORecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_recipeFragrance(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeFragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrance)
	fc.Result = res
	return ec.marshalORecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_fragranceInventories(ctx context.Context, field graphql.CollectedField, obj *Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Fragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FragranceInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FragranceInventory)
	fc.Result = res
	return ec.marshalOFragranceInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *FragranceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FragranceEdge)
	fc.Result = res
	return ec.marshalOFragranceEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *FragranceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *FragranceDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *FragranceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceEdge_node(ctx context.Context, field graphql.CollectedField, obj *FragranceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Fragrance)
	fc.Result = res
	return ec.marshalOFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoriesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoriesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoriesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoriesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoriesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoriesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_id(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_cost(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_weight(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_fragrance(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FragranceInventoryEdge)
	fc.Result = res
	return ec.marshalOFragranceInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoryDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*FragranceInventory)
	fc.Result = res
	return ec.marshalOFragranceInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryPayload_fragranceInventory(ctx context.Context, field graphql.CollectedField, obj *FragranceInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragranceInventoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FragranceInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventory)
	fc.Result = res
	return ec.marshalNFragranceInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _FragrancePayload_fragrance(ctx context.Context, field graphql.CollectedField, obj *FragrancePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragrancePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _FragrancesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *FragrancesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragrancesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FragrancesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *FragrancesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FragrancesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_id(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_name(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_lauric(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lauric, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_myristic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Myristic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_palmitic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Palmitic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_stearic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stearic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_ricinoleic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ricinoleic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_oleic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Oleic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_linoleic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linoleic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_linolenic(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linolenic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_hardness(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hardness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_cleansing(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cleansing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_conditioning(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditioning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_bubbly(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bubbly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_creamy(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creamy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_iodine(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iodine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_ins(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_inciName(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InciName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_family(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Family, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_naoh(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Naoh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_createdAt(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_recipeBatchLipid(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchLipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipid)
	fc.Result = res
	return ec.marshalORecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_recipeLipid(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeLipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeLipid)
	fc.Result = res
	return ec.marshalORecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_lipidInventories(ctx context.Context, field graphql.CollectedField, obj *Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LipidInventory)
	fc.Result = res
	return ec.marshalOLipidInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LipidConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LipidEdge)
	fc.Result = res
	return ec.marshalOLipidEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LipidConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *LipidDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LipidEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidEdge_node(ctx context.Context, field graphql.CollectedField, obj *LipidEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Lipid)
	fc.Result = res
	return ec.marshalOLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoriesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *LipidInventoriesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoriesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoriesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *LipidInventoriesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoriesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_id(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_cost(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_weight(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_sap(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_naoh(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Naoh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_koh(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Koh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_gramsPerLiter(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GramsPerLiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_lipid(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LipidInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LipidInventoryEdge)
	fc.Result = res
	return ec.marshalOLipidInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LipidInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *LipidInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoryDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LipidInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *LipidInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LipidInventory)
	fc.Result = res
	return ec.marshalOLipidInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryPayload_lipidInventory(ctx context.Context, field graphql.CollectedField, obj *LipidInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidInventoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventory)
	fc.Result = res
	return ec.marshalNLipidInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidPayload_lipid(ctx context.Context, field graphql.CollectedField, obj *LipidPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *LipidsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *LipidsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LipidsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_id(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_kind(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_name(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_note(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_createdAt(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_recipeBatchLye(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchLye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLye)
	fc.Result = res
	return ec.marshalORecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_lyeInventories(ctx context.Context, field graphql.CollectedField, obj *Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LyeInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LyeInventory)
	fc.Result = res
	return ec.marshalOLyeInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LyeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LyeEdge)
	fc.Result = res
	return ec.marshalOLyeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LyeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *LyeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LyeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeEdge_node(ctx context.Context, field graphql.CollectedField, obj *LyeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Lye)
	fc.Result = res
	return ec.marshalOLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoriesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *LyeInventoriesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoriesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoriesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *LyeInventoriesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoriesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_id(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_cost(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_weight(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_concentration(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Concentration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_lye(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventory",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LyeInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LyeInventoryEdge)
	fc.Result = res
	return ec.marshalOLyeInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LyeInventoryConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoryConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *LyeInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoryDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LyeInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryEdge_node(ctx context.Context, field graphql.CollectedField, obj *LyeInventoryEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoryEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*LyeInventory)
	fc.Result = res
	return ec.marshalOLyeInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryPayload_lyeInventory(ctx context.Context, field graphql.CollectedField, obj *LyeInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyeInventoryPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LyeInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventory)
	fc.Result = res
	return ec.marshalNLyeInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LyePayload_lye(ctx context.Context, field graphql.CollectedField, obj *LyePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _LyesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *LyesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LyesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *LyesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LyesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAdditive(rctx, args["input"].(AdditiveCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditivePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditivePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditivePayload)
	fc.Result = res
	return ec.marshalNAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAdditive(rctx, args["id"].(string), args["input"].(AdditiveUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditivePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditivePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditivePayload)
	fc.Result = res
	return ec.marshalNAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAdditives(rctx, args["filter"].(*AdditiveFilter), args["input"].(AdditiveUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditivesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditivesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditivesUpdatePayload)
	fc.Result = res
	return ec.marshalNAdditivesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAdditive(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveDeletePayload)
	fc.Result = res
	return ec.marshalNAdditiveDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAdditives(rctx, args["filter"].(*AdditiveFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditivesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditivesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditivesDeletePayload)
	fc.Result = res
	return ec.marshalNAdditivesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdditiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdditiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAdditiveInventory(rctx, args["input"].(AdditiveInventoryCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventoryPayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdditiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdditiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAdditiveInventory(rctx, args["id"].(string), args["input"].(AdditiveInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventoryPayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdditiveInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdditiveInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAdditiveInventories(rctx, args["filter"].(*AdditiveInventoryFilter), args["input"].(AdditiveInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventoriesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventoriesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventoriesUpdatePayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoriesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdditiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdditiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAdditiveInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventoryDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventoryDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdditiveInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdditiveInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAdditiveInventories(rctx, args["filter"].(*AdditiveInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventoriesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventoriesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventoriesDeletePayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoriesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAuthGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAuthGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthGroup(rctx, args["input"].(AuthGroupCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPayload)
	fc.Result = res
	return ec.marshalNAuthGroupPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthGroup(rctx, args["id"].(string), args["input"].(AuthGroupUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPayload)
	fc.Result = res
	return ec.marshalNAuthGroupPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthGroups(rctx, args["filter"].(*AuthGroupFilter), args["input"].(AuthGroupUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupsUpdatePayload)
	fc.Result = res
	return ec.marshalNAuthGroupsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthGroup(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupDeletePayload)
	fc.Result = res
	return ec.marshalNAuthGroupDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthGroups(rctx, args["filter"].(*AuthGroupFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupsDeletePayload)
	fc.Result = res
	return ec.marshalNAuthGroupsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAuthGroupPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAuthGroupPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthGroupPermission(rctx, args["input"].(AuthGroupPermissionCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermissionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermissionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermissionPayload)
	fc.Result = res
	return ec.marshalNAuthGroupPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthGroupPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthGroupPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthGroupPermission(rctx, args["id"].(string), args["input"].(AuthGroupPermissionUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermissionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermissionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermissionPayload)
	fc.Result = res
	return ec.marshalNAuthGroupPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthGroupPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthGroupPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthGroupPermissions(rctx, args["filter"].(*AuthGroupPermissionFilter), args["input"].(AuthGroupPermissionUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermissionsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermissionsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermissionsUpdatePayload)
	fc.Result = res
	return ec.marshalNAuthGroupPermissionsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthGroupPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthGroupPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthGroupPermission(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermissionDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermissionDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermissionDeletePayload)
	fc.Result = res
	return ec.marshalNAuthGroupPermissionDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthGroupPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthGroupPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthGroupPermissions(rctx, args["filter"].(*AuthGroupPermissionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermissionsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermissionsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermissionsDeletePayload)
	fc.Result = res
	return ec.marshalNAuthGroupPermissionsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAuthPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAuthPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthPermission(rctx, args["input"].(AuthPermissionCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermissionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermissionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermissionPayload)
	fc.Result = res
	return ec.marshalNAuthPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthPermission(rctx, args["id"].(string), args["input"].(AuthPermissionUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermissionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermissionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermissionPayload)
	fc.Result = res
	return ec.marshalNAuthPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthPermissions(rctx, args["filter"].(*AuthPermissionFilter), args["input"].(AuthPermissionUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermissionsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermissionsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermissionsUpdatePayload)
	fc.Result = res
	return ec.marshalNAuthPermissionsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthPermission(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermissionDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermissionDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermissionDeletePayload)
	fc.Result = res
	return ec.marshalNAuthPermissionDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthPermissions(rctx, args["filter"].(*AuthPermissionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermissionsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermissionsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermissionsDeletePayload)
	fc.Result = res
	return ec.marshalNAuthPermissionsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAuthUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAuthUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthUser(rctx, args["input"].(AuthUserCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserPayload)
	fc.Result = res
	return ec.marshalNAuthUserPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthUser(rctx, args["id"].(string), args["input"].(AuthUserUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserPayload)
	fc.Result = res
	return ec.marshalNAuthUserPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthUsers(rctx, args["filter"].(*AuthUserFilter), args["input"].(AuthUserUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUsersUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUsersUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUsersUpdatePayload)
	fc.Result = res
	return ec.marshalNAuthUsersUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUsersUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthUser(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserDeletePayload)
	fc.Result = res
	return ec.marshalNAuthUserDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthUsers(rctx, args["filter"].(*AuthUserFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUsersDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUsersDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUsersDeletePayload)
	fc.Result = res
	return ec.marshalNAuthUsersDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUsersDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAuthUserGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAuthUserGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthUserGroup(rctx, args["input"].(AuthUserGroupCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroupPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroupPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroupPayload)
	fc.Result = res
	return ec.marshalNAuthUserGroupPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthUserGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthUserGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthUserGroup(rctx, args["id"].(string), args["input"].(AuthUserGroupUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroupPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroupPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroupPayload)
	fc.Result = res
	return ec.marshalNAuthUserGroupPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthUserGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthUserGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthUserGroups(rctx, args["filter"].(*AuthUserGroupFilter), args["input"].(AuthUserGroupUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroupsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroupsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroupsUpdatePayload)
	fc.Result = res
	return ec.marshalNAuthUserGroupsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthUserGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthUserGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthUserGroup(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroupDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroupDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroupDeletePayload)
	fc.Result = res
	return ec.marshalNAuthUserGroupDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthUserGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthUserGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthUserGroups(rctx, args["filter"].(*AuthUserGroupFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroupsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroupsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroupsDeletePayload)
	fc.Result = res
	return ec.marshalNAuthUserGroupsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAuthUserUserPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAuthUserUserPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuthUserUserPermission(rctx, args["input"].(AuthUserUserPermissionCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermissionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermissionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermissionPayload)
	fc.Result = res
	return ec.marshalNAuthUserUserPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthUserUserPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthUserUserPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthUserUserPermission(rctx, args["id"].(string), args["input"].(AuthUserUserPermissionUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermissionPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermissionPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermissionPayload)
	fc.Result = res
	return ec.marshalNAuthUserUserPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAuthUserUserPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAuthUserUserPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAuthUserUserPermissions(rctx, args["filter"].(*AuthUserUserPermissionFilter), args["input"].(AuthUserUserPermissionUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermissionsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermissionsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermissionsUpdatePayload)
	fc.Result = res
	return ec.marshalNAuthUserUserPermissionsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthUserUserPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthUserUserPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthUserUserPermission(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermissionDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermissionDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermissionDeletePayload)
	fc.Result = res
	return ec.marshalNAuthUserUserPermissionDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAuthUserUserPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAuthUserUserPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAuthUserUserPermissions(rctx, args["filter"].(*AuthUserUserPermissionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermissionsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermissionsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermissionsDeletePayload)
	fc.Result = res
	return ec.marshalNAuthUserUserPermissionsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateFragrance(rctx, args["input"].(FragranceCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragrancePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragrancePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragrancePayload)
	fc.Result = res
	return ec.marshalNFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFragrance(rctx, args["id"].(string), args["input"].(FragranceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragrancePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragrancePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragrancePayload)
	fc.Result = res
	return ec.marshalNFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFragrances(rctx, args["filter"].(*FragranceFilter), args["input"].(FragranceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragrancesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragrancesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragrancesUpdatePayload)
	fc.Result = res
	return ec.marshalNFragrancesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFragrance(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceDeletePayload)
	fc.Result = res
	return ec.marshalNFragranceDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFragrances(rctx, args["filter"].(*FragranceFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragrancesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragrancesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragrancesDeletePayload)
	fc.Result = res
	return ec.marshalNFragrancesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateFragranceInventory(rctx, args["input"].(FragranceInventoryCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventoryPayload)
	fc.Result = res
	return ec.marshalNFragranceInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFragranceInventory(rctx, args["id"].(string), args["input"].(FragranceInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventoryPayload)
	fc.Result = res
	return ec.marshalNFragranceInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFragranceInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFragranceInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFragranceInventories(rctx, args["filter"].(*FragranceInventoryFilter), args["input"].(FragranceInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventoriesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventoriesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventoriesUpdatePayload)
	fc.Result = res
	return ec.marshalNFragranceInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoriesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFragranceInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventoryDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventoryDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNFragranceInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFragranceInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFragranceInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFragranceInventories(rctx, args["filter"].(*FragranceInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventoriesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventoriesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventoriesDeletePayload)
	fc.Result = res
	return ec.marshalNFragranceInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoriesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateLipid(rctx, args["input"].(LipidCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidPayload)
	fc.Result = res
	return ec.marshalNLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLipid(rctx, args["id"].(string), args["input"].(LipidUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidPayload)
	fc.Result = res
	return ec.marshalNLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLipids(rctx, args["filter"].(*LipidFilter), args["input"].(LipidUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidsUpdatePayload)
	fc.Result = res
	return ec.marshalNLipidsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLipid(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidDeletePayload)
	fc.Result = res
	return ec.marshalNLipidDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLipids(rctx, args["filter"].(*LipidFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidsDeletePayload)
	fc.Result = res
	return ec.marshalNLipidsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateLipidInventory(rctx, args["input"].(LipidInventoryCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventoryPayload)
	fc.Result = res
	return ec.marshalNLipidInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLipidInventory(rctx, args["id"].(string), args["input"].(LipidInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventoryPayload)
	fc.Result = res
	return ec.marshalNLipidInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLipidInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLipidInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLipidInventories(rctx, args["filter"].(*LipidInventoryFilter), args["input"].(LipidInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventoriesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventoriesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventoriesUpdatePayload)
	fc.Result = res
	return ec.marshalNLipidInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoriesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLipidInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventoryDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventoryDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNLipidInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLipidInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLipidInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLipidInventories(rctx, args["filter"].(*LipidInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventoriesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventoriesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventoriesDeletePayload)
	fc.Result = res
	return ec.marshalNLipidInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoriesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateLye(rctx, args["input"].(LyeCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyePayload)
	fc.Result = res
	return ec.marshalNLyePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLye(rctx, args["id"].(string), args["input"].(LyeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyePayload)
	fc.Result = res
	return ec.marshalNLyePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLyes(rctx, args["filter"].(*LyeFilter), args["input"].(LyeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyesUpdatePayload)
	fc.Result = res
	return ec.marshalNLyesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLye(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeDeletePayload)
	fc.Result = res
	return ec.marshalNLyeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLyes(rctx, args["filter"].(*LyeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyesDeletePayload)
	fc.Result = res
	return ec.marshalNLyesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateLyeInventory(rctx, args["input"].(LyeInventoryCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventoryPayload)
	fc.Result = res
	return ec.marshalNLyeInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLyeInventory(rctx, args["id"].(string), args["input"].(LyeInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventoryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventoryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventoryPayload)
	fc.Result = res
	return ec.marshalNLyeInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLyeInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLyeInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLyeInventories(rctx, args["filter"].(*LyeInventoryFilter), args["input"].(LyeInventoryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventoriesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventoriesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventoriesUpdatePayload)
	fc.Result = res
	return ec.marshalNLyeInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoriesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLyeInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventoryDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventoryDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNLyeInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLyeInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLyeInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLyeInventories(rctx, args["filter"].(*LyeInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventoriesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventoriesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventoriesDeletePayload)
	fc.Result = res
	return ec.marshalNLyeInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoriesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipe(rctx, args["input"].(RecipeCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipePayload)
	fc.Result = res
	return ec.marshalNRecipePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipe(rctx, args["id"].(string), args["input"].(RecipeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipePayload)
	fc.Result = res
	return ec.marshalNRecipePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipes(rctx, args["filter"].(*RecipeFilter), args["input"].(RecipeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipe(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipes(rctx, args["filter"].(*RecipeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeAdditive(rctx, args["input"].(RecipeAdditiveCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditivePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditivePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeAdditive(rctx, args["id"].(string), args["input"].(RecipeAdditiveUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditivePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditivePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeAdditives(rctx, args["filter"].(*RecipeAdditiveFilter), args["input"].(RecipeAdditiveUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditivesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditivesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditivesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditivesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeAdditive(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditiveDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditiveDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditiveDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditiveDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeAdditives(rctx, args["filter"].(*RecipeAdditiveFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditivesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditivesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditivesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditivesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeBatch(rctx, args["input"].(RecipeBatchCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatch(rctx, args["id"].(string), args["input"].(RecipeBatchUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatches(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatches_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatches(rctx, args["filter"].(*RecipeBatchFilter), args["input"].(RecipeBatchUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatch(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatches(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatches_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatches(rctx, args["filter"].(*RecipeBatchFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeBatchAdditive(rctx, args["input"].(RecipeBatchAdditiveCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditivePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditivePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchAdditive(rctx, args["id"].(string), args["input"].(RecipeBatchAdditiveUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditivePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditivePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchAdditives(rctx, args["filter"].(*RecipeBatchAdditiveFilter), args["input"].(RecipeBatchAdditiveUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditivesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditivesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditivesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditivesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchAdditive(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditiveDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditiveDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditiveDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditiveDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchAdditives(rctx, args["filter"].(*RecipeBatchAdditiveFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditivesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditivesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditivesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditivesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeBatchFragrance(rctx, args["input"].(RecipeBatchFragranceCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragrancePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragrancePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchFragrance(rctx, args["id"].(string), args["input"].(RecipeBatchFragranceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragrancePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragrancePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchFragrances(rctx, args["filter"].(*RecipeBatchFragranceFilter), args["input"].(RecipeBatchFragranceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragrancesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragrancesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrancesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrancesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchFragrance(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragranceDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragranceDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragranceDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragranceDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchFragrances(rctx, args["filter"].(*RecipeBatchFragranceFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragrancesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragrancesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrancesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrancesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeBatchLipid(rctx, args["input"].(RecipeBatchLipidCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipidPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipidPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchLipid(rctx, args["id"].(string), args["input"].(RecipeBatchLipidUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipidPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipidPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchLipids(rctx, args["filter"].(*RecipeBatchLipidFilter), args["input"].(RecipeBatchLipidUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipidsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipidsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipidsUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchLipid(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipidDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipidDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipidDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchLipids(rctx, args["filter"].(*RecipeBatchLipidFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipidsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipidsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipidsDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeBatchLye(rctx, args["input"].(RecipeBatchLyeCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLyePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLyePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLyePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchLye(rctx, args["id"].(string), args["input"].(RecipeBatchLyeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLyePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLyePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLyePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchLyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchLyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchLyes(rctx, args["filter"].(*RecipeBatchLyeFilter), args["input"].(RecipeBatchLyeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLyesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLyesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLyesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchLye(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLyeDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLyeDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLyeDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchLyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchLyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchLyes(rctx, args["filter"].(*RecipeBatchLyeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLyesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLyesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLyesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeBatchNote(rctx, args["input"].(RecipeBatchNoteCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNotePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNotePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNotePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNotePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchNote(rctx, args["id"].(string), args["input"].(RecipeBatchNoteUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNotePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNotePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNotePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNotePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchNotes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeBatchNotes(rctx, args["filter"].(*RecipeBatchNoteFilter), args["input"].(RecipeBatchNoteUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNotesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNotesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNotesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNotesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchNote(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNoteDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNoteDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNoteDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNoteDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchNotes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeBatchNotes(rctx, args["filter"].(*RecipeBatchNoteFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNotesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNotesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNotesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNotesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeFragrance(rctx, args["input"].(RecipeFragranceCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragrancePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragrancePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeFragrance(rctx, args["id"].(string), args["input"].(RecipeFragranceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragrancePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragrancePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeFragrances(rctx, args["filter"].(*RecipeFragranceFilter), args["input"].(RecipeFragranceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragrancesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragrancesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrancesUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeFragrancesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeFragrance(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragranceDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragranceDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragranceDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeFragranceDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeFragrances(rctx, args["filter"].(*RecipeFragranceFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragrancesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragrancesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrancesDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeFragrancesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeLipid(rctx, args["input"].(RecipeLipidCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipidPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipidPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeLipid(rctx, args["id"].(string), args["input"].(RecipeLipidUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipidPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipidPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeLipids(rctx, args["filter"].(*RecipeLipidFilter), args["input"].(RecipeLipidUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipidsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipidsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipidsUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeLipidsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeLipid(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipidDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipidDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipidDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeLipidDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeLipids(rctx, args["filter"].(*RecipeLipidFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipidsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipidsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipidsDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeLipidsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateRecipeStep(rctx, args["input"].(RecipeStepCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStepPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStepPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStepPayload)
	fc.Result = res
	return ec.marshalNRecipeStepPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeStep(rctx, args["id"].(string), args["input"].(RecipeStepUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStepPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStepPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStepPayload)
	fc.Result = res
	return ec.marshalNRecipeStepPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeSteps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeSteps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateRecipeSteps(rctx, args["filter"].(*RecipeStepFilter), args["input"].(RecipeStepUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStepsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStepsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStepsUpdatePayload)
	fc.Result = res
	return ec.marshalNRecipeStepsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeStep(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStepDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStepDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStepDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeStepDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeSteps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeSteps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteRecipeSteps(rctx, args["filter"].(*RecipeStepFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStepsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStepsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStepsDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeStepsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateSupplier(rctx, args["input"].(SupplierCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*SupplierPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.SupplierPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SupplierPayload)
	fc.Result = res
	return ec.marshalNSupplierPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSupplier(rctx, args["id"].(string), args["input"].(SupplierUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*SupplierPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.SupplierPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SupplierPayload)
	fc.Result = res
	return ec.marshalNSupplierPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSuppliers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSuppliers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateSuppliers(rctx, args["filter"].(*SupplierFilter), args["input"].(SupplierUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*SuppliersUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.SuppliersUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SuppliersUpdatePayload)
	fc.Result = res
	return ec.marshalNSuppliersUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSuppliersUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteSupplier(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*SupplierDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.SupplierDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SupplierDeletePayload)
	fc.Result = res
	return ec.marshalNSupplierDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSuppliers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSuppliers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteSuppliers(rctx, args["filter"].(*SupplierFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*SuppliersDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.SuppliersDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SuppliersDeletePayload)
	fc.Result = res
	return ec.marshalNSuppliersDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSuppliersDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_additive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_additive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Additive(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Additive); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.Additive`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_additives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_additives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Additives(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AdditiveOrdering), args["filter"].(*AdditiveFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveConnection)
	fc.Result = res
	return ec.marshalNAdditiveConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_additiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_additiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AdditiveInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventory); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventory`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventory)
	fc.Result = res
	return ec.marshalNAdditiveInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_additiveInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_additiveInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AdditiveInventories(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AdditiveInventoryOrdering), args["filter"].(*AdditiveInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AdditiveInventoryConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AdditiveInventoryConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AdditiveInventoryConnection)
	fc.Result = res
	return ec.marshalNAdditiveInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthGroup(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroup); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroup`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroup)
	fc.Result = res
	return ec.marshalNAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthGroups(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthGroupOrdering), args["filter"].(*AuthGroupFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupConnection)
	fc.Result = res
	return ec.marshalNAuthGroupConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authGroupPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authGroupPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthGroupPermission(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermission); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermission`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermission)
	fc.Result = res
	return ec.marshalNAuthGroupPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authGroupPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authGroupPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthGroupPermissions(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthGroupPermissionOrdering), args["filter"].(*AuthGroupPermissionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthGroupPermissionConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthGroupPermissionConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthGroupPermissionConnection)
	fc.Result = res
	return ec.marshalNAuthGroupPermissionConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthPermission(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermission); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermission`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermission)
	fc.Result = res
	return ec.marshalNAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthPermissions(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthPermissionOrdering), args["filter"].(*AuthPermissionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthPermissionConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthPermissionConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthPermissionConnection)
	fc.Result = res
	return ec.marshalNAuthPermissionConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthUser(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUser); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUser`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUser)
	fc.Result = res
	return ec.marshalNAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthUsers(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthUserOrdering), args["filter"].(*AuthUserFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserConnection)
	fc.Result = res
	return ec.marshalNAuthUserConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUserGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUserGroup_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthUserGroup(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroup); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroup`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroup)
	fc.Result = res
	return ec.marshalNAuthUserGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUserGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUserGroups_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthUserGroups(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthUserGroupOrdering), args["filter"].(*AuthUserGroupFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserGroupConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserGroupConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserGroupConnection)
	fc.Result = res
	return ec.marshalNAuthUserGroupConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUserUserPermission(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUserUserPermission_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthUserUserPermission(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermission); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermission`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermission)
	fc.Result = res
	return ec.marshalNAuthUserUserPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_authUserUserPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_authUserUserPermissions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuthUserUserPermissions(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*AuthUserUserPermissionOrdering), args["filter"].(*AuthUserUserPermissionFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuthUserUserPermissionConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.AuthUserUserPermissionConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuthUserUserPermissionConnection)
	fc.Result = res
	return ec.marshalNAuthUserUserPermissionConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Fragrance(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Fragrance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.Fragrance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Fragrances(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*FragranceOrdering), args["filter"].(*FragranceFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceConnection)
	fc.Result = res
	return ec.marshalNFragranceConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().FragranceInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventory); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventory`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventory)
	fc.Result = res
	return ec.marshalNFragranceInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fragranceInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fragranceInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().FragranceInventories(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*FragranceInventoryOrdering), args["filter"].(*FragranceInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FragranceInventoryConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.FragranceInventoryConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FragranceInventoryConnection)
	fc.Result = res
	return ec.marshalNFragranceInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Lipid(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Lipid); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.Lipid`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Lipids(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LipidOrdering), args["filter"].(*LipidFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidConnection)
	fc.Result = res
	return ec.marshalNLipidConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LipidInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventory); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventory`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventory)
	fc.Result = res
	return ec.marshalNLipidInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lipidInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lipidInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LipidInventories(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LipidInventoryOrdering), args["filter"].(*LipidInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LipidInventoryConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LipidInventoryConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LipidInventoryConnection)
	fc.Result = res
	return ec.marshalNLipidInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Lye(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Lye); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.Lye`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Lyes(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LyeOrdering), args["filter"].(*LyeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeConnection)
	fc.Result = res
	return ec.marshalNLyeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LyeInventory(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventory); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventory`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventory)
	fc.Result = res
	return ec.marshalNLyeInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lyeInventories(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lyeInventories_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LyeInventories(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*LyeInventoryOrdering), args["filter"].(*LyeInventoryFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LyeInventoryConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.LyeInventoryConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LyeInventoryConnection)
	fc.Result = res
	return ec.marshalNLyeInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Recipe(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Recipe); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.Recipe`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Recipes(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeOrdering), args["filter"].(*RecipeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeConnection)
	fc.Result = res
	return ec.marshalNRecipeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeAdditive(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditive); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditive`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditive)
	fc.Result = res
	return ec.marshalNRecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeAdditives(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeAdditiveOrdering), args["filter"].(*RecipeAdditiveFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeAdditiveConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeAdditiveConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditiveConnection)
	fc.Result = res
	return ec.marshalNRecipeAdditiveConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatch(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatch); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatch`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatches(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatches_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatches(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchOrdering), args["filter"].(*RecipeBatchFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchConnection)
	fc.Result = res
	return ec.marshalNRecipeBatchConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchAdditive(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditive); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditive`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchAdditives(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchAdditiveOrdering), args["filter"].(*RecipeBatchAdditiveFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchAdditiveConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchAdditiveConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditiveConnection)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditiveConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchFragrance(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragrance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragrance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchFragrances(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchFragranceOrdering), args["filter"].(*RecipeBatchFragranceFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchFragranceConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchFragranceConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragranceConnection)
	fc.Result = res
	return ec.marshalNRecipeBatchFragranceConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchLipid(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipid); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipid`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipid)
	fc.Result = res
	return ec.marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchLipids(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchLipidOrdering), args["filter"].(*RecipeBatchLipidFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLipidConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLipidConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipidConnection)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchLye(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLye); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLye`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLye)
	fc.Result = res
	return ec.marshalNRecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchLyes(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchLyeOrdering), args["filter"].(*RecipeBatchLyeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchLyeConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchLyeConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLyeConnection)
	fc.Result = res
	return ec.marshalNRecipeBatchLyeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchNote(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNote); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNote`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNote)
	fc.Result = res
	return ec.marshalNRecipeBatchNote2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchNotes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeBatchNotes(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeBatchNoteOrdering), args["filter"].(*RecipeBatchNoteFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeBatchNoteConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeBatchNoteConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNoteConnection)
	fc.Result = res
	return ec.marshalNRecipeBatchNoteConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeFragrance(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragrance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragrance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrance)
	fc.Result = res
	return ec.marshalNRecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeFragrances(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeFragranceOrdering), args["filter"].(*RecipeFragranceFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeFragranceConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeFragranceConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragranceConnection)
	fc.Result = res
	return ec.marshalNRecipeFragranceConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeLipid(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipid); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipid`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipid)
	fc.Result = res
	return ec.marshalNRecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeLipids(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeLipidOrdering), args["filter"].(*RecipeLipidFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeLipidConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeLipidConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipidConnection)
	fc.Result = res
	return ec.marshalNRecipeLipidConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeStep(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStep); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStep`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStep)
	fc.Result = res
	return ec.marshalNRecipeStep2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeSteps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeSteps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RecipeSteps(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*RecipeStepOrdering), args["filter"].(*RecipeStepFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*RecipeStepConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.RecipeStepConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStepConnection)
	fc.Result = res
	return ec.marshalNRecipeStepConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_supplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Supplier(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Supplier); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.Supplier`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_suppliers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_suppliers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Suppliers(rctx, args["pagination"].(boilergql.ConnectionPagination), args["ordering"].([]*SupplierOrdering), args["filter"].(*SupplierFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive IsAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*SupplierConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/issue-38-plugin-panics/graphql_models.SupplierConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SupplierConnection)
	fc.Result = res
	return ec.marshalNSupplierConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_id(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_name(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_note(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_createdAt(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_recipeAdditives(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeAdditives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeAdditive)
	fc.Result = res
	return ec.marshalORecipeAdditive2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_recipeBatches(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatch)
	fc.Result = res
	return ec.marshalORecipeBatch2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_recipeFragrances(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeFragrances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeFragrance)
	fc.Result = res
	return ec.marshalORecipeFragrance2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_recipeLipids(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeLipids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeLipid)
	fc.Result = res
	return ec.marshalORecipeLipid2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_recipeSteps(ctx context.Context, field graphql.CollectedField, obj *Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Recipe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeStep)
	fc.Result = res
	return ec.marshalORecipeStep2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_id(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_percentage(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_additive(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_recipe(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditiveConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditiveConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditiveConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeAdditiveEdge)
	fc.Result = res
	return ec.marshalORecipeAdditiveEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditiveConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditiveConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditiveConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditiveDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditiveDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditiveDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditiveEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditiveEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditiveEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditiveEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditiveEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditiveEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditive)
	fc.Result = res
	return ec.marshalORecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditivePayload_recipeAdditive(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditivePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeAdditive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeAdditive)
	fc.Result = res
	return ec.marshalNRecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditivesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditivesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditivesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditivesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeAdditivesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeAdditivesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_tag(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_productionDate(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_sellableDate(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellableDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_note(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_lipidWeight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_productionWeight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_curedWeight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CuredWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_recipe(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_batchRecipeBatchAdditives(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchRecipeBatchAdditives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalORecipeBatchAdditive2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_batchRecipeBatchFragrances(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchRecipeBatchFragrances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalORecipeBatchFragrance2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_batchRecipeBatchLipids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchRecipeBatchLipids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchLipid)
	fc.Result = res
	return ec.marshalORecipeBatchLipid2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_batchRecipeBatchLyes(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchRecipeBatchLyes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchLye)
	fc.Result = res
	return ec.marshalORecipeBatchLye2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_batchRecipeBatchNotes(ctx context.Context, field graphql.CollectedField, obj *RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BatchRecipeBatchNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchNote)
	fc.Result = res
	return ec.marshalORecipeBatchNote2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_weight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_cost(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_additive(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_batch(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditiveConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditiveConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditiveConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchAdditiveEdge)
	fc.Result = res
	return ec.marshalORecipeBatchAdditiveEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditiveConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditiveConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditiveConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditiveDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditiveDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditiveDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditiveEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditiveEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditiveEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditiveEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditiveEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditiveEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalORecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditivePayload_recipeBatchAdditive(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditivePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchAdditive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditivesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditivesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditivesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditivesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchAdditivesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchAdditivesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchEdge)
	fc.Result = res
	return ec.marshalORecipeBatchEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalORecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_weight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_cost(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_fragrance(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_batch(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragranceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragranceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragranceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchFragranceEdge)
	fc.Result = res
	return ec.marshalORecipeBatchFragranceEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragranceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragranceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragranceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragranceDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragranceDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragranceDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragranceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragranceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragranceEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragranceEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragranceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragranceEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalORecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrancePayload_recipeBatchFragrance(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrancePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrancePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchFragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrancesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrancesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrancesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrancesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchFragrancesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchFragrancesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_weight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_cost(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_lipid(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_batch(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchLipidEdge)
	fc.Result = res
	return ec.marshalORecipeBatchLipidEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipid)
	fc.Result = res
	return ec.marshalORecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidPayload_recipeBatchLipid(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchLipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLipid)
	fc.Result = res
	return ec.marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLipidsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLipidsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_weight(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_discount(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_cost(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_lye(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_batch(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLye",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchLyeEdge)
	fc.Result = res
	return ec.marshalORecipeBatchLyeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyeDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyeEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLye)
	fc.Result = res
	return ec.marshalORecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyePayload_recipeBatchLye(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchLye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchLye)
	fc.Result = res
	return ec.marshalNRecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchLyesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchLyesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_note(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_link(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_batch(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNote",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNoteConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNoteConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNoteConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeBatchNoteEdge)
	fc.Result = res
	return ec.marshalORecipeBatchNoteEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNoteConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNoteConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNoteConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNoteDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNoteDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNoteDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNoteEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNoteEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNoteEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNoteEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNoteEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNoteEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNote)
	fc.Result = res
	return ec.marshalORecipeBatchNote2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNotePayload_recipeBatchNote(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNotePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNotePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatchNote)
	fc.Result = res
	return ec.marshalNRecipeBatchNote2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNotesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNotesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNotesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNotesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchNotesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchNotesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchPayload_recipeBatch(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeBatchesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeBatchesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeEdge)
	fc.Result = res
	return ec.marshalORecipeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalORecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_id(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_percentage(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_fragrance(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_recipe(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragranceConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeFragranceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragranceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeFragranceEdge)
	fc.Result = res
	return ec.marshalORecipeFragranceEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragranceConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeFragranceConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragranceConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragranceDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeFragranceDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragranceDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragranceEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeFragranceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragranceEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragranceEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeFragranceEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragranceEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrance)
	fc.Result = res
	return ec.marshalORecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrancePayload_recipeFragrance(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrancePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrancePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeFragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeFragrance)
	fc.Result = res
	return ec.marshalNRecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrancesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrancesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrancesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrancesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeFragrancesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeFragrancesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_id(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_percentage(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_lipid(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_recipe(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipid",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeLipidEdge)
	fc.Result = res
	return ec.marshalORecipeLipidEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeLipid)
	fc.Result = res
	return ec.marshalORecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidPayload_recipeLipid(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeLipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeLipid)
	fc.Result = res
	return ec.marshalNRecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeLipidsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeLipidsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipePayload_recipe(ctx context.Context, field graphql.CollectedField, obj *RecipePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_id(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_num(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Num, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_note(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_recipe(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_updatedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_createdAt(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_deletedAt(ctx context.Context, field graphql.CollectedField, obj *RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStep",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepConnection_edges(ctx context.Context, field graphql.CollectedField, obj *RecipeStepConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*RecipeStepEdge)
	fc.Result = res
	return ec.marshalORecipeStepEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *RecipeStepConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *RecipeStepDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *RecipeStepEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepEdge_node(ctx context.Context, field graphql.CollectedField, obj *RecipeStepEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*RecipeStep)
	fc.Result = res
	return ec.marshalORecipeStep2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepPayload_recipeStep(ctx context.Context, field graphql.CollectedField, obj *RecipeStepPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RecipeStep)
	fc.Result = res
	return ec.marshalNRecipeStep2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipeStepsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipeStepsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipeStepsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *RecipesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *RecipesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "RecipesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_name(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_website(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_note(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_updatedAt(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_deletedAt(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_createdAt(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_additiveInventories(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditiveInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AdditiveInventory)
	fc.Result = res
	return ec.marshalOAdditiveInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_fragranceInventories(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FragranceInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FragranceInventory)
	fc.Result = res
	return ec.marshalOFragranceInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_lipidInventories(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LipidInventory)
	fc.Result = res
	return ec.marshalOLipidInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_lyeInventories(ctx context.Context, field graphql.CollectedField, obj *Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Supplier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LyeInventories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LyeInventory)
	fc.Result = res
	return ec.marshalOLyeInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierConnection_edges(ctx context.Context, field graphql.CollectedField, obj *SupplierConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SupplierConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*SupplierEdge)
	fc.Result = res
	return ec.marshalOSupplierEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *SupplierConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SupplierConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *SupplierDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SupplierDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *SupplierEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SupplierEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierEdge_node(ctx context.Context, field graphql.CollectedField, obj *SupplierEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SupplierEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalOSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierPayload_supplier(ctx context.Context, field graphql.CollectedField, obj *SupplierPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SupplierPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *SuppliersDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SuppliersDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SuppliersUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *SuppliersUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SuppliersUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAdditiveCreateInput(ctx context.Context, obj interface{}) (AdditiveCreateInput, error) {
	var it AdditiveCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveFilter(ctx context.Context, obj interface{}) (AdditiveFilter, error) {
	var it AdditiveFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryCreateInput(ctx context.Context, obj interface{}) (AdditiveInventoryCreateInput, error) {
	var it AdditiveInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error
			it.AdditiveID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryFilter(ctx context.Context, obj interface{}) (AdditiveInventoryFilter, error) {
	var it AdditiveInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryOrdering(ctx context.Context, obj interface{}) (AdditiveInventoryOrdering, error) {
	var it AdditiveInventoryOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAdditiveInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventorySort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryUpdateInput(ctx context.Context, obj interface{}) (AdditiveInventoryUpdateInput, error) {
	var it AdditiveInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error
			it.AdditiveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryWhere(ctx context.Context, obj interface{}) (AdditiveInventoryWhere, error) {
	var it AdditiveInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additive":
			var err error
			it.Additive, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveOrdering(ctx context.Context, obj interface{}) (AdditiveOrdering, error) {
	var it AdditiveOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveUpdateInput(ctx context.Context, obj interface{}) (AdditiveUpdateInput, error) {
	var it AdditiveUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveWhere(ctx context.Context, obj interface{}) (AdditiveWhere, error) {
	var it AdditiveWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeAdditive":
			var err error
			it.RecipeAdditive, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchAdditive":
			var err error
			it.RecipeBatchAdditive, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveInventories":
			var err error
			it.AdditiveInventories, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupCreateInput(ctx context.Context, obj interface{}) (AuthGroupCreateInput, error) {
	var it AuthGroupCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupFilter(ctx context.Context, obj interface{}) (AuthGroupFilter, error) {
	var it AuthGroupFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAuthGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupOrdering(ctx context.Context, obj interface{}) (AuthGroupOrdering, error) {
	var it AuthGroupOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAuthGroupSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupPermissionCreateInput(ctx context.Context, obj interface{}) (AuthGroupPermissionCreateInput, error) {
	var it AuthGroupPermissionCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "groupId":
			var err error
			it.GroupID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupPermissionFilter(ctx context.Context, obj interface{}) (AuthGroupPermissionFilter, error) {
	var it AuthGroupPermissionFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAuthGroupPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupPermissionOrdering(ctx context.Context, obj interface{}) (AuthGroupPermissionOrdering, error) {
	var it AuthGroupPermissionOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAuthGroupPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupPermissionUpdateInput(ctx context.Context, obj interface{}) (AuthGroupPermissionUpdateInput, error) {
	var it AuthGroupPermissionUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "groupId":
			var err error
			it.GroupID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupPermissionWhere(ctx context.Context, obj interface{}) (AuthGroupPermissionWhere, error) {
	var it AuthGroupPermissionWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "group":
			var err error
			it.Group, err = ec.unmarshalOAuthGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "permission":
			var err error
			it.Permission, err = ec.unmarshalOAuthPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthGroupPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthGroupPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupUpdateInput(ctx context.Context, obj interface{}) (AuthGroupUpdateInput, error) {
	var it AuthGroupUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthGroupWhere(ctx context.Context, obj interface{}) (AuthGroupWhere, error) {
	var it AuthGroupWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "groupAuthGroupPermissions":
			var err error
			it.GroupAuthGroupPermissions, err = ec.unmarshalOAuthGroupPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "groupAuthUserGroups":
			var err error
			it.GroupAuthUserGroups, err = ec.unmarshalOAuthUserGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthPermissionCreateInput(ctx context.Context, obj interface{}) (AuthPermissionCreateInput, error) {
	var it AuthPermissionCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentTypeId":
			var err error
			it.ContentTypeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "codename":
			var err error
			it.Codename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthPermissionFilter(ctx context.Context, obj interface{}) (AuthPermissionFilter, error) {
	var it AuthPermissionFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAuthPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthPermissionOrdering(ctx context.Context, obj interface{}) (AuthPermissionOrdering, error) {
	var it AuthPermissionOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAuthPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthPermissionUpdateInput(ctx context.Context, obj interface{}) (AuthPermissionUpdateInput, error) {
	var it AuthPermissionUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentTypeId":
			var err error
			it.ContentTypeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "codename":
			var err error
			it.Codename, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthPermissionWhere(ctx context.Context, obj interface{}) (AuthPermissionWhere, error) {
	var it AuthPermissionWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentTypeId":
			var err error
			it.ContentTypeID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "codename":
			var err error
			it.Codename, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionAuthGroupPermissions":
			var err error
			it.PermissionAuthGroupPermissions, err = ec.unmarshalOAuthGroupPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionAuthUserUserPermissions":
			var err error
			it.PermissionAuthUserUserPermissions, err = ec.unmarshalOAuthUserUserPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserCreateInput(ctx context.Context, obj interface{}) (AuthUserCreateInput, error) {
	var it AuthUserCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastLogin":
			var err error
			it.LastLogin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSuperuser":
			var err error
			it.IsSuperuser, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isStaff":
			var err error
			it.IsStaff, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error
			it.IsActive, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error
			it.DateJoined, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserFilter(ctx context.Context, obj interface{}) (AuthUserFilter, error) {
	var it AuthUserFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAuthUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserGroupCreateInput(ctx context.Context, obj interface{}) (AuthUserGroupCreateInput, error) {
	var it AuthUserGroupCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "groupId":
			var err error
			it.GroupID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserGroupFilter(ctx context.Context, obj interface{}) (AuthUserGroupFilter, error) {
	var it AuthUserGroupFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAuthUserGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserGroupOrdering(ctx context.Context, obj interface{}) (AuthUserGroupOrdering, error) {
	var it AuthUserGroupOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAuthUserGroupSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserGroupUpdateInput(ctx context.Context, obj interface{}) (AuthUserGroupUpdateInput, error) {
	var it AuthUserGroupUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "groupId":
			var err error
			it.GroupID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserGroupWhere(ctx context.Context, obj interface{}) (AuthUserGroupWhere, error) {
	var it AuthUserGroupWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOAuthUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "group":
			var err error
			it.Group, err = ec.unmarshalOAuthGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthUserGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthUserGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserOrdering(ctx context.Context, obj interface{}) (AuthUserOrdering, error) {
	var it AuthUserOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAuthUserSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserUpdateInput(ctx context.Context, obj interface{}) (AuthUserUpdateInput, error) {
	var it AuthUserUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "password":
			var err error
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastLogin":
			var err error
			it.LastLogin, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSuperuser":
			var err error
			it.IsSuperuser, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isStaff":
			var err error
			it.IsStaff, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error
			it.DateJoined, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserUserPermissionCreateInput(ctx context.Context, obj interface{}) (AuthUserUserPermissionCreateInput, error) {
	var it AuthUserUserPermissionCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserUserPermissionFilter(ctx context.Context, obj interface{}) (AuthUserUserPermissionFilter, error) {
	var it AuthUserUserPermissionFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOAuthUserUserPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserUserPermissionOrdering(ctx context.Context, obj interface{}) (AuthUserUserPermissionOrdering, error) {
	var it AuthUserUserPermissionOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNAuthUserUserPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserUserPermissionUpdateInput(ctx context.Context, obj interface{}) (AuthUserUserPermissionUpdateInput, error) {
	var it AuthUserUserPermissionUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "permissionId":
			var err error
			it.PermissionID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserUserPermissionWhere(ctx context.Context, obj interface{}) (AuthUserUserPermissionWhere, error) {
	var it AuthUserUserPermissionWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOAuthUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "permission":
			var err error
			it.Permission, err = ec.unmarshalOAuthPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthUserUserPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthUserUserPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuthUserWhere(ctx context.Context, obj interface{}) (AuthUserWhere, error) {
	var it AuthUserWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error
			it.Password, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastLogin":
			var err error
			it.LastLogin, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSuperuser":
			var err error
			it.IsSuperuser, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error
			it.Username, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isStaff":
			var err error
			it.IsStaff, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error
			it.IsActive, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐBooleanFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "dateJoined":
			var err error
			it.DateJoined, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "userAuthUserGroups":
			var err error
			it.UserAuthUserGroups, err = ec.unmarshalOAuthUserGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "userAuthUserUserPermissions":
			var err error
			it.UserAuthUserUserPermissions, err = ec.unmarshalOAuthUserUserPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOAuthUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOAuthUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanFilter(ctx context.Context, obj interface{}) (BooleanFilter, error) {
	var it BooleanFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionBackwardPagination(ctx context.Context, obj interface{}) (boilergql.ConnectionBackwardPagination, error) {
	var it boilergql.ConnectionBackwardPagination
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "last":
			var err error
			it.Last, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "before":
			var err error
			it.Before, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionForwardPagination(ctx context.Context, obj interface{}) (boilergql.ConnectionForwardPagination, error) {
	var it boilergql.ConnectionForwardPagination
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "first":
			var err error
			it.First, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error
			it.After, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionPagination(ctx context.Context, obj interface{}) (boilergql.ConnectionPagination, error) {
	var it boilergql.ConnectionPagination
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "forward":
			var err error
			it.Forward, err = ec.unmarshalOConnectionForwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionForwardPagination(ctx, v)
			if err != nil {
				return it, err
			}
		case "backward":
			var err error
			it.Backward, err = ec.unmarshalOConnectionBackwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionBackwardPagination(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (FloatFilter, error) {
	var it FloatFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error
			it.LessThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error
			it.LessThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error
			it.MoreThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error
			it.MoreThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceCreateInput(ctx context.Context, obj interface{}) (FragranceCreateInput, error) {
	var it FragranceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceFilter(ctx context.Context, obj interface{}) (FragranceFilter, error) {
	var it FragranceFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryCreateInput(ctx context.Context, obj interface{}) (FragranceInventoryCreateInput, error) {
	var it FragranceInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error
			it.FragranceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryFilter(ctx context.Context, obj interface{}) (FragranceInventoryFilter, error) {
	var it FragranceInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryOrdering(ctx context.Context, obj interface{}) (FragranceInventoryOrdering, error) {
	var it FragranceInventoryOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNFragranceInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventorySort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryUpdateInput(ctx context.Context, obj interface{}) (FragranceInventoryUpdateInput, error) {
	var it FragranceInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error
			it.FragranceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryWhere(ctx context.Context, obj interface{}) (FragranceInventoryWhere, error) {
	var it FragranceInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragrance":
			var err error
			it.Fragrance, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceOrdering(ctx context.Context, obj interface{}) (FragranceOrdering, error) {
	var it FragranceOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceUpdateInput(ctx context.Context, obj interface{}) (FragranceUpdateInput, error) {
	var it FragranceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceWhere(ctx context.Context, obj interface{}) (FragranceWhere, error) {
	var it FragranceWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchFragrance":
			var err error
			it.RecipeBatchFragrance, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeFragrance":
			var err error
			it.RecipeFragrance, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceInventories":
			var err error
			it.FragranceInventories, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIDFilter(ctx context.Context, obj interface{}) (IDFilter, error) {
	var it IDFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (IntFilter, error) {
	var it IntFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error
			it.LessThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error
			it.LessThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error
			it.MoreThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error
			it.MoreThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidCreateInput(ctx context.Context, obj interface{}) (LipidCreateInput, error) {
	var it LipidCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lauric":
			var err error
			it.Lauric, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "myristic":
			var err error
			it.Myristic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "palmitic":
			var err error
			it.Palmitic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "stearic":
			var err error
			it.Stearic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ricinoleic":
			var err error
			it.Ricinoleic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "oleic":
			var err error
			it.Oleic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "linoleic":
			var err error
			it.Linoleic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "linolenic":
			var err error
			it.Linolenic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardness":
			var err error
			it.Hardness, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cleansing":
			var err error
			it.Cleansing, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditioning":
			var err error
			it.Conditioning, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bubbly":
			var err error
			it.Bubbly, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creamy":
			var err error
			it.Creamy, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "iodine":
			var err error
			it.Iodine, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ins":
			var err error
			it.Ins, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "inciName":
			var err error
			it.InciName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "family":
			var err error
			it.Family, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error
			it.Naoh, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidFilter(ctx context.Context, obj interface{}) (LipidFilter, error) {
	var it LipidFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryCreateInput(ctx context.Context, obj interface{}) (LipidInventoryCreateInput, error) {
	var it LipidInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sap":
			var err error
			it.Sap, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error
			it.Naoh, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "koh":
			var err error
			it.Koh, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gramsPerLiter":
			var err error
			it.GramsPerLiter, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error
			it.LipidID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryFilter(ctx context.Context, obj interface{}) (LipidInventoryFilter, error) {
	var it LipidInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryOrdering(ctx context.Context, obj interface{}) (LipidInventoryOrdering, error) {
	var it LipidInventoryOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNLipidInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventorySort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryUpdateInput(ctx context.Context, obj interface{}) (LipidInventoryUpdateInput, error) {
	var it LipidInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sap":
			var err error
			it.Sap, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error
			it.Naoh, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "koh":
			var err error
			it.Koh, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gramsPerLiter":
			var err error
			it.GramsPerLiter, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error
			it.LipidID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryWhere(ctx context.Context, obj interface{}) (LipidInventoryWhere, error) {
	var it LipidInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "sap":
			var err error
			it.Sap, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error
			it.Naoh, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "koh":
			var err error
			it.Koh, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "gramsPerLiter":
			var err error
			it.GramsPerLiter, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipid":
			var err error
			it.Lipid, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidOrdering(ctx context.Context, obj interface{}) (LipidOrdering, error) {
	var it LipidOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidUpdateInput(ctx context.Context, obj interface{}) (LipidUpdateInput, error) {
	var it LipidUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lauric":
			var err error
			it.Lauric, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "myristic":
			var err error
			it.Myristic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "palmitic":
			var err error
			it.Palmitic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stearic":
			var err error
			it.Stearic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ricinoleic":
			var err error
			it.Ricinoleic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oleic":
			var err error
			it.Oleic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "linoleic":
			var err error
			it.Linoleic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "linolenic":
			var err error
			it.Linolenic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardness":
			var err error
			it.Hardness, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cleansing":
			var err error
			it.Cleansing, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditioning":
			var err error
			it.Conditioning, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "bubbly":
			var err error
			it.Bubbly, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "creamy":
			var err error
			it.Creamy, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "iodine":
			var err error
			it.Iodine, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ins":
			var err error
			it.Ins, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inciName":
			var err error
			it.InciName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "family":
			var err error
			it.Family, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error
			it.Naoh, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidWhere(ctx context.Context, obj interface{}) (LipidWhere, error) {
	var it LipidWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lauric":
			var err error
			it.Lauric, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "myristic":
			var err error
			it.Myristic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "palmitic":
			var err error
			it.Palmitic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "stearic":
			var err error
			it.Stearic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ricinoleic":
			var err error
			it.Ricinoleic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "oleic":
			var err error
			it.Oleic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linoleic":
			var err error
			it.Linoleic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linolenic":
			var err error
			it.Linolenic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardness":
			var err error
			it.Hardness, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cleansing":
			var err error
			it.Cleansing, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditioning":
			var err error
			it.Conditioning, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "bubbly":
			var err error
			it.Bubbly, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creamy":
			var err error
			it.Creamy, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "iodine":
			var err error
			it.Iodine, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ins":
			var err error
			it.Ins, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "inciName":
			var err error
			it.InciName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "family":
			var err error
			it.Family, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error
			it.Naoh, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchLipid":
			var err error
			it.RecipeBatchLipid, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeLipid":
			var err error
			it.RecipeLipid, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidInventories":
			var err error
			it.LipidInventories, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeCreateInput(ctx context.Context, obj interface{}) (LyeCreateInput, error) {
	var it LyeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error
			it.Kind, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeFilter(ctx context.Context, obj interface{}) (LyeFilter, error) {
	var it LyeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryCreateInput(ctx context.Context, obj interface{}) (LyeInventoryCreateInput, error) {
	var it LyeInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "concentration":
			var err error
			it.Concentration, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error
			it.LyeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryFilter(ctx context.Context, obj interface{}) (LyeInventoryFilter, error) {
	var it LyeInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryOrdering(ctx context.Context, obj interface{}) (LyeInventoryOrdering, error) {
	var it LyeInventoryOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNLyeInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventorySort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryUpdateInput(ctx context.Context, obj interface{}) (LyeInventoryUpdateInput, error) {
	var it LyeInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "concentration":
			var err error
			it.Concentration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error
			it.LyeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryWhere(ctx context.Context, obj interface{}) (LyeInventoryWhere, error) {
	var it LyeInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "concentration":
			var err error
			it.Concentration, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lye":
			var err error
			it.Lye, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeOrdering(ctx context.Context, obj interface{}) (LyeOrdering, error) {
	var it LyeOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNLyeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeUpdateInput(ctx context.Context, obj interface{}) (LyeUpdateInput, error) {
	var it LyeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error
			it.Kind, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeWhere(ctx context.Context, obj interface{}) (LyeWhere, error) {
	var it LyeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error
			it.Kind, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchLye":
			var err error
			it.RecipeBatchLye, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeInventories":
			var err error
			it.LyeInventories, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveCreateInput(ctx context.Context, obj interface{}) (RecipeAdditiveCreateInput, error) {
	var it RecipeAdditiveCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error
			it.AdditiveID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveFilter(ctx context.Context, obj interface{}) (RecipeAdditiveFilter, error) {
	var it RecipeAdditiveFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveOrdering(ctx context.Context, obj interface{}) (RecipeAdditiveOrdering, error) {
	var it RecipeAdditiveOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveUpdateInput(ctx context.Context, obj interface{}) (RecipeAdditiveUpdateInput, error) {
	var it RecipeAdditiveUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error
			it.AdditiveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveWhere(ctx context.Context, obj interface{}) (RecipeAdditiveWhere, error) {
	var it RecipeAdditiveWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additive":
			var err error
			it.Additive, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveCreateInput(ctx context.Context, obj interface{}) (RecipeBatchAdditiveCreateInput, error) {
	var it RecipeBatchAdditiveCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error
			it.AdditiveID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveFilter(ctx context.Context, obj interface{}) (RecipeBatchAdditiveFilter, error) {
	var it RecipeBatchAdditiveFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveOrdering(ctx context.Context, obj interface{}) (RecipeBatchAdditiveOrdering, error) {
	var it RecipeBatchAdditiveOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeBatchAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveUpdateInput(ctx context.Context, obj interface{}) (RecipeBatchAdditiveUpdateInput, error) {
	var it RecipeBatchAdditiveUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error
			it.AdditiveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveWhere(ctx context.Context, obj interface{}) (RecipeBatchAdditiveWhere, error) {
	var it RecipeBatchAdditiveWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additive":
			var err error
			it.Additive, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchCreateInput(ctx context.Context, obj interface{}) (RecipeBatchCreateInput, error) {
	var it RecipeBatchCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tag":
			var err error
			it.Tag, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionDate":
			var err error
			it.ProductionDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellableDate":
			var err error
			it.SellableDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidWeight":
			var err error
			it.LipidWeight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionWeight":
			var err error
			it.ProductionWeight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "curedWeight":
			var err error
			it.CuredWeight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFilter(ctx context.Context, obj interface{}) (RecipeBatchFilter, error) {
	var it RecipeBatchFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceCreateInput(ctx context.Context, obj interface{}) (RecipeBatchFragranceCreateInput, error) {
	var it RecipeBatchFragranceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error
			it.FragranceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceFilter(ctx context.Context, obj interface{}) (RecipeBatchFragranceFilter, error) {
	var it RecipeBatchFragranceFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceOrdering(ctx context.Context, obj interface{}) (RecipeBatchFragranceOrdering, error) {
	var it RecipeBatchFragranceOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeBatchFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceUpdateInput(ctx context.Context, obj interface{}) (RecipeBatchFragranceUpdateInput, error) {
	var it RecipeBatchFragranceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error
			it.FragranceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceWhere(ctx context.Context, obj interface{}) (RecipeBatchFragranceWhere, error) {
	var it RecipeBatchFragranceWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragrance":
			var err error
			it.Fragrance, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidCreateInput(ctx context.Context, obj interface{}) (RecipeBatchLipidCreateInput, error) {
	var it RecipeBatchLipidCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error
			it.LipidID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidFilter(ctx context.Context, obj interface{}) (RecipeBatchLipidFilter, error) {
	var it RecipeBatchLipidFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidOrdering(ctx context.Context, obj interface{}) (RecipeBatchLipidOrdering, error) {
	var it RecipeBatchLipidOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeBatchLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidUpdateInput(ctx context.Context, obj interface{}) (RecipeBatchLipidUpdateInput, error) {
	var it RecipeBatchLipidUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error
			it.LipidID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidWhere(ctx context.Context, obj interface{}) (RecipeBatchLipidWhere, error) {
	var it RecipeBatchLipidWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipid":
			var err error
			it.Lipid, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeCreateInput(ctx context.Context, obj interface{}) (RecipeBatchLyeCreateInput, error) {
	var it RecipeBatchLyeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error
			it.Discount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error
			it.LyeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeFilter(ctx context.Context, obj interface{}) (RecipeBatchLyeFilter, error) {
	var it RecipeBatchLyeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeOrdering(ctx context.Context, obj interface{}) (RecipeBatchLyeOrdering, error) {
	var it RecipeBatchLyeOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeBatchLyeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeUpdateInput(ctx context.Context, obj interface{}) (RecipeBatchLyeUpdateInput, error) {
	var it RecipeBatchLyeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error
			it.Discount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error
			it.LyeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeWhere(ctx context.Context, obj interface{}) (RecipeBatchLyeWhere, error) {
	var it RecipeBatchLyeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error
			it.Discount, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lye":
			var err error
			it.Lye, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteCreateInput(ctx context.Context, obj interface{}) (RecipeBatchNoteCreateInput, error) {
	var it RecipeBatchNoteCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error
			it.Link, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteFilter(ctx context.Context, obj interface{}) (RecipeBatchNoteFilter, error) {
	var it RecipeBatchNoteFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteOrdering(ctx context.Context, obj interface{}) (RecipeBatchNoteOrdering, error) {
	var it RecipeBatchNoteOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeBatchNoteSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteUpdateInput(ctx context.Context, obj interface{}) (RecipeBatchNoteUpdateInput, error) {
	var it RecipeBatchNoteUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error
			it.Link, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteWhere(ctx context.Context, obj interface{}) (RecipeBatchNoteWhere, error) {
	var it RecipeBatchNoteWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error
			it.Link, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchOrdering(ctx context.Context, obj interface{}) (RecipeBatchOrdering, error) {
	var it RecipeBatchOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeBatchSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchUpdateInput(ctx context.Context, obj interface{}) (RecipeBatchUpdateInput, error) {
	var it RecipeBatchUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tag":
			var err error
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionDate":
			var err error
			it.ProductionDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellableDate":
			var err error
			it.SellableDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidWeight":
			var err error
			it.LipidWeight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionWeight":
			var err error
			it.ProductionWeight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "curedWeight":
			var err error
			it.CuredWeight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchWhere(ctx context.Context, obj interface{}) (RecipeBatchWhere, error) {
	var it RecipeBatchWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error
			it.Tag, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionDate":
			var err error
			it.ProductionDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellableDate":
			var err error
			it.SellableDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidWeight":
			var err error
			it.LipidWeight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionWeight":
			var err error
			it.ProductionWeight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "curedWeight":
			var err error
			it.CuredWeight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchAdditives":
			var err error
			it.BatchRecipeBatchAdditives, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchFragrances":
			var err error
			it.BatchRecipeBatchFragrances, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchLipids":
			var err error
			it.BatchRecipeBatchLipids, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchLyes":
			var err error
			it.BatchRecipeBatchLyes, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchNotes":
			var err error
			it.BatchRecipeBatchNotes, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeCreateInput(ctx context.Context, obj interface{}) (RecipeCreateInput, error) {
	var it RecipeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFilter(ctx context.Context, obj interface{}) (RecipeFilter, error) {
	var it RecipeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceCreateInput(ctx context.Context, obj interface{}) (RecipeFragranceCreateInput, error) {
	var it RecipeFragranceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error
			it.FragranceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceFilter(ctx context.Context, obj interface{}) (RecipeFragranceFilter, error) {
	var it RecipeFragranceFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceOrdering(ctx context.Context, obj interface{}) (RecipeFragranceOrdering, error) {
	var it RecipeFragranceOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceUpdateInput(ctx context.Context, obj interface{}) (RecipeFragranceUpdateInput, error) {
	var it RecipeFragranceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error
			it.FragranceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceWhere(ctx context.Context, obj interface{}) (RecipeFragranceWhere, error) {
	var it RecipeFragranceWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragrance":
			var err error
			it.Fragrance, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidCreateInput(ctx context.Context, obj interface{}) (RecipeLipidCreateInput, error) {
	var it RecipeLipidCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error
			it.LipidID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidFilter(ctx context.Context, obj interface{}) (RecipeLipidFilter, error) {
	var it RecipeLipidFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidOrdering(ctx context.Context, obj interface{}) (RecipeLipidOrdering, error) {
	var it RecipeLipidOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidUpdateInput(ctx context.Context, obj interface{}) (RecipeLipidUpdateInput, error) {
	var it RecipeLipidUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error
			it.LipidID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidWhere(ctx context.Context, obj interface{}) (RecipeLipidWhere, error) {
	var it RecipeLipidWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "percentage":
			var err error
			it.Percentage, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipid":
			var err error
			it.Lipid, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeOrdering(ctx context.Context, obj interface{}) (RecipeOrdering, error) {
	var it RecipeOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepCreateInput(ctx context.Context, obj interface{}) (RecipeStepCreateInput, error) {
	var it RecipeStepCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "num":
			var err error
			it.Num, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepFilter(ctx context.Context, obj interface{}) (RecipeStepFilter, error) {
	var it RecipeStepFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepOrdering(ctx context.Context, obj interface{}) (RecipeStepOrdering, error) {
	var it RecipeStepOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNRecipeStepSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepUpdateInput(ctx context.Context, obj interface{}) (RecipeStepUpdateInput, error) {
	var it RecipeStepUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "num":
			var err error
			it.Num, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepWhere(ctx context.Context, obj interface{}) (RecipeStepWhere, error) {
	var it RecipeStepWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "num":
			var err error
			it.Num, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeUpdateInput(ctx context.Context, obj interface{}) (RecipeUpdateInput, error) {
	var it RecipeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeWhere(ctx context.Context, obj interface{}) (RecipeWhere, error) {
	var it RecipeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeAdditives":
			var err error
			it.RecipeAdditives, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatches":
			var err error
			it.RecipeBatches, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeFragrances":
			var err error
			it.RecipeFragrances, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeLipids":
			var err error
			it.RecipeLipids, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeSteps":
			var err error
			it.RecipeSteps, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj interface{}) (StringFilter, error) {
	var it StringFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWith":
			var err error
			it.StartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWith":
			var err error
			it.NotStartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWith":
			var err error
			it.EndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWith":
			var err error
			it.NotEndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contain":
			var err error
			it.Contain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContain":
			var err error
			it.NotContain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWithStrict":
			var err error
			it.StartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWithStrict":
			var err error
			it.NotStartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWithStrict":
			var err error
			it.EndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWithStrict":
			var err error
			it.NotEndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "containStrict":
			var err error
			it.ContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContainStrict":
			var err error
			it.NotContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierCreateInput(ctx context.Context, obj interface{}) (SupplierCreateInput, error) {
	var it SupplierCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error
			it.Website, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierFilter(ctx context.Context, obj interface{}) (SupplierFilter, error) {
	var it SupplierFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierOrdering(ctx context.Context, obj interface{}) (SupplierOrdering, error) {
	var it SupplierOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNSupplierSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierUpdateInput(ctx context.Context, obj interface{}) (SupplierUpdateInput, error) {
	var it SupplierUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error
			it.Website, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierWhere(ctx context.Context, obj interface{}) (SupplierWhere, error) {
	var it SupplierWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error
			it.Website, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveInventories":
			var err error
			it.AdditiveInventories, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceInventories":
			var err error
			it.FragranceInventories, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidInventories":
			var err error
			it.LipidInventories, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeInventories":
			var err error
			it.LyeInventories, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case Additive:
		return ec._Additive(ctx, sel, &obj)
	case *Additive:
		if obj == nil {
			return graphql.Null
		}
		return ec._Additive(ctx, sel, obj)
	case AdditiveInventory:
		return ec._AdditiveInventory(ctx, sel, &obj)
	case *AdditiveInventory:
		if obj == nil {
			return graphql.Null
		}
		return ec._AdditiveInventory(ctx, sel, obj)
	case AuthGroup:
		return ec._AuthGroup(ctx, sel, &obj)
	case *AuthGroup:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthGroup(ctx, sel, obj)
	case AuthGroupPermission:
		return ec._AuthGroupPermission(ctx, sel, &obj)
	case *AuthGroupPermission:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthGroupPermission(ctx, sel, obj)
	case AuthPermission:
		return ec._AuthPermission(ctx, sel, &obj)
	case *AuthPermission:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthPermission(ctx, sel, obj)
	case AuthUser:
		return ec._AuthUser(ctx, sel, &obj)
	case *AuthUser:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthUser(ctx, sel, obj)
	case AuthUserGroup:
		return ec._AuthUserGroup(ctx, sel, &obj)
	case *AuthUserGroup:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthUserGroup(ctx, sel, obj)
	case AuthUserUserPermission:
		return ec._AuthUserUserPermission(ctx, sel, &obj)
	case *AuthUserUserPermission:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuthUserUserPermission(ctx, sel, obj)
	case Fragrance:
		return ec._Fragrance(ctx, sel, &obj)
	case *Fragrance:
		if obj == nil {
			return graphql.Null
		}
		return ec._Fragrance(ctx, sel, obj)
	case FragranceInventory:
		return ec._FragranceInventory(ctx, sel, &obj)
	case *FragranceInventory:
		if obj == nil {
			return graphql.Null
		}
		return ec._FragranceInventory(ctx, sel, obj)
	case Lipid:
		return ec._Lipid(ctx, sel, &obj)
	case *Lipid:
		if obj == nil {
			return graphql.Null
		}
		return ec._Lipid(ctx, sel, obj)
	case LipidInventory:
		return ec._LipidInventory(ctx, sel, &obj)
	case *LipidInventory:
		if obj == nil {
			return graphql.Null
		}
		return ec._LipidInventory(ctx, sel, obj)
	case Lye:
		return ec._Lye(ctx, sel, &obj)
	case *Lye:
		if obj == nil {
			return graphql.Null
		}
		return ec._Lye(ctx, sel, obj)
	case LyeInventory:
		return ec._LyeInventory(ctx, sel, &obj)
	case *LyeInventory:
		if obj == nil {
			return graphql.Null
		}
		return ec._LyeInventory(ctx, sel, obj)
	case Recipe:
		return ec._Recipe(ctx, sel, &obj)
	case *Recipe:
		if obj == nil {
			return graphql.Null
		}
		return ec._Recipe(ctx, sel, obj)
	case RecipeAdditive:
		return ec._RecipeAdditive(ctx, sel, &obj)
	case *RecipeAdditive:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeAdditive(ctx, sel, obj)
	case RecipeBatch:
		return ec._RecipeBatch(ctx, sel, &obj)
	case *RecipeBatch:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeBatch(ctx, sel, obj)
	case RecipeBatchAdditive:
		return ec._RecipeBatchAdditive(ctx, sel, &obj)
	case *RecipeBatchAdditive:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeBatchAdditive(ctx, sel, obj)
	case RecipeBatchFragrance:
		return ec._RecipeBatchFragrance(ctx, sel, &obj)
	case *RecipeBatchFragrance:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeBatchFragrance(ctx, sel, obj)
	case RecipeBatchLipid:
		return ec._RecipeBatchLipid(ctx, sel, &obj)
	case *RecipeBatchLipid:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeBatchLipid(ctx, sel, obj)
	case RecipeBatchLye:
		return ec._RecipeBatchLye(ctx, sel, &obj)
	case *RecipeBatchLye:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeBatchLye(ctx, sel, obj)
	case RecipeBatchNote:
		return ec._RecipeBatchNote(ctx, sel, &obj)
	case *RecipeBatchNote:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeBatchNote(ctx, sel, obj)
	case RecipeFragrance:
		return ec._RecipeFragrance(ctx, sel, &obj)
	case *RecipeFragrance:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeFragrance(ctx, sel, obj)
	case RecipeLipid:
		return ec._RecipeLipid(ctx, sel, &obj)
	case *RecipeLipid:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeLipid(ctx, sel, obj)
	case RecipeStep:
		return ec._RecipeStep(ctx, sel, &obj)
	case *RecipeStep:
		if obj == nil {
			return graphql.Null
		}
		return ec._RecipeStep(ctx, sel, obj)
	case Supplier:
		return ec._Supplier(ctx, sel, &obj)
	case *Supplier:
		if obj == nil {
			return graphql.Null
		}
		return ec._Supplier(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var additiveImplementors = []string{"Additive", "Node"}

func (ec *executionContext) _Additive(ctx context.Context, sel ast.SelectionSet, obj *Additive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Additive")
		case "id":
			out.Values[i] = ec._Additive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Additive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Additive_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Additive_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Additive_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Additive_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipeAdditive":
			out.Values[i] = ec._Additive_recipeAdditive(ctx, field, obj)
		case "recipeBatchAdditive":
			out.Values[i] = ec._Additive_recipeBatchAdditive(ctx, field, obj)
		case "additiveInventories":
			out.Values[i] = ec._Additive_additiveInventories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveConnectionImplementors = []string{"AdditiveConnection"}

func (ec *executionContext) _AdditiveConnection(ctx context.Context, sel ast.SelectionSet, obj *AdditiveConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveConnection")
		case "edges":
			out.Values[i] = ec._AdditiveConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AdditiveConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveDeletePayloadImplementors = []string{"AdditiveDeletePayload"}

func (ec *executionContext) _AdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveDeletePayload")
		case "id":
			out.Values[i] = ec._AdditiveDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveEdgeImplementors = []string{"AdditiveEdge"}

func (ec *executionContext) _AdditiveEdge(ctx context.Context, sel ast.SelectionSet, obj *AdditiveEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveEdge")
		case "cursor":
			out.Values[i] = ec._AdditiveEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AdditiveEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoriesDeletePayloadImplementors = []string{"AdditiveInventoriesDeletePayload"}

func (ec *executionContext) _AdditiveInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventoriesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoriesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoriesDeletePayload")
		case "ids":
			out.Values[i] = ec._AdditiveInventoriesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoriesUpdatePayloadImplementors = []string{"AdditiveInventoriesUpdatePayload"}

func (ec *executionContext) _AdditiveInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventoriesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoriesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoriesUpdatePayload")
		case "ok":
			out.Values[i] = ec._AdditiveInventoriesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryImplementors = []string{"AdditiveInventory", "Node"}

func (ec *executionContext) _AdditiveInventory(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventory")
		case "id":
			out.Values[i] = ec._AdditiveInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._AdditiveInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._AdditiveInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._AdditiveInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._AdditiveInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additive":
			out.Values[i] = ec._AdditiveInventory_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._AdditiveInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._AdditiveInventory_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AdditiveInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._AdditiveInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryConnectionImplementors = []string{"AdditiveInventoryConnection"}

func (ec *executionContext) _AdditiveInventoryConnection(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoryConnection")
		case "edges":
			out.Values[i] = ec._AdditiveInventoryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AdditiveInventoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryDeletePayloadImplementors = []string{"AdditiveInventoryDeletePayload"}

func (ec *executionContext) _AdditiveInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._AdditiveInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryEdgeImplementors = []string{"AdditiveInventoryEdge"}

func (ec *executionContext) _AdditiveInventoryEdge(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoryEdge")
		case "cursor":
			out.Values[i] = ec._AdditiveInventoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AdditiveInventoryEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryPayloadImplementors = []string{"AdditiveInventoryPayload"}

func (ec *executionContext) _AdditiveInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *AdditiveInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoryPayload")
		case "additiveInventory":
			out.Values[i] = ec._AdditiveInventoryPayload_additiveInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additivePayloadImplementors = []string{"AdditivePayload"}

func (ec *executionContext) _AdditivePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditivePayload")
		case "additive":
			out.Values[i] = ec._AdditivePayload_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additivesDeletePayloadImplementors = []string{"AdditivesDeletePayload"}

func (ec *executionContext) _AdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditivesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additivesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditivesDeletePayload")
		case "ids":
			out.Values[i] = ec._AdditivesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additivesUpdatePayloadImplementors = []string{"AdditivesUpdatePayload"}

func (ec *executionContext) _AdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AdditivesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additivesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditivesUpdatePayload")
		case "ok":
			out.Values[i] = ec._AdditivesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupImplementors = []string{"AuthGroup", "Node"}

func (ec *executionContext) _AuthGroup(ctx context.Context, sel ast.SelectionSet, obj *AuthGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroup")
		case "id":
			out.Values[i] = ec._AuthGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AuthGroup_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "groupAuthGroupPermissions":
			out.Values[i] = ec._AuthGroup_groupAuthGroupPermissions(ctx, field, obj)
		case "groupAuthUserGroups":
			out.Values[i] = ec._AuthGroup_groupAuthUserGroups(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupConnectionImplementors = []string{"AuthGroupConnection"}

func (ec *executionContext) _AuthGroupConnection(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupConnection")
		case "edges":
			out.Values[i] = ec._AuthGroupConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthGroupConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupDeletePayloadImplementors = []string{"AuthGroupDeletePayload"}

func (ec *executionContext) _AuthGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupDeletePayload")
		case "id":
			out.Values[i] = ec._AuthGroupDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupEdgeImplementors = []string{"AuthGroupEdge"}

func (ec *executionContext) _AuthGroupEdge(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupEdge")
		case "cursor":
			out.Values[i] = ec._AuthGroupEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AuthGroupEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPayloadImplementors = []string{"AuthGroupPayload"}

func (ec *executionContext) _AuthGroupPayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPayload")
		case "authGroup":
			out.Values[i] = ec._AuthGroupPayload_authGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionImplementors = []string{"AuthGroupPermission", "Node"}

func (ec *executionContext) _AuthGroupPermission(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermission")
		case "id":
			out.Values[i] = ec._AuthGroupPermission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._AuthGroupPermission_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permission":
			out.Values[i] = ec._AuthGroupPermission_permission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionConnectionImplementors = []string{"AuthGroupPermissionConnection"}

func (ec *executionContext) _AuthGroupPermissionConnection(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermissionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermissionConnection")
		case "edges":
			out.Values[i] = ec._AuthGroupPermissionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthGroupPermissionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionDeletePayloadImplementors = []string{"AuthGroupPermissionDeletePayload"}

func (ec *executionContext) _AuthGroupPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermissionDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermissionDeletePayload")
		case "id":
			out.Values[i] = ec._AuthGroupPermissionDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionEdgeImplementors = []string{"AuthGroupPermissionEdge"}

func (ec *executionContext) _AuthGroupPermissionEdge(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermissionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermissionEdge")
		case "cursor":
			out.Values[i] = ec._AuthGroupPermissionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AuthGroupPermissionEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionPayloadImplementors = []string{"AuthGroupPermissionPayload"}

func (ec *executionContext) _AuthGroupPermissionPayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermissionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermissionPayload")
		case "authGroupPermission":
			out.Values[i] = ec._AuthGroupPermissionPayload_authGroupPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionsDeletePayloadImplementors = []string{"AuthGroupPermissionsDeletePayload"}

func (ec *executionContext) _AuthGroupPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermissionsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermissionsDeletePayload")
		case "ids":
			out.Values[i] = ec._AuthGroupPermissionsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupPermissionsUpdatePayloadImplementors = []string{"AuthGroupPermissionsUpdatePayload"}

func (ec *executionContext) _AuthGroupPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupPermissionsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupPermissionsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupPermissionsUpdatePayload")
		case "ok":
			out.Values[i] = ec._AuthGroupPermissionsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupsDeletePayloadImplementors = []string{"AuthGroupsDeletePayload"}

func (ec *executionContext) _AuthGroupsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupsDeletePayload")
		case "ids":
			out.Values[i] = ec._AuthGroupsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authGroupsUpdatePayloadImplementors = []string{"AuthGroupsUpdatePayload"}

func (ec *executionContext) _AuthGroupsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthGroupsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authGroupsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthGroupsUpdatePayload")
		case "ok":
			out.Values[i] = ec._AuthGroupsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionImplementors = []string{"AuthPermission", "Node"}

func (ec *executionContext) _AuthPermission(ctx context.Context, sel ast.SelectionSet, obj *AuthPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermission")
		case "id":
			out.Values[i] = ec._AuthPermission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AuthPermission_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contentTypeId":
			out.Values[i] = ec._AuthPermission_contentTypeId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "codename":
			out.Values[i] = ec._AuthPermission_codename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permissionAuthGroupPermissions":
			out.Values[i] = ec._AuthPermission_permissionAuthGroupPermissions(ctx, field, obj)
		case "permissionAuthUserUserPermissions":
			out.Values[i] = ec._AuthPermission_permissionAuthUserUserPermissions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionConnectionImplementors = []string{"AuthPermissionConnection"}

func (ec *executionContext) _AuthPermissionConnection(ctx context.Context, sel ast.SelectionSet, obj *AuthPermissionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermissionConnection")
		case "edges":
			out.Values[i] = ec._AuthPermissionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthPermissionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionDeletePayloadImplementors = []string{"AuthPermissionDeletePayload"}

func (ec *executionContext) _AuthPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthPermissionDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermissionDeletePayload")
		case "id":
			out.Values[i] = ec._AuthPermissionDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionEdgeImplementors = []string{"AuthPermissionEdge"}

func (ec *executionContext) _AuthPermissionEdge(ctx context.Context, sel ast.SelectionSet, obj *AuthPermissionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermissionEdge")
		case "cursor":
			out.Values[i] = ec._AuthPermissionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AuthPermissionEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionPayloadImplementors = []string{"AuthPermissionPayload"}

func (ec *executionContext) _AuthPermissionPayload(ctx context.Context, sel ast.SelectionSet, obj *AuthPermissionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermissionPayload")
		case "authPermission":
			out.Values[i] = ec._AuthPermissionPayload_authPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionsDeletePayloadImplementors = []string{"AuthPermissionsDeletePayload"}

func (ec *executionContext) _AuthPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthPermissionsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermissionsDeletePayload")
		case "ids":
			out.Values[i] = ec._AuthPermissionsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authPermissionsUpdatePayloadImplementors = []string{"AuthPermissionsUpdatePayload"}

func (ec *executionContext) _AuthPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthPermissionsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authPermissionsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthPermissionsUpdatePayload")
		case "ok":
			out.Values[i] = ec._AuthPermissionsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserImplementors = []string{"AuthUser", "Node"}

func (ec *executionContext) _AuthUser(ctx context.Context, sel ast.SelectionSet, obj *AuthUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUser")
		case "id":
			out.Values[i] = ec._AuthUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":
			out.Values[i] = ec._AuthUser_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastLogin":
			out.Values[i] = ec._AuthUser_lastLogin(ctx, field, obj)
		case "isSuperuser":
			out.Values[i] = ec._AuthUser_isSuperuser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":
			out.Values[i] = ec._AuthUser_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._AuthUser_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":
			out.Values[i] = ec._AuthUser_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._AuthUser_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isStaff":
			out.Values[i] = ec._AuthUser_isStaff(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isActive":
			out.Values[i] = ec._AuthUser_isActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateJoined":
			out.Values[i] = ec._AuthUser_dateJoined(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userAuthUserGroups":
			out.Values[i] = ec._AuthUser_userAuthUserGroups(ctx, field, obj)
		case "userAuthUserUserPermissions":
			out.Values[i] = ec._AuthUser_userAuthUserUserPermissions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserConnectionImplementors = []string{"AuthUserConnection"}

func (ec *executionContext) _AuthUserConnection(ctx context.Context, sel ast.SelectionSet, obj *AuthUserConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserConnection")
		case "edges":
			out.Values[i] = ec._AuthUserConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthUserConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserDeletePayloadImplementors = []string{"AuthUserDeletePayload"}

func (ec *executionContext) _AuthUserDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserDeletePayload")
		case "id":
			out.Values[i] = ec._AuthUserDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserEdgeImplementors = []string{"AuthUserEdge"}

func (ec *executionContext) _AuthUserEdge(ctx context.Context, sel ast.SelectionSet, obj *AuthUserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserEdge")
		case "cursor":
			out.Values[i] = ec._AuthUserEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AuthUserEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupImplementors = []string{"AuthUserGroup", "Node"}

func (ec *executionContext) _AuthUserGroup(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroup")
		case "id":
			out.Values[i] = ec._AuthUserGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._AuthUserGroup_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "group":
			out.Values[i] = ec._AuthUserGroup_group(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupConnectionImplementors = []string{"AuthUserGroupConnection"}

func (ec *executionContext) _AuthUserGroupConnection(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroupConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroupConnection")
		case "edges":
			out.Values[i] = ec._AuthUserGroupConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthUserGroupConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupDeletePayloadImplementors = []string{"AuthUserGroupDeletePayload"}

func (ec *executionContext) _AuthUserGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroupDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroupDeletePayload")
		case "id":
			out.Values[i] = ec._AuthUserGroupDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupEdgeImplementors = []string{"AuthUserGroupEdge"}

func (ec *executionContext) _AuthUserGroupEdge(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroupEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroupEdge")
		case "cursor":
			out.Values[i] = ec._AuthUserGroupEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AuthUserGroupEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupPayloadImplementors = []string{"AuthUserGroupPayload"}

func (ec *executionContext) _AuthUserGroupPayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroupPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroupPayload")
		case "authUserGroup":
			out.Values[i] = ec._AuthUserGroupPayload_authUserGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupsDeletePayloadImplementors = []string{"AuthUserGroupsDeletePayload"}

func (ec *executionContext) _AuthUserGroupsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroupsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroupsDeletePayload")
		case "ids":
			out.Values[i] = ec._AuthUserGroupsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserGroupsUpdatePayloadImplementors = []string{"AuthUserGroupsUpdatePayload"}

func (ec *executionContext) _AuthUserGroupsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserGroupsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserGroupsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserGroupsUpdatePayload")
		case "ok":
			out.Values[i] = ec._AuthUserGroupsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserPayloadImplementors = []string{"AuthUserPayload"}

func (ec *executionContext) _AuthUserPayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserPayload")
		case "authUser":
			out.Values[i] = ec._AuthUserPayload_authUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionImplementors = []string{"AuthUserUserPermission", "Node"}

func (ec *executionContext) _AuthUserUserPermission(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermission")
		case "id":
			out.Values[i] = ec._AuthUserUserPermission_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._AuthUserUserPermission_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "permission":
			out.Values[i] = ec._AuthUserUserPermission_permission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionConnectionImplementors = []string{"AuthUserUserPermissionConnection"}

func (ec *executionContext) _AuthUserUserPermissionConnection(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermissionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermissionConnection")
		case "edges":
			out.Values[i] = ec._AuthUserUserPermissionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AuthUserUserPermissionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionDeletePayloadImplementors = []string{"AuthUserUserPermissionDeletePayload"}

func (ec *executionContext) _AuthUserUserPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermissionDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermissionDeletePayload")
		case "id":
			out.Values[i] = ec._AuthUserUserPermissionDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionEdgeImplementors = []string{"AuthUserUserPermissionEdge"}

func (ec *executionContext) _AuthUserUserPermissionEdge(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermissionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermissionEdge")
		case "cursor":
			out.Values[i] = ec._AuthUserUserPermissionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._AuthUserUserPermissionEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionPayloadImplementors = []string{"AuthUserUserPermissionPayload"}

func (ec *executionContext) _AuthUserUserPermissionPayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermissionPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermissionPayload")
		case "authUserUserPermission":
			out.Values[i] = ec._AuthUserUserPermissionPayload_authUserUserPermission(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionsDeletePayloadImplementors = []string{"AuthUserUserPermissionsDeletePayload"}

func (ec *executionContext) _AuthUserUserPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermissionsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermissionsDeletePayload")
		case "ids":
			out.Values[i] = ec._AuthUserUserPermissionsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUserUserPermissionsUpdatePayloadImplementors = []string{"AuthUserUserPermissionsUpdatePayload"}

func (ec *executionContext) _AuthUserUserPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUserUserPermissionsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUserUserPermissionsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUserUserPermissionsUpdatePayload")
		case "ok":
			out.Values[i] = ec._AuthUserUserPermissionsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUsersDeletePayloadImplementors = []string{"AuthUsersDeletePayload"}

func (ec *executionContext) _AuthUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUsersDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUsersDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUsersDeletePayload")
		case "ids":
			out.Values[i] = ec._AuthUsersDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authUsersUpdatePayloadImplementors = []string{"AuthUsersUpdatePayload"}

func (ec *executionContext) _AuthUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *AuthUsersUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authUsersUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthUsersUpdatePayload")
		case "ok":
			out.Values[i] = ec._AuthUsersUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceImplementors = []string{"Fragrance", "Node"}

func (ec *executionContext) _Fragrance(ctx context.Context, sel ast.SelectionSet, obj *Fragrance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fragrance")
		case "id":
			out.Values[i] = ec._Fragrance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Fragrance_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Fragrance_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Fragrance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Fragrance_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Fragrance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipeBatchFragrance":
			out.Values[i] = ec._Fragrance_recipeBatchFragrance(ctx, field, obj)
		case "recipeFragrance":
			out.Values[i] = ec._Fragrance_recipeFragrance(ctx, field, obj)
		case "fragranceInventories":
			out.Values[i] = ec._Fragrance_fragranceInventories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceConnectionImplementors = []string{"FragranceConnection"}

func (ec *executionContext) _FragranceConnection(ctx context.Context, sel ast.SelectionSet, obj *FragranceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceConnection")
		case "edges":
			out.Values[i] = ec._FragranceConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FragranceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceDeletePayloadImplementors = []string{"FragranceDeletePayload"}

func (ec *executionContext) _FragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *FragranceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceDeletePayload")
		case "id":
			out.Values[i] = ec._FragranceDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceEdgeImplementors = []string{"FragranceEdge"}

func (ec *executionContext) _FragranceEdge(ctx context.Context, sel ast.SelectionSet, obj *FragranceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceEdge")
		case "cursor":
			out.Values[i] = ec._FragranceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._FragranceEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoriesDeletePayloadImplementors = []string{"FragranceInventoriesDeletePayload"}

func (ec *executionContext) _FragranceInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventoriesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoriesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoriesDeletePayload")
		case "ids":
			out.Values[i] = ec._FragranceInventoriesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoriesUpdatePayloadImplementors = []string{"FragranceInventoriesUpdatePayload"}

func (ec *executionContext) _FragranceInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventoriesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoriesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoriesUpdatePayload")
		case "ok":
			out.Values[i] = ec._FragranceInventoriesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryImplementors = []string{"FragranceInventory", "Node"}

func (ec *executionContext) _FragranceInventory(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventory")
		case "id":
			out.Values[i] = ec._FragranceInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._FragranceInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._FragranceInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._FragranceInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._FragranceInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fragrance":
			out.Values[i] = ec._FragranceInventory_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._FragranceInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._FragranceInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._FragranceInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._FragranceInventory_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryConnectionImplementors = []string{"FragranceInventoryConnection"}

func (ec *executionContext) _FragranceInventoryConnection(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoryConnection")
		case "edges":
			out.Values[i] = ec._FragranceInventoryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FragranceInventoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryDeletePayloadImplementors = []string{"FragranceInventoryDeletePayload"}

func (ec *executionContext) _FragranceInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._FragranceInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryEdgeImplementors = []string{"FragranceInventoryEdge"}

func (ec *executionContext) _FragranceInventoryEdge(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoryEdge")
		case "cursor":
			out.Values[i] = ec._FragranceInventoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._FragranceInventoryEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryPayloadImplementors = []string{"FragranceInventoryPayload"}

func (ec *executionContext) _FragranceInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *FragranceInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoryPayload")
		case "fragranceInventory":
			out.Values[i] = ec._FragranceInventoryPayload_fragranceInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragrancePayloadImplementors = []string{"FragrancePayload"}

func (ec *executionContext) _FragrancePayload(ctx context.Context, sel ast.SelectionSet, obj *FragrancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragrancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragrancePayload")
		case "fragrance":
			out.Values[i] = ec._FragrancePayload_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragrancesDeletePayloadImplementors = []string{"FragrancesDeletePayload"}

func (ec *executionContext) _FragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *FragrancesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragrancesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragrancesDeletePayload")
		case "ids":
			out.Values[i] = ec._FragrancesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragrancesUpdatePayloadImplementors = []string{"FragrancesUpdatePayload"}

func (ec *executionContext) _FragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *FragrancesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragrancesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragrancesUpdatePayload")
		case "ok":
			out.Values[i] = ec._FragrancesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidImplementors = []string{"Lipid", "Node"}

func (ec *executionContext) _Lipid(ctx context.Context, sel ast.SelectionSet, obj *Lipid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lipid")
		case "id":
			out.Values[i] = ec._Lipid_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Lipid_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lauric":
			out.Values[i] = ec._Lipid_lauric(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "myristic":
			out.Values[i] = ec._Lipid_myristic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "palmitic":
			out.Values[i] = ec._Lipid_palmitic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stearic":
			out.Values[i] = ec._Lipid_stearic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ricinoleic":
			out.Values[i] = ec._Lipid_ricinoleic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "oleic":
			out.Values[i] = ec._Lipid_oleic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linoleic":
			out.Values[i] = ec._Lipid_linoleic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linolenic":
			out.Values[i] = ec._Lipid_linolenic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hardness":
			out.Values[i] = ec._Lipid_hardness(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cleansing":
			out.Values[i] = ec._Lipid_cleansing(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "conditioning":
			out.Values[i] = ec._Lipid_conditioning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bubbly":
			out.Values[i] = ec._Lipid_bubbly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creamy":
			out.Values[i] = ec._Lipid_creamy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iodine":
			out.Values[i] = ec._Lipid_iodine(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ins":
			out.Values[i] = ec._Lipid_ins(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inciName":
			out.Values[i] = ec._Lipid_inciName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "family":
			out.Values[i] = ec._Lipid_family(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "naoh":
			out.Values[i] = ec._Lipid_naoh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Lipid_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Lipid_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Lipid_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipeBatchLipid":
			out.Values[i] = ec._Lipid_recipeBatchLipid(ctx, field, obj)
		case "recipeLipid":
			out.Values[i] = ec._Lipid_recipeLipid(ctx, field, obj)
		case "lipidInventories":
			out.Values[i] = ec._Lipid_lipidInventories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidConnectionImplementors = []string{"LipidConnection"}

func (ec *executionContext) _LipidConnection(ctx context.Context, sel ast.SelectionSet, obj *LipidConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidConnection")
		case "edges":
			out.Values[i] = ec._LipidConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LipidConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidDeletePayloadImplementors = []string{"LipidDeletePayload"}

func (ec *executionContext) _LipidDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LipidDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidDeletePayload")
		case "id":
			out.Values[i] = ec._LipidDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidEdgeImplementors = []string{"LipidEdge"}

func (ec *executionContext) _LipidEdge(ctx context.Context, sel ast.SelectionSet, obj *LipidEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidEdge")
		case "cursor":
			out.Values[i] = ec._LipidEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LipidEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoriesDeletePayloadImplementors = []string{"LipidInventoriesDeletePayload"}

func (ec *executionContext) _LipidInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LipidInventoriesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoriesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoriesDeletePayload")
		case "ids":
			out.Values[i] = ec._LipidInventoriesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoriesUpdatePayloadImplementors = []string{"LipidInventoriesUpdatePayload"}

func (ec *executionContext) _LipidInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *LipidInventoriesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoriesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoriesUpdatePayload")
		case "ok":
			out.Values[i] = ec._LipidInventoriesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryImplementors = []string{"LipidInventory", "Node"}

func (ec *executionContext) _LipidInventory(ctx context.Context, sel ast.SelectionSet, obj *LipidInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventory")
		case "id":
			out.Values[i] = ec._LipidInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._LipidInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._LipidInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._LipidInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._LipidInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sap":
			out.Values[i] = ec._LipidInventory_sap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "naoh":
			out.Values[i] = ec._LipidInventory_naoh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "koh":
			out.Values[i] = ec._LipidInventory_koh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gramsPerLiter":
			out.Values[i] = ec._LipidInventory_gramsPerLiter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipid":
			out.Values[i] = ec._LipidInventory_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._LipidInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LipidInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._LipidInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._LipidInventory_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryConnectionImplementors = []string{"LipidInventoryConnection"}

func (ec *executionContext) _LipidInventoryConnection(ctx context.Context, sel ast.SelectionSet, obj *LipidInventoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoryConnection")
		case "edges":
			out.Values[i] = ec._LipidInventoryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LipidInventoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryDeletePayloadImplementors = []string{"LipidInventoryDeletePayload"}

func (ec *executionContext) _LipidInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LipidInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._LipidInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryEdgeImplementors = []string{"LipidInventoryEdge"}

func (ec *executionContext) _LipidInventoryEdge(ctx context.Context, sel ast.SelectionSet, obj *LipidInventoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoryEdge")
		case "cursor":
			out.Values[i] = ec._LipidInventoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LipidInventoryEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryPayloadImplementors = []string{"LipidInventoryPayload"}

func (ec *executionContext) _LipidInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *LipidInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoryPayload")
		case "lipidInventory":
			out.Values[i] = ec._LipidInventoryPayload_lipidInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidPayloadImplementors = []string{"LipidPayload"}

func (ec *executionContext) _LipidPayload(ctx context.Context, sel ast.SelectionSet, obj *LipidPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidPayload")
		case "lipid":
			out.Values[i] = ec._LipidPayload_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidsDeletePayloadImplementors = []string{"LipidsDeletePayload"}

func (ec *executionContext) _LipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LipidsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidsDeletePayload")
		case "ids":
			out.Values[i] = ec._LipidsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidsUpdatePayloadImplementors = []string{"LipidsUpdatePayload"}

func (ec *executionContext) _LipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *LipidsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidsUpdatePayload")
		case "ok":
			out.Values[i] = ec._LipidsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeImplementors = []string{"Lye", "Node"}

func (ec *executionContext) _Lye(ctx context.Context, sel ast.SelectionSet, obj *Lye) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lye")
		case "id":
			out.Values[i] = ec._Lye_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kind":
			out.Values[i] = ec._Lye_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Lye_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Lye_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Lye_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Lye_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Lye_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipeBatchLye":
			out.Values[i] = ec._Lye_recipeBatchLye(ctx, field, obj)
		case "lyeInventories":
			out.Values[i] = ec._Lye_lyeInventories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeConnectionImplementors = []string{"LyeConnection"}

func (ec *executionContext) _LyeConnection(ctx context.Context, sel ast.SelectionSet, obj *LyeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeConnection")
		case "edges":
			out.Values[i] = ec._LyeConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LyeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeDeletePayloadImplementors = []string{"LyeDeletePayload"}

func (ec *executionContext) _LyeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LyeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeDeletePayload")
		case "id":
			out.Values[i] = ec._LyeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeEdgeImplementors = []string{"LyeEdge"}

func (ec *executionContext) _LyeEdge(ctx context.Context, sel ast.SelectionSet, obj *LyeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeEdge")
		case "cursor":
			out.Values[i] = ec._LyeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LyeEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoriesDeletePayloadImplementors = []string{"LyeInventoriesDeletePayload"}

func (ec *executionContext) _LyeInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LyeInventoriesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoriesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoriesDeletePayload")
		case "ids":
			out.Values[i] = ec._LyeInventoriesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoriesUpdatePayloadImplementors = []string{"LyeInventoriesUpdatePayload"}

func (ec *executionContext) _LyeInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *LyeInventoriesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoriesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoriesUpdatePayload")
		case "ok":
			out.Values[i] = ec._LyeInventoriesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryImplementors = []string{"LyeInventory", "Node"}

func (ec *executionContext) _LyeInventory(ctx context.Context, sel ast.SelectionSet, obj *LyeInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventory")
		case "id":
			out.Values[i] = ec._LyeInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._LyeInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._LyeInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._LyeInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._LyeInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "concentration":
			out.Values[i] = ec._LyeInventory_concentration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lye":
			out.Values[i] = ec._LyeInventory_lye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._LyeInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LyeInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._LyeInventory_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._LyeInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryConnectionImplementors = []string{"LyeInventoryConnection"}

func (ec *executionContext) _LyeInventoryConnection(ctx context.Context, sel ast.SelectionSet, obj *LyeInventoryConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoryConnection")
		case "edges":
			out.Values[i] = ec._LyeInventoryConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LyeInventoryConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryDeletePayloadImplementors = []string{"LyeInventoryDeletePayload"}

func (ec *executionContext) _LyeInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LyeInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._LyeInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryEdgeImplementors = []string{"LyeInventoryEdge"}

func (ec *executionContext) _LyeInventoryEdge(ctx context.Context, sel ast.SelectionSet, obj *LyeInventoryEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoryEdge")
		case "cursor":
			out.Values[i] = ec._LyeInventoryEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LyeInventoryEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryPayloadImplementors = []string{"LyeInventoryPayload"}

func (ec *executionContext) _LyeInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *LyeInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoryPayload")
		case "lyeInventory":
			out.Values[i] = ec._LyeInventoryPayload_lyeInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyePayloadImplementors = []string{"LyePayload"}

func (ec *executionContext) _LyePayload(ctx context.Context, sel ast.SelectionSet, obj *LyePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyePayload")
		case "lye":
			out.Values[i] = ec._LyePayload_lye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyesDeletePayloadImplementors = []string{"LyesDeletePayload"}

func (ec *executionContext) _LyesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LyesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyesDeletePayload")
		case "ids":
			out.Values[i] = ec._LyesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyesUpdatePayloadImplementors = []string{"LyesUpdatePayload"}

func (ec *executionContext) _LyesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *LyesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyesUpdatePayload")
		case "ok":
			out.Values[i] = ec._LyesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAdditive":
			out.Values[i] = ec._Mutation_createAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdditive":
			out.Values[i] = ec._Mutation_updateAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdditives":
			out.Values[i] = ec._Mutation_updateAdditives(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdditive":
			out.Values[i] = ec._Mutation_deleteAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdditives":
			out.Values[i] = ec._Mutation_deleteAdditives(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAdditiveInventory":
			out.Values[i] = ec._Mutation_createAdditiveInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdditiveInventory":
			out.Values[i] = ec._Mutation_updateAdditiveInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdditiveInventories":
			out.Values[i] = ec._Mutation_updateAdditiveInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdditiveInventory":
			out.Values[i] = ec._Mutation_deleteAdditiveInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdditiveInventories":
			out.Values[i] = ec._Mutation_deleteAdditiveInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAuthGroup":
			out.Values[i] = ec._Mutation_createAuthGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthGroup":
			out.Values[i] = ec._Mutation_updateAuthGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthGroups":
			out.Values[i] = ec._Mutation_updateAuthGroups(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthGroup":
			out.Values[i] = ec._Mutation_deleteAuthGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthGroups":
			out.Values[i] = ec._Mutation_deleteAuthGroups(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAuthGroupPermission":
			out.Values[i] = ec._Mutation_createAuthGroupPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthGroupPermission":
			out.Values[i] = ec._Mutation_updateAuthGroupPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthGroupPermissions":
			out.Values[i] = ec._Mutation_updateAuthGroupPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthGroupPermission":
			out.Values[i] = ec._Mutation_deleteAuthGroupPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthGroupPermissions":
			out.Values[i] = ec._Mutation_deleteAuthGroupPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAuthPermission":
			out.Values[i] = ec._Mutation_createAuthPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthPermission":
			out.Values[i] = ec._Mutation_updateAuthPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthPermissions":
			out.Values[i] = ec._Mutation_updateAuthPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthPermission":
			out.Values[i] = ec._Mutation_deleteAuthPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthPermissions":
			out.Values[i] = ec._Mutation_deleteAuthPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAuthUser":
			out.Values[i] = ec._Mutation_createAuthUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthUser":
			out.Values[i] = ec._Mutation_updateAuthUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthUsers":
			out.Values[i] = ec._Mutation_updateAuthUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthUser":
			out.Values[i] = ec._Mutation_deleteAuthUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthUsers":
			out.Values[i] = ec._Mutation_deleteAuthUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAuthUserGroup":
			out.Values[i] = ec._Mutation_createAuthUserGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthUserGroup":
			out.Values[i] = ec._Mutation_updateAuthUserGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthUserGroups":
			out.Values[i] = ec._Mutation_updateAuthUserGroups(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthUserGroup":
			out.Values[i] = ec._Mutation_deleteAuthUserGroup(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthUserGroups":
			out.Values[i] = ec._Mutation_deleteAuthUserGroups(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAuthUserUserPermission":
			out.Values[i] = ec._Mutation_createAuthUserUserPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthUserUserPermission":
			out.Values[i] = ec._Mutation_updateAuthUserUserPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAuthUserUserPermissions":
			out.Values[i] = ec._Mutation_updateAuthUserUserPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthUserUserPermission":
			out.Values[i] = ec._Mutation_deleteAuthUserUserPermission(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAuthUserUserPermissions":
			out.Values[i] = ec._Mutation_deleteAuthUserUserPermissions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFragrance":
			out.Values[i] = ec._Mutation_createFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFragrance":
			out.Values[i] = ec._Mutation_updateFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFragrances":
			out.Values[i] = ec._Mutation_updateFragrances(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFragrance":
			out.Values[i] = ec._Mutation_deleteFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFragrances":
			out.Values[i] = ec._Mutation_deleteFragrances(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFragranceInventory":
			out.Values[i] = ec._Mutation_createFragranceInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFragranceInventory":
			out.Values[i] = ec._Mutation_updateFragranceInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFragranceInventories":
			out.Values[i] = ec._Mutation_updateFragranceInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFragranceInventory":
			out.Values[i] = ec._Mutation_deleteFragranceInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFragranceInventories":
			out.Values[i] = ec._Mutation_deleteFragranceInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLipid":
			out.Values[i] = ec._Mutation_createLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLipid":
			out.Values[i] = ec._Mutation_updateLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLipids":
			out.Values[i] = ec._Mutation_updateLipids(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLipid":
			out.Values[i] = ec._Mutation_deleteLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLipids":
			out.Values[i] = ec._Mutation_deleteLipids(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLipidInventory":
			out.Values[i] = ec._Mutation_createLipidInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLipidInventory":
			out.Values[i] = ec._Mutation_updateLipidInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLipidInventories":
			out.Values[i] = ec._Mutation_updateLipidInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLipidInventory":
			out.Values[i] = ec._Mutation_deleteLipidInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLipidInventories":
			out.Values[i] = ec._Mutation_deleteLipidInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLye":
			out.Values[i] = ec._Mutation_createLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLye":
			out.Values[i] = ec._Mutation_updateLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLyes":
			out.Values[i] = ec._Mutation_updateLyes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLye":
			out.Values[i] = ec._Mutation_deleteLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLyes":
			out.Values[i] = ec._Mutation_deleteLyes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLyeInventory":
			out.Values[i] = ec._Mutation_createLyeInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLyeInventory":
			out.Values[i] = ec._Mutation_updateLyeInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLyeInventories":
			out.Values[i] = ec._Mutation_updateLyeInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLyeInventory":
			out.Values[i] = ec._Mutation_deleteLyeInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLyeInventories":
			out.Values[i] = ec._Mutation_deleteLyeInventories(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipe":
			out.Values[i] = ec._Mutation_createRecipe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipe":
			out.Values[i] = ec._Mutation_updateRecipe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipes":
			out.Values[i] = ec._Mutation_updateRecipes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipe":
			out.Values[i] = ec._Mutation_deleteRecipe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipes":
			out.Values[i] = ec._Mutation_deleteRecipes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeAdditive":
			out.Values[i] = ec._Mutation_createRecipeAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeAdditive":
			out.Values[i] = ec._Mutation_updateRecipeAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeAdditives":
			out.Values[i] = ec._Mutation_updateRecipeAdditives(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeAdditive":
			out.Values[i] = ec._Mutation_deleteRecipeAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeAdditives":
			out.Values[i] = ec._Mutation_deleteRecipeAdditives(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatch":
			out.Values[i] = ec._Mutation_createRecipeBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatch":
			out.Values[i] = ec._Mutation_updateRecipeBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatches":
			out.Values[i] = ec._Mutation_updateRecipeBatches(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatch":
			out.Values[i] = ec._Mutation_deleteRecipeBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatches":
			out.Values[i] = ec._Mutation_deleteRecipeBatches(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchAdditive":
			out.Values[i] = ec._Mutation_createRecipeBatchAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchAdditive":
			out.Values[i] = ec._Mutation_updateRecipeBatchAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchAdditives":
			out.Values[i] = ec._Mutation_updateRecipeBatchAdditives(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchAdditive":
			out.Values[i] = ec._Mutation_deleteRecipeBatchAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchAdditives":
			out.Values[i] = ec._Mutation_deleteRecipeBatchAdditives(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchFragrance":
			out.Values[i] = ec._Mutation_createRecipeBatchFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchFragrance":
			out.Values[i] = ec._Mutation_updateRecipeBatchFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchFragrances":
			out.Values[i] = ec._Mutation_updateRecipeBatchFragrances(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchFragrance":
			out.Values[i] = ec._Mutation_deleteRecipeBatchFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchFragrances":
			out.Values[i] = ec._Mutation_deleteRecipeBatchFragrances(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchLipid":
			out.Values[i] = ec._Mutation_createRecipeBatchLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchLipid":
			out.Values[i] = ec._Mutation_updateRecipeBatchLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchLipids":
			out.Values[i] = ec._Mutation_updateRecipeBatchLipids(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchLipid":
			out.Values[i] = ec._Mutation_deleteRecipeBatchLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchLipids":
			out.Values[i] = ec._Mutation_deleteRecipeBatchLipids(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchLye":
			out.Values[i] = ec._Mutation_createRecipeBatchLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchLye":
			out.Values[i] = ec._Mutation_updateRecipeBatchLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchLyes":
			out.Values[i] = ec._Mutation_updateRecipeBatchLyes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchLye":
			out.Values[i] = ec._Mutation_deleteRecipeBatchLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchLyes":
			out.Values[i] = ec._Mutation_deleteRecipeBatchLyes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchNote":
			out.Values[i] = ec._Mutation_createRecipeBatchNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchNote":
			out.Values[i] = ec._Mutation_updateRecipeBatchNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchNotes":
			out.Values[i] = ec._Mutation_updateRecipeBatchNotes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchNote":
			out.Values[i] = ec._Mutation_deleteRecipeBatchNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchNotes":
			out.Values[i] = ec._Mutation_deleteRecipeBatchNotes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeFragrance":
			out.Values[i] = ec._Mutation_createRecipeFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeFragrance":
			out.Values[i] = ec._Mutation_updateRecipeFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeFragrances":
			out.Values[i] = ec._Mutation_updateRecipeFragrances(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeFragrance":
			out.Values[i] = ec._Mutation_deleteRecipeFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeFragrances":
			out.Values[i] = ec._Mutation_deleteRecipeFragrances(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeLipid":
			out.Values[i] = ec._Mutation_createRecipeLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeLipid":
			out.Values[i] = ec._Mutation_updateRecipeLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeLipids":
			out.Values[i] = ec._Mutation_updateRecipeLipids(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeLipid":
			out.Values[i] = ec._Mutation_deleteRecipeLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeLipids":
			out.Values[i] = ec._Mutation_deleteRecipeLipids(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeStep":
			out.Values[i] = ec._Mutation_createRecipeStep(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeStep":
			out.Values[i] = ec._Mutation_updateRecipeStep(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeSteps":
			out.Values[i] = ec._Mutation_updateRecipeSteps(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeStep":
			out.Values[i] = ec._Mutation_deleteRecipeStep(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeSteps":
			out.Values[i] = ec._Mutation_deleteRecipeSteps(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSupplier":
			out.Values[i] = ec._Mutation_createSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSupplier":
			out.Values[i] = ec._Mutation_updateSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSuppliers":
			out.Values[i] = ec._Mutation_updateSuppliers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSupplier":
			out.Values[i] = ec._Mutation_deleteSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSuppliers":
			out.Values[i] = ec._Mutation_deleteSuppliers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			})
		case "additive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_additive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "additives":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_additives(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "additiveInventory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_additiveInventory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "additiveInventories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_additiveInventories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authGroup":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authGroup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authGroups":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authGroups(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authGroupPermission":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authGroupPermission(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authGroupPermissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authGroupPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authPermission":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authPermission(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authPermissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authUsers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authUserGroup":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUserGroup(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authUserGroups":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUserGroups(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authUserUserPermission":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUserUserPermission(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "authUserUserPermissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUserUserPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fragrance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fragrance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fragrances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fragrances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fragranceInventory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fragranceInventory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fragranceInventories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fragranceInventories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lipid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lipid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lipids":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lipids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lipidInventory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lipidInventory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lipidInventories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lipidInventories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lye":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lye(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lyes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lyes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lyeInventory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lyeInventory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lyeInventories":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lyeInventories(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipe(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeAdditive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeAdditive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeAdditives":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeAdditives(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatch(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatches":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatches(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchAdditive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchAdditive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchAdditives":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchAdditives(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchFragrance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchFragrance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchFragrances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchFragrances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLipid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLipid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLipids":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLipids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLye":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLye(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLyes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLyes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchNote":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchNote(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchNotes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchNotes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeFragrance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeFragrance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeFragrances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeFragrances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeLipid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeLipid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeLipids":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeLipids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeStep":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeStep(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeSteps":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeSteps(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supplier":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supplier(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "suppliers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_suppliers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeImplementors = []string{"Recipe", "Node"}

func (ec *executionContext) _Recipe(ctx context.Context, sel ast.SelectionSet, obj *Recipe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Recipe")
		case "id":
			out.Values[i] = ec._Recipe_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Recipe_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Recipe_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Recipe_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Recipe_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Recipe_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipeAdditives":
			out.Values[i] = ec._Recipe_recipeAdditives(ctx, field, obj)
		case "recipeBatches":
			out.Values[i] = ec._Recipe_recipeBatches(ctx, field, obj)
		case "recipeFragrances":
			out.Values[i] = ec._Recipe_recipeFragrances(ctx, field, obj)
		case "recipeLipids":
			out.Values[i] = ec._Recipe_recipeLipids(ctx, field, obj)
		case "recipeSteps":
			out.Values[i] = ec._Recipe_recipeSteps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditiveImplementors = []string{"RecipeAdditive", "Node"}

func (ec *executionContext) _RecipeAdditive(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditive")
		case "id":
			out.Values[i] = ec._RecipeAdditive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":
			out.Values[i] = ec._RecipeAdditive_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additive":
			out.Values[i] = ec._RecipeAdditive_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeAdditive_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeAdditive_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeAdditive_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeAdditive_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditiveConnectionImplementors = []string{"RecipeAdditiveConnection"}

func (ec *executionContext) _RecipeAdditiveConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditiveConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditiveConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditiveConnection")
		case "edges":
			out.Values[i] = ec._RecipeAdditiveConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeAdditiveConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditiveDeletePayloadImplementors = []string{"RecipeAdditiveDeletePayload"}

func (ec *executionContext) _RecipeAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditiveDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeAdditiveDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditiveEdgeImplementors = []string{"RecipeAdditiveEdge"}

func (ec *executionContext) _RecipeAdditiveEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditiveEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditiveEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditiveEdge")
		case "cursor":
			out.Values[i] = ec._RecipeAdditiveEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeAdditiveEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditivePayloadImplementors = []string{"RecipeAdditivePayload"}

func (ec *executionContext) _RecipeAdditivePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditivePayload")
		case "recipeAdditive":
			out.Values[i] = ec._RecipeAdditivePayload_recipeAdditive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditivesDeletePayloadImplementors = []string{"RecipeAdditivesDeletePayload"}

func (ec *executionContext) _RecipeAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditivesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditivesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditivesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeAdditivesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditivesUpdatePayloadImplementors = []string{"RecipeAdditivesUpdatePayload"}

func (ec *executionContext) _RecipeAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeAdditivesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditivesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditivesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeAdditivesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchImplementors = []string{"RecipeBatch", "Node"}

func (ec *executionContext) _RecipeBatch(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatch")
		case "id":
			out.Values[i] = ec._RecipeBatch_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._RecipeBatch_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productionDate":
			out.Values[i] = ec._RecipeBatch_productionDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sellableDate":
			out.Values[i] = ec._RecipeBatch_sellableDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._RecipeBatch_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipidWeight":
			out.Values[i] = ec._RecipeBatch_lipidWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productionWeight":
			out.Values[i] = ec._RecipeBatch_productionWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "curedWeight":
			out.Values[i] = ec._RecipeBatch_curedWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeBatch_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatch_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatch_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatch_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batchRecipeBatchAdditives":
			out.Values[i] = ec._RecipeBatch_batchRecipeBatchAdditives(ctx, field, obj)
		case "batchRecipeBatchFragrances":
			out.Values[i] = ec._RecipeBatch_batchRecipeBatchFragrances(ctx, field, obj)
		case "batchRecipeBatchLipids":
			out.Values[i] = ec._RecipeBatch_batchRecipeBatchLipids(ctx, field, obj)
		case "batchRecipeBatchLyes":
			out.Values[i] = ec._RecipeBatch_batchRecipeBatchLyes(ctx, field, obj)
		case "batchRecipeBatchNotes":
			out.Values[i] = ec._RecipeBatch_batchRecipeBatchNotes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditiveImplementors = []string{"RecipeBatchAdditive", "Node"}

func (ec *executionContext) _RecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditive")
		case "id":
			out.Values[i] = ec._RecipeBatchAdditive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchAdditive_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchAdditive_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additive":
			out.Values[i] = ec._RecipeBatchAdditive_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchAdditive_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchAdditive_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchAdditive_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchAdditive_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditiveConnectionImplementors = []string{"RecipeBatchAdditiveConnection"}

func (ec *executionContext) _RecipeBatchAdditiveConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditiveConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditiveConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditiveConnection")
		case "edges":
			out.Values[i] = ec._RecipeBatchAdditiveConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeBatchAdditiveConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditiveDeletePayloadImplementors = []string{"RecipeBatchAdditiveDeletePayload"}

func (ec *executionContext) _RecipeBatchAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditiveDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchAdditiveDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditiveEdgeImplementors = []string{"RecipeBatchAdditiveEdge"}

func (ec *executionContext) _RecipeBatchAdditiveEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditiveEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditiveEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditiveEdge")
		case "cursor":
			out.Values[i] = ec._RecipeBatchAdditiveEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeBatchAdditiveEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditivePayloadImplementors = []string{"RecipeBatchAdditivePayload"}

func (ec *executionContext) _RecipeBatchAdditivePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditivePayload")
		case "recipeBatchAdditive":
			out.Values[i] = ec._RecipeBatchAdditivePayload_recipeBatchAdditive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditivesDeletePayloadImplementors = []string{"RecipeBatchAdditivesDeletePayload"}

func (ec *executionContext) _RecipeBatchAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditivesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditivesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditivesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeBatchAdditivesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditivesUpdatePayloadImplementors = []string{"RecipeBatchAdditivesUpdatePayload"}

func (ec *executionContext) _RecipeBatchAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchAdditivesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditivesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditivesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeBatchAdditivesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchConnectionImplementors = []string{"RecipeBatchConnection"}

func (ec *executionContext) _RecipeBatchConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchConnection")
		case "edges":
			out.Values[i] = ec._RecipeBatchConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeBatchConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchDeletePayloadImplementors = []string{"RecipeBatchDeletePayload"}

func (ec *executionContext) _RecipeBatchDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchEdgeImplementors = []string{"RecipeBatchEdge"}

func (ec *executionContext) _RecipeBatchEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchEdge")
		case "cursor":
			out.Values[i] = ec._RecipeBatchEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeBatchEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragranceImplementors = []string{"RecipeBatchFragrance", "Node"}

func (ec *executionContext) _RecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragrance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragrance")
		case "id":
			out.Values[i] = ec._RecipeBatchFragrance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchFragrance_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchFragrance_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fragrance":
			out.Values[i] = ec._RecipeBatchFragrance_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchFragrance_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchFragrance_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchFragrance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchFragrance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragranceConnectionImplementors = []string{"RecipeBatchFragranceConnection"}

func (ec *executionContext) _RecipeBatchFragranceConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragranceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragranceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragranceConnection")
		case "edges":
			out.Values[i] = ec._RecipeBatchFragranceConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeBatchFragranceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragranceDeletePayloadImplementors = []string{"RecipeBatchFragranceDeletePayload"}

func (ec *executionContext) _RecipeBatchFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragranceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragranceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragranceDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchFragranceDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragranceEdgeImplementors = []string{"RecipeBatchFragranceEdge"}

func (ec *executionContext) _RecipeBatchFragranceEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragranceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragranceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragranceEdge")
		case "cursor":
			out.Values[i] = ec._RecipeBatchFragranceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeBatchFragranceEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragrancePayloadImplementors = []string{"RecipeBatchFragrancePayload"}

func (ec *executionContext) _RecipeBatchFragrancePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragrancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragrancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragrancePayload")
		case "recipeBatchFragrance":
			out.Values[i] = ec._RecipeBatchFragrancePayload_recipeBatchFragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragrancesDeletePayloadImplementors = []string{"RecipeBatchFragrancesDeletePayload"}

func (ec *executionContext) _RecipeBatchFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragrancesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragrancesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragrancesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeBatchFragrancesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragrancesUpdatePayloadImplementors = []string{"RecipeBatchFragrancesUpdatePayload"}

func (ec *executionContext) _RecipeBatchFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchFragrancesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragrancesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragrancesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeBatchFragrancesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidImplementors = []string{"RecipeBatchLipid", "Node"}

func (ec *executionContext) _RecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipid")
		case "id":
			out.Values[i] = ec._RecipeBatchLipid_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchLipid_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchLipid_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipid":
			out.Values[i] = ec._RecipeBatchLipid_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchLipid_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchLipid_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RecipeBatchLipid_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchLipid_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidConnectionImplementors = []string{"RecipeBatchLipidConnection"}

func (ec *executionContext) _RecipeBatchLipidConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipidConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidConnection")
		case "edges":
			out.Values[i] = ec._RecipeBatchLipidConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeBatchLipidConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidDeletePayloadImplementors = []string{"RecipeBatchLipidDeletePayload"}

func (ec *executionContext) _RecipeBatchLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipidDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchLipidDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidEdgeImplementors = []string{"RecipeBatchLipidEdge"}

func (ec *executionContext) _RecipeBatchLipidEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipidEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidEdge")
		case "cursor":
			out.Values[i] = ec._RecipeBatchLipidEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeBatchLipidEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidPayloadImplementors = []string{"RecipeBatchLipidPayload"}

func (ec *executionContext) _RecipeBatchLipidPayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipidPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidPayload")
		case "recipeBatchLipid":
			out.Values[i] = ec._RecipeBatchLipidPayload_recipeBatchLipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidsDeletePayloadImplementors = []string{"RecipeBatchLipidsDeletePayload"}

func (ec *executionContext) _RecipeBatchLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipidsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidsDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeBatchLipidsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidsUpdatePayloadImplementors = []string{"RecipeBatchLipidsUpdatePayload"}

func (ec *executionContext) _RecipeBatchLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLipidsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidsUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeBatchLipidsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyeImplementors = []string{"RecipeBatchLye", "Node"}

func (ec *executionContext) _RecipeBatchLye(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLye) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLye")
		case "id":
			out.Values[i] = ec._RecipeBatchLye_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchLye_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discount":
			out.Values[i] = ec._RecipeBatchLye_discount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchLye_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lye":
			out.Values[i] = ec._RecipeBatchLye_lye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchLye_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchLye_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchLye_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchLye_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyeConnectionImplementors = []string{"RecipeBatchLyeConnection"}

func (ec *executionContext) _RecipeBatchLyeConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLyeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyeConnection")
		case "edges":
			out.Values[i] = ec._RecipeBatchLyeConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeBatchLyeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyeDeletePayloadImplementors = []string{"RecipeBatchLyeDeletePayload"}

func (ec *executionContext) _RecipeBatchLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLyeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyeDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchLyeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyeEdgeImplementors = []string{"RecipeBatchLyeEdge"}

func (ec *executionContext) _RecipeBatchLyeEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLyeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyeEdge")
		case "cursor":
			out.Values[i] = ec._RecipeBatchLyeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeBatchLyeEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyePayloadImplementors = []string{"RecipeBatchLyePayload"}

func (ec *executionContext) _RecipeBatchLyePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLyePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyePayload")
		case "recipeBatchLye":
			out.Values[i] = ec._RecipeBatchLyePayload_recipeBatchLye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyesDeletePayloadImplementors = []string{"RecipeBatchLyesDeletePayload"}

func (ec *executionContext) _RecipeBatchLyesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLyesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeBatchLyesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyesUpdatePayloadImplementors = []string{"RecipeBatchLyesUpdatePayload"}

func (ec *executionContext) _RecipeBatchLyesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchLyesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeBatchLyesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNoteImplementors = []string{"RecipeBatchNote", "Node"}

func (ec *executionContext) _RecipeBatchNote(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNoteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNote")
		case "id":
			out.Values[i] = ec._RecipeBatchNote_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._RecipeBatchNote_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":
			out.Values[i] = ec._RecipeBatchNote_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchNote_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchNote_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchNote_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchNote_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNoteConnectionImplementors = []string{"RecipeBatchNoteConnection"}

func (ec *executionContext) _RecipeBatchNoteConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNoteConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNoteConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNoteConnection")
		case "edges":
			out.Values[i] = ec._RecipeBatchNoteConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeBatchNoteConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNoteDeletePayloadImplementors = []string{"RecipeBatchNoteDeletePayload"}

func (ec *executionContext) _RecipeBatchNoteDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNoteDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNoteDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNoteDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchNoteDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNoteEdgeImplementors = []string{"RecipeBatchNoteEdge"}

func (ec *executionContext) _RecipeBatchNoteEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNoteEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNoteEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNoteEdge")
		case "cursor":
			out.Values[i] = ec._RecipeBatchNoteEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeBatchNoteEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNotePayloadImplementors = []string{"RecipeBatchNotePayload"}

func (ec *executionContext) _RecipeBatchNotePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNotePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNotePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNotePayload")
		case "recipeBatchNote":
			out.Values[i] = ec._RecipeBatchNotePayload_recipeBatchNote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNotesDeletePayloadImplementors = []string{"RecipeBatchNotesDeletePayload"}

func (ec *executionContext) _RecipeBatchNotesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNotesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNotesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNotesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeBatchNotesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNotesUpdatePayloadImplementors = []string{"RecipeBatchNotesUpdatePayload"}

func (ec *executionContext) _RecipeBatchNotesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchNotesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNotesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNotesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeBatchNotesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchPayloadImplementors = []string{"RecipeBatchPayload"}

func (ec *executionContext) _RecipeBatchPayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchPayload")
		case "recipeBatch":
			out.Values[i] = ec._RecipeBatchPayload_recipeBatch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchesDeletePayloadImplementors = []string{"RecipeBatchesDeletePayload"}

func (ec *executionContext) _RecipeBatchesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeBatchesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchesUpdatePayloadImplementors = []string{"RecipeBatchesUpdatePayload"}

func (ec *executionContext) _RecipeBatchesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeBatchesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeBatchesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeConnectionImplementors = []string{"RecipeConnection"}

func (ec *executionContext) _RecipeConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeConnection")
		case "edges":
			out.Values[i] = ec._RecipeConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeDeletePayloadImplementors = []string{"RecipeDeletePayload"}

func (ec *executionContext) _RecipeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeEdgeImplementors = []string{"RecipeEdge"}

func (ec *executionContext) _RecipeEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeEdge")
		case "cursor":
			out.Values[i] = ec._RecipeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragranceImplementors = []string{"RecipeFragrance", "Node"}

func (ec *executionContext) _RecipeFragrance(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragrance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragrance")
		case "id":
			out.Values[i] = ec._RecipeFragrance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":
			out.Values[i] = ec._RecipeFragrance_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fragrance":
			out.Values[i] = ec._RecipeFragrance_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeFragrance_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeFragrance_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeFragrance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeFragrance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragranceConnectionImplementors = []string{"RecipeFragranceConnection"}

func (ec *executionContext) _RecipeFragranceConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragranceConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragranceConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragranceConnection")
		case "edges":
			out.Values[i] = ec._RecipeFragranceConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeFragranceConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragranceDeletePayloadImplementors = []string{"RecipeFragranceDeletePayload"}

func (ec *executionContext) _RecipeFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragranceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragranceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragranceDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeFragranceDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragranceEdgeImplementors = []string{"RecipeFragranceEdge"}

func (ec *executionContext) _RecipeFragranceEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragranceEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragranceEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragranceEdge")
		case "cursor":
			out.Values[i] = ec._RecipeFragranceEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeFragranceEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragrancePayloadImplementors = []string{"RecipeFragrancePayload"}

func (ec *executionContext) _RecipeFragrancePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragrancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragrancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragrancePayload")
		case "recipeFragrance":
			out.Values[i] = ec._RecipeFragrancePayload_recipeFragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragrancesDeletePayloadImplementors = []string{"RecipeFragrancesDeletePayload"}

func (ec *executionContext) _RecipeFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragrancesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragrancesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragrancesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeFragrancesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragrancesUpdatePayloadImplementors = []string{"RecipeFragrancesUpdatePayload"}

func (ec *executionContext) _RecipeFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeFragrancesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragrancesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragrancesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeFragrancesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidImplementors = []string{"RecipeLipid", "Node"}

func (ec *executionContext) _RecipeLipid(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipid")
		case "id":
			out.Values[i] = ec._RecipeLipid_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":
			out.Values[i] = ec._RecipeLipid_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipid":
			out.Values[i] = ec._RecipeLipid_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeLipid_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeLipid_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeLipid_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeLipid_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidConnectionImplementors = []string{"RecipeLipidConnection"}

func (ec *executionContext) _RecipeLipidConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipidConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidConnection")
		case "edges":
			out.Values[i] = ec._RecipeLipidConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeLipidConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidDeletePayloadImplementors = []string{"RecipeLipidDeletePayload"}

func (ec *executionContext) _RecipeLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipidDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeLipidDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidEdgeImplementors = []string{"RecipeLipidEdge"}

func (ec *executionContext) _RecipeLipidEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipidEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidEdge")
		case "cursor":
			out.Values[i] = ec._RecipeLipidEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeLipidEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidPayloadImplementors = []string{"RecipeLipidPayload"}

func (ec *executionContext) _RecipeLipidPayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipidPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidPayload")
		case "recipeLipid":
			out.Values[i] = ec._RecipeLipidPayload_recipeLipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidsDeletePayloadImplementors = []string{"RecipeLipidsDeletePayload"}

func (ec *executionContext) _RecipeLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipidsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidsDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeLipidsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidsUpdatePayloadImplementors = []string{"RecipeLipidsUpdatePayload"}

func (ec *executionContext) _RecipeLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeLipidsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidsUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeLipidsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipePayloadImplementors = []string{"RecipePayload"}

func (ec *executionContext) _RecipePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipePayload")
		case "recipe":
			out.Values[i] = ec._RecipePayload_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepImplementors = []string{"RecipeStep", "Node"}

func (ec *executionContext) _RecipeStep(ctx context.Context, sel ast.SelectionSet, obj *RecipeStep) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStep")
		case "id":
			out.Values[i] = ec._RecipeStep_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "num":
			out.Values[i] = ec._RecipeStep_num(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._RecipeStep_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeStep_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeStep_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeStep_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeStep_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepConnectionImplementors = []string{"RecipeStepConnection"}

func (ec *executionContext) _RecipeStepConnection(ctx context.Context, sel ast.SelectionSet, obj *RecipeStepConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepConnection")
		case "edges":
			out.Values[i] = ec._RecipeStepConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RecipeStepConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepDeletePayloadImplementors = []string{"RecipeStepDeletePayload"}

func (ec *executionContext) _RecipeStepDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeStepDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeStepDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepEdgeImplementors = []string{"RecipeStepEdge"}

func (ec *executionContext) _RecipeStepEdge(ctx context.Context, sel ast.SelectionSet, obj *RecipeStepEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepEdge")
		case "cursor":
			out.Values[i] = ec._RecipeStepEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._RecipeStepEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepPayloadImplementors = []string{"RecipeStepPayload"}

func (ec *executionContext) _RecipeStepPayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeStepPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepPayload")
		case "recipeStep":
			out.Values[i] = ec._RecipeStepPayload_recipeStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepsDeletePayloadImplementors = []string{"RecipeStepsDeletePayload"}

func (ec *executionContext) _RecipeStepsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeStepsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepsDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipeStepsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepsUpdatePayloadImplementors = []string{"RecipeStepsUpdatePayload"}

func (ec *executionContext) _RecipeStepsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipeStepsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepsUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipeStepsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipesDeletePayloadImplementors = []string{"RecipesDeletePayload"}

func (ec *executionContext) _RecipesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipesDeletePayload")
		case "ids":
			out.Values[i] = ec._RecipesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipesUpdatePayloadImplementors = []string{"RecipesUpdatePayload"}

func (ec *executionContext) _RecipesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *RecipesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipesUpdatePayload")
		case "ok":
			out.Values[i] = ec._RecipesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierImplementors = []string{"Supplier", "Node"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Supplier_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "website":
			out.Values[i] = ec._Supplier_website(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Supplier_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Supplier_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Supplier_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Supplier_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additiveInventories":
			out.Values[i] = ec._Supplier_additiveInventories(ctx, field, obj)
		case "fragranceInventories":
			out.Values[i] = ec._Supplier_fragranceInventories(ctx, field, obj)
		case "lipidInventories":
			out.Values[i] = ec._Supplier_lipidInventories(ctx, field, obj)
		case "lyeInventories":
			out.Values[i] = ec._Supplier_lyeInventories(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierConnectionImplementors = []string{"SupplierConnection"}

func (ec *executionContext) _SupplierConnection(ctx context.Context, sel ast.SelectionSet, obj *SupplierConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierConnection")
		case "edges":
			out.Values[i] = ec._SupplierConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._SupplierConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierDeletePayloadImplementors = []string{"SupplierDeletePayload"}

func (ec *executionContext) _SupplierDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *SupplierDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierDeletePayload")
		case "id":
			out.Values[i] = ec._SupplierDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierEdgeImplementors = []string{"SupplierEdge"}

func (ec *executionContext) _SupplierEdge(ctx context.Context, sel ast.SelectionSet, obj *SupplierEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierEdge")
		case "cursor":
			out.Values[i] = ec._SupplierEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._SupplierEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierPayloadImplementors = []string{"SupplierPayload"}

func (ec *executionContext) _SupplierPayload(ctx context.Context, sel ast.SelectionSet, obj *SupplierPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierPayload")
		case "supplier":
			out.Values[i] = ec._SupplierPayload_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var suppliersDeletePayloadImplementors = []string{"SuppliersDeletePayload"}

func (ec *executionContext) _SuppliersDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *SuppliersDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suppliersDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuppliersDeletePayload")
		case "ids":
			out.Values[i] = ec._SuppliersDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var suppliersUpdatePayloadImplementors = []string{"SuppliersUpdatePayload"}

func (ec *executionContext) _SuppliersUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *SuppliersUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suppliersUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuppliersUpdatePayload")
		case "ok":
			out.Values[i] = ec._SuppliersUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAdditive2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx context.Context, sel ast.SelectionSet, v Additive) graphql.Marshaler {
	return ec._Additive(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx context.Context, sel ast.SelectionSet, v *Additive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Additive(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveConnection(ctx context.Context, sel ast.SelectionSet, v AdditiveConnection) graphql.Marshaler {
	return ec._AdditiveConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveConnection(ctx context.Context, sel ast.SelectionSet, v *AdditiveConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveCreateInput(ctx context.Context, v interface{}) (AdditiveCreateInput, error) {
	return ec.unmarshalInputAdditiveCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAdditiveDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v AdditiveDeletePayload) graphql.Marshaler {
	return ec._AdditiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AdditiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveInventoriesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v AdditiveInventoriesDeletePayload) graphql.Marshaler {
	return ec._AdditiveInventoriesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventoriesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoriesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveInventoriesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AdditiveInventoriesUpdatePayload) graphql.Marshaler {
	return ec._AdditiveInventoriesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventoriesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoriesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v AdditiveInventory) graphql.Marshaler {
	return ec._AdditiveInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventory(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveInventoryConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryConnection(ctx context.Context, sel ast.SelectionSet, v AdditiveInventoryConnection) graphql.Marshaler {
	return ec._AdditiveInventoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryConnection(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryCreateInput(ctx context.Context, v interface{}) (AdditiveInventoryCreateInput, error) {
	return ec.unmarshalInputAdditiveInventoryCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAdditiveInventoryDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v AdditiveInventoryDeletePayload) graphql.Marshaler {
	return ec._AdditiveInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryOrdering(ctx context.Context, v interface{}) (AdditiveInventoryOrdering, error) {
	return ec.unmarshalInputAdditiveInventoryOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAdditiveInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryOrdering(ctx context.Context, v interface{}) (*AdditiveInventoryOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAdditiveInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAdditiveInventoryPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryPayload(ctx context.Context, sel ast.SelectionSet, v AdditiveInventoryPayload) graphql.Marshaler {
	return ec._AdditiveInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventorySort(ctx context.Context, v interface{}) (AdditiveInventorySort, error) {
	var res AdditiveInventorySort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAdditiveInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventorySort(ctx context.Context, sel ast.SelectionSet, v AdditiveInventorySort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAdditiveInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryUpdateInput(ctx context.Context, v interface{}) (AdditiveInventoryUpdateInput, error) {
	return ec.unmarshalInputAdditiveInventoryUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNAdditiveOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveOrdering(ctx context.Context, v interface{}) (AdditiveOrdering, error) {
	return ec.unmarshalInputAdditiveOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAdditiveOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveOrdering(ctx context.Context, v interface{}) (*AdditiveOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAdditiveOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAdditivePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivePayload(ctx context.Context, sel ast.SelectionSet, v AdditivePayload) graphql.Marshaler {
	return ec._AdditivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivePayload(ctx context.Context, sel ast.SelectionSet, v *AdditivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveSort(ctx context.Context, v interface{}) (AdditiveSort, error) {
	var res AdditiveSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveSort(ctx context.Context, sel ast.SelectionSet, v AdditiveSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveUpdateInput(ctx context.Context, v interface{}) (AdditiveUpdateInput, error) {
	return ec.unmarshalInputAdditiveUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAdditivesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, v AdditivesDeletePayload) graphql.Marshaler {
	return ec._AdditivesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditivesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AdditivesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditivesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditivesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AdditivesUpdatePayload) graphql.Marshaler {
	return ec._AdditivesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditivesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AdditivesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditivesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthGroup2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx context.Context, sel ast.SelectionSet, v AuthGroup) graphql.Marshaler {
	return ec._AuthGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx context.Context, sel ast.SelectionSet, v *AuthGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthGroupConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupConnection(ctx context.Context, sel ast.SelectionSet, v AuthGroupConnection) graphql.Marshaler {
	return ec._AuthGroupConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupConnection(ctx context.Context, sel ast.SelectionSet, v *AuthGroupConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthGroupCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupCreateInput(ctx context.Context, v interface{}) (AuthGroupCreateInput, error) {
	return ec.unmarshalInputAuthGroupCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthGroupDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupDeletePayload) graphql.Marshaler {
	return ec._AuthGroupDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthGroupOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupOrdering(ctx context.Context, v interface{}) (AuthGroupOrdering, error) {
	return ec.unmarshalInputAuthGroupOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAuthGroupOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupOrdering(ctx context.Context, v interface{}) (*AuthGroupOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAuthGroupOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAuthGroupPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupPayload) graphql.Marshaler {
	return ec._AuthGroupPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthGroupPermission2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermission) graphql.Marshaler {
	return ec._AuthGroupPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPermission(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthGroupPermissionConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionConnection(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionConnection) graphql.Marshaler {
	return ec._AuthGroupPermissionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPermissionConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionConnection(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermissionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPermissionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthGroupPermissionCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionCreateInput(ctx context.Context, v interface{}) (AuthGroupPermissionCreateInput, error) {
	return ec.unmarshalInputAuthGroupPermissionCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthGroupPermissionDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionDeletePayload) graphql.Marshaler {
	return ec._AuthGroupPermissionDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPermissionDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermissionDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPermissionDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthGroupPermissionOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionOrdering(ctx context.Context, v interface{}) (AuthGroupPermissionOrdering, error) {
	return ec.unmarshalInputAuthGroupPermissionOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAuthGroupPermissionOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionOrdering(ctx context.Context, v interface{}) (*AuthGroupPermissionOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAuthGroupPermissionOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAuthGroupPermissionPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionPayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionPayload) graphql.Marshaler {
	return ec._AuthGroupPermissionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionPayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermissionPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPermissionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthGroupPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionSort(ctx context.Context, v interface{}) (AuthGroupPermissionSort, error) {
	var res AuthGroupPermissionSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthGroupPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionSort(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthGroupPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionUpdateInput(ctx context.Context, v interface{}) (AuthGroupPermissionUpdateInput, error) {
	return ec.unmarshalInputAuthGroupPermissionUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthGroupPermissionsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionsDeletePayload) graphql.Marshaler {
	return ec._AuthGroupPermissionsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPermissionsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermissionsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPermissionsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthGroupPermissionsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionsUpdatePayload) graphql.Marshaler {
	return ec._AuthGroupPermissionsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupPermissionsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermissionsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupPermissionsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthGroupSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupSort(ctx context.Context, v interface{}) (AuthGroupSort, error) {
	var res AuthGroupSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthGroupSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupSort(ctx context.Context, sel ast.SelectionSet, v AuthGroupSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthGroupUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupUpdateInput(ctx context.Context, v interface{}) (AuthGroupUpdateInput, error) {
	return ec.unmarshalInputAuthGroupUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthGroupsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupsDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupsDeletePayload) graphql.Marshaler {
	return ec._AuthGroupsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthGroupsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AuthGroupsUpdatePayload) graphql.Marshaler {
	return ec._AuthGroupsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthGroupsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AuthGroupsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthGroupsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthPermission2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx context.Context, sel ast.SelectionSet, v AuthPermission) graphql.Marshaler {
	return ec._AuthPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx context.Context, sel ast.SelectionSet, v *AuthPermission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthPermission(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthPermissionConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionConnection(ctx context.Context, sel ast.SelectionSet, v AuthPermissionConnection) graphql.Marshaler {
	return ec._AuthPermissionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPermissionConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionConnection(ctx context.Context, sel ast.SelectionSet, v *AuthPermissionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthPermissionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthPermissionCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionCreateInput(ctx context.Context, v interface{}) (AuthPermissionCreateInput, error) {
	return ec.unmarshalInputAuthPermissionCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthPermissionDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthPermissionDeletePayload) graphql.Marshaler {
	return ec._AuthPermissionDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPermissionDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthPermissionDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthPermissionDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthPermissionOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionOrdering(ctx context.Context, v interface{}) (AuthPermissionOrdering, error) {
	return ec.unmarshalInputAuthPermissionOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAuthPermissionOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionOrdering(ctx context.Context, v interface{}) (*AuthPermissionOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAuthPermissionOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAuthPermissionPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionPayload(ctx context.Context, sel ast.SelectionSet, v AuthPermissionPayload) graphql.Marshaler {
	return ec._AuthPermissionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionPayload(ctx context.Context, sel ast.SelectionSet, v *AuthPermissionPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthPermissionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionSort(ctx context.Context, v interface{}) (AuthPermissionSort, error) {
	var res AuthPermissionSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionSort(ctx context.Context, sel ast.SelectionSet, v AuthPermissionSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionUpdateInput(ctx context.Context, v interface{}) (AuthPermissionUpdateInput, error) {
	return ec.unmarshalInputAuthPermissionUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthPermissionsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthPermissionsDeletePayload) graphql.Marshaler {
	return ec._AuthPermissionsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPermissionsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthPermissionsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthPermissionsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthPermissionsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AuthPermissionsUpdatePayload) graphql.Marshaler {
	return ec._AuthPermissionsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthPermissionsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AuthPermissionsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthPermissionsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUser2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx context.Context, sel ast.SelectionSet, v AuthUser) graphql.Marshaler {
	return ec._AuthUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx context.Context, sel ast.SelectionSet, v *AuthUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUser(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUserConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserConnection(ctx context.Context, sel ast.SelectionSet, v AuthUserConnection) graphql.Marshaler {
	return ec._AuthUserConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserConnection(ctx context.Context, sel ast.SelectionSet, v *AuthUserConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserCreateInput(ctx context.Context, v interface{}) (AuthUserCreateInput, error) {
	return ec.unmarshalInputAuthUserCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthUserDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserDeletePayload) graphql.Marshaler {
	return ec._AuthUserDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUserGroup2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx context.Context, sel ast.SelectionSet, v AuthUserGroup) graphql.Marshaler {
	return ec._AuthUserGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserGroup(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUserGroupConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupConnection(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupConnection) graphql.Marshaler {
	return ec._AuthUserGroupConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserGroupConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupConnection(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroupConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserGroupConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserGroupCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupCreateInput(ctx context.Context, v interface{}) (AuthUserGroupCreateInput, error) {
	return ec.unmarshalInputAuthUserGroupCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthUserGroupDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupDeletePayload) graphql.Marshaler {
	return ec._AuthUserGroupDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserGroupDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroupDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserGroupDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserGroupOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupOrdering(ctx context.Context, v interface{}) (AuthUserGroupOrdering, error) {
	return ec.unmarshalInputAuthUserGroupOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAuthUserGroupOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupOrdering(ctx context.Context, v interface{}) (*AuthUserGroupOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAuthUserGroupOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAuthUserGroupPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupPayload(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupPayload) graphql.Marshaler {
	return ec._AuthUserGroupPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserGroupPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupPayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroupPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserGroupPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserGroupSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupSort(ctx context.Context, v interface{}) (AuthUserGroupSort, error) {
	var res AuthUserGroupSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthUserGroupSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupSort(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthUserGroupUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupUpdateInput(ctx context.Context, v interface{}) (AuthUserGroupUpdateInput, error) {
	return ec.unmarshalInputAuthUserGroupUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthUserGroupsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupsDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupsDeletePayload) graphql.Marshaler {
	return ec._AuthUserGroupsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserGroupsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroupsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserGroupsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUserGroupsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupsUpdatePayload) graphql.Marshaler {
	return ec._AuthUserGroupsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserGroupsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroupsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserGroupsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserOrdering(ctx context.Context, v interface{}) (AuthUserOrdering, error) {
	return ec.unmarshalInputAuthUserOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAuthUserOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserOrdering(ctx context.Context, v interface{}) (*AuthUserOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAuthUserOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAuthUserPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserPayload(ctx context.Context, sel ast.SelectionSet, v AuthUserPayload) graphql.Marshaler {
	return ec._AuthUserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserPayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserSort(ctx context.Context, v interface{}) (AuthUserSort, error) {
	var res AuthUserSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthUserSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserSort(ctx context.Context, sel ast.SelectionSet, v AuthUserSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthUserUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUpdateInput(ctx context.Context, v interface{}) (AuthUserUpdateInput, error) {
	return ec.unmarshalInputAuthUserUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthUserUserPermission2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermission) graphql.Marshaler {
	return ec._AuthUserUserPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserUserPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermission) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserUserPermission(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionConnection(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionConnection) graphql.Marshaler {
	return ec._AuthUserUserPermissionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionConnection(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermissionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserUserPermissionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserUserPermissionCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionCreateInput(ctx context.Context, v interface{}) (AuthUserUserPermissionCreateInput, error) {
	return ec.unmarshalInputAuthUserUserPermissionCreateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionDeletePayload) graphql.Marshaler {
	return ec._AuthUserUserPermissionDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermissionDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserUserPermissionDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserUserPermissionOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionOrdering(ctx context.Context, v interface{}) (AuthUserUserPermissionOrdering, error) {
	return ec.unmarshalInputAuthUserUserPermissionOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNAuthUserUserPermissionOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionOrdering(ctx context.Context, v interface{}) (*AuthUserUserPermissionOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNAuthUserUserPermissionOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNAuthUserUserPermissionPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionPayload(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionPayload) graphql.Marshaler {
	return ec._AuthUserUserPermissionPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionPayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermissionPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserUserPermissionPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthUserUserPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionSort(ctx context.Context, v interface{}) (AuthUserUserPermissionSort, error) {
	var res AuthUserUserPermissionSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionSort(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNAuthUserUserPermissionUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionUpdateInput(ctx context.Context, v interface{}) (AuthUserUserPermissionUpdateInput, error) {
	return ec.unmarshalInputAuthUserUserPermissionUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionsDeletePayload) graphql.Marshaler {
	return ec._AuthUserUserPermissionsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermissionsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserUserPermissionsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionsUpdatePayload) graphql.Marshaler {
	return ec._AuthUserUserPermissionsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUserUserPermissionsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermissionsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUserUserPermissionsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUsersDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, v AuthUsersDeletePayload) graphql.Marshaler {
	return ec._AuthUsersDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUsersDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUsersDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUsersDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthUsersUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v AuthUsersUpdatePayload) graphql.Marshaler {
	return ec._AuthUsersUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthUsersUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *AuthUsersUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AuthUsersUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionPagination(ctx context.Context, v interface{}) (boilergql.ConnectionPagination, error) {
	return ec.unmarshalInputConnectionPagination(ctx, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFragrance2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx context.Context, sel ast.SelectionSet, v Fragrance) graphql.Marshaler {
	return ec._Fragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx context.Context, sel ast.SelectionSet, v *Fragrance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Fragrance(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceConnection(ctx context.Context, sel ast.SelectionSet, v FragranceConnection) graphql.Marshaler {
	return ec._FragranceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceConnection(ctx context.Context, sel ast.SelectionSet, v *FragranceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceCreateInput(ctx context.Context, v interface{}) (FragranceCreateInput, error) {
	return ec.unmarshalInputFragranceCreateInput(ctx, v)
}

func (ec *executionContext) marshalNFragranceDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v FragranceDeletePayload) graphql.Marshaler {
	return ec._FragranceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *FragranceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceInventoriesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v FragranceInventoriesDeletePayload) graphql.Marshaler {
	return ec._FragranceInventoriesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *FragranceInventoriesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoriesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceInventoriesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v FragranceInventoriesUpdatePayload) graphql.Marshaler {
	return ec._FragranceInventoriesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *FragranceInventoriesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoriesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v FragranceInventory) graphql.Marshaler {
	return ec._FragranceInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v *FragranceInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventory(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceInventoryConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryConnection(ctx context.Context, sel ast.SelectionSet, v FragranceInventoryConnection) graphql.Marshaler {
	return ec._FragranceInventoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryConnection(ctx context.Context, sel ast.SelectionSet, v *FragranceInventoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryCreateInput(ctx context.Context, v interface{}) (FragranceInventoryCreateInput, error) {
	return ec.unmarshalInputFragranceInventoryCreateInput(ctx, v)
}

func (ec *executionContext) marshalNFragranceInventoryDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v FragranceInventoryDeletePayload) graphql.Marshaler {
	return ec._FragranceInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *FragranceInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryOrdering(ctx context.Context, v interface{}) (FragranceInventoryOrdering, error) {
	return ec.unmarshalInputFragranceInventoryOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNFragranceInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryOrdering(ctx context.Context, v interface{}) (*FragranceInventoryOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFragranceInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNFragranceInventoryPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryPayload(ctx context.Context, sel ast.SelectionSet, v FragranceInventoryPayload) graphql.Marshaler {
	return ec._FragranceInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *FragranceInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventorySort(ctx context.Context, v interface{}) (FragranceInventorySort, error) {
	var res FragranceInventorySort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNFragranceInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventorySort(ctx context.Context, sel ast.SelectionSet, v FragranceInventorySort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFragranceInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryUpdateInput(ctx context.Context, v interface{}) (FragranceInventoryUpdateInput, error) {
	return ec.unmarshalInputFragranceInventoryUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNFragranceOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceOrdering(ctx context.Context, v interface{}) (FragranceOrdering, error) {
	return ec.unmarshalInputFragranceOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNFragranceOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceOrdering(ctx context.Context, v interface{}) (*FragranceOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFragranceOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNFragrancePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancePayload(ctx context.Context, sel ast.SelectionSet, v FragrancePayload) graphql.Marshaler {
	return ec._FragrancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancePayload(ctx context.Context, sel ast.SelectionSet, v *FragrancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragrancePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceSort(ctx context.Context, v interface{}) (FragranceSort, error) {
	var res FragranceSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceSort(ctx context.Context, sel ast.SelectionSet, v FragranceSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceUpdateInput(ctx context.Context, v interface{}) (FragranceUpdateInput, error) {
	return ec.unmarshalInputFragranceUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNFragrancesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, v FragrancesDeletePayload) graphql.Marshaler {
	return ec._FragrancesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragrancesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *FragrancesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragrancesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFragrancesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v FragrancesUpdatePayload) graphql.Marshaler {
	return ec._FragrancesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragrancesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *FragrancesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragrancesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLipid2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx context.Context, sel ast.SelectionSet, v Lipid) graphql.Marshaler {
	return ec._Lipid(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx context.Context, sel ast.SelectionSet, v *Lipid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lipid(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidConnection(ctx context.Context, sel ast.SelectionSet, v LipidConnection) graphql.Marshaler {
	return ec._LipidConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidConnection(ctx context.Context, sel ast.SelectionSet, v *LipidConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidCreateInput(ctx context.Context, v interface{}) (LipidCreateInput, error) {
	return ec.unmarshalInputLipidCreateInput(ctx, v)
}

func (ec *executionContext) marshalNLipidDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v LipidDeletePayload) graphql.Marshaler {
	return ec._LipidDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LipidDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidInventoriesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v LipidInventoriesDeletePayload) graphql.Marshaler {
	return ec._LipidInventoriesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LipidInventoriesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoriesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidInventoriesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v LipidInventoriesUpdatePayload) graphql.Marshaler {
	return ec._LipidInventoriesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *LipidInventoriesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoriesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v LipidInventory) graphql.Marshaler {
	return ec._LipidInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v *LipidInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventory(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidInventoryConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryConnection(ctx context.Context, sel ast.SelectionSet, v LipidInventoryConnection) graphql.Marshaler {
	return ec._LipidInventoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryConnection(ctx context.Context, sel ast.SelectionSet, v *LipidInventoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryCreateInput(ctx context.Context, v interface{}) (LipidInventoryCreateInput, error) {
	return ec.unmarshalInputLipidInventoryCreateInput(ctx, v)
}

func (ec *executionContext) marshalNLipidInventoryDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v LipidInventoryDeletePayload) graphql.Marshaler {
	return ec._LipidInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LipidInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryOrdering(ctx context.Context, v interface{}) (LipidInventoryOrdering, error) {
	return ec.unmarshalInputLipidInventoryOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNLipidInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryOrdering(ctx context.Context, v interface{}) (*LipidInventoryOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLipidInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLipidInventoryPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryPayload(ctx context.Context, sel ast.SelectionSet, v LipidInventoryPayload) graphql.Marshaler {
	return ec._LipidInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *LipidInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventorySort(ctx context.Context, v interface{}) (LipidInventorySort, error) {
	var res LipidInventorySort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNLipidInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventorySort(ctx context.Context, sel ast.SelectionSet, v LipidInventorySort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLipidInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryUpdateInput(ctx context.Context, v interface{}) (LipidInventoryUpdateInput, error) {
	return ec.unmarshalInputLipidInventoryUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNLipidOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidOrdering(ctx context.Context, v interface{}) (LipidOrdering, error) {
	return ec.unmarshalInputLipidOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNLipidOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidOrdering(ctx context.Context, v interface{}) (*LipidOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLipidOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLipidPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidPayload(ctx context.Context, sel ast.SelectionSet, v LipidPayload) graphql.Marshaler {
	return ec._LipidPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidPayload(ctx context.Context, sel ast.SelectionSet, v *LipidPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidSort(ctx context.Context, v interface{}) (LipidSort, error) {
	var res LipidSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidSort(ctx context.Context, sel ast.SelectionSet, v LipidSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidUpdateInput(ctx context.Context, v interface{}) (LipidUpdateInput, error) {
	return ec.unmarshalInputLipidUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNLipidsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, v LipidsDeletePayload) graphql.Marshaler {
	return ec._LipidsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LipidsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v LipidsUpdatePayload) graphql.Marshaler {
	return ec._LipidsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *LipidsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLye2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx context.Context, sel ast.SelectionSet, v Lye) graphql.Marshaler {
	return ec._Lye(ctx, sel, &v)
}

func (ec *executionContext) marshalNLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx context.Context, sel ast.SelectionSet, v *Lye) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lye(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeConnection(ctx context.Context, sel ast.SelectionSet, v LyeConnection) graphql.Marshaler {
	return ec._LyeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeConnection(ctx context.Context, sel ast.SelectionSet, v *LyeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeCreateInput(ctx context.Context, v interface{}) (LyeCreateInput, error) {
	return ec.unmarshalInputLyeCreateInput(ctx, v)
}

func (ec *executionContext) marshalNLyeDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v LyeDeletePayload) graphql.Marshaler {
	return ec._LyeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LyeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeInventoriesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v LyeInventoriesDeletePayload) graphql.Marshaler {
	return ec._LyeInventoriesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoriesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoriesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LyeInventoriesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoriesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeInventoriesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v LyeInventoriesUpdatePayload) graphql.Marshaler {
	return ec._LyeInventoriesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoriesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoriesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *LyeInventoriesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoriesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v LyeInventory) graphql.Marshaler {
	return ec._LyeInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v *LyeInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventory(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeInventoryConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryConnection(ctx context.Context, sel ast.SelectionSet, v LyeInventoryConnection) graphql.Marshaler {
	return ec._LyeInventoryConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoryConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryConnection(ctx context.Context, sel ast.SelectionSet, v *LyeInventoryConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoryConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeInventoryCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryCreateInput(ctx context.Context, v interface{}) (LyeInventoryCreateInput, error) {
	return ec.unmarshalInputLyeInventoryCreateInput(ctx, v)
}

func (ec *executionContext) marshalNLyeInventoryDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v LyeInventoryDeletePayload) graphql.Marshaler {
	return ec._LyeInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoryDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LyeInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryOrdering(ctx context.Context, v interface{}) (LyeInventoryOrdering, error) {
	return ec.unmarshalInputLyeInventoryOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNLyeInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryOrdering(ctx context.Context, v interface{}) (*LyeInventoryOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLyeInventoryOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLyeInventoryPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryPayload(ctx context.Context, sel ast.SelectionSet, v LyeInventoryPayload) graphql.Marshaler {
	return ec._LyeInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoryPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *LyeInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventorySort(ctx context.Context, v interface{}) (LyeInventorySort, error) {
	var res LyeInventorySort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNLyeInventorySort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventorySort(ctx context.Context, sel ast.SelectionSet, v LyeInventorySort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLyeInventoryUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryUpdateInput(ctx context.Context, v interface{}) (LyeInventoryUpdateInput, error) {
	return ec.unmarshalInputLyeInventoryUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNLyeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeOrdering(ctx context.Context, v interface{}) (LyeOrdering, error) {
	return ec.unmarshalInputLyeOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNLyeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeOrdering(ctx context.Context, v interface{}) (*LyeOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLyeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLyePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyePayload(ctx context.Context, sel ast.SelectionSet, v LyePayload) graphql.Marshaler {
	return ec._LyePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyePayload(ctx context.Context, sel ast.SelectionSet, v *LyePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeSort(ctx context.Context, v interface{}) (LyeSort, error) {
	var res LyeSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNLyeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeSort(ctx context.Context, sel ast.SelectionSet, v LyeSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLyeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeUpdateInput(ctx context.Context, v interface{}) (LyeUpdateInput, error) {
	return ec.unmarshalInputLyeUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNLyesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyesDeletePayload(ctx context.Context, sel ast.SelectionSet, v LyesDeletePayload) graphql.Marshaler {
	return ec._LyesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LyesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLyesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v LyesUpdatePayload) graphql.Marshaler {
	return ec._LyesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *LyesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipe2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx context.Context, sel ast.SelectionSet, v Recipe) graphql.Marshaler {
	return ec._Recipe(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx context.Context, sel ast.SelectionSet, v *Recipe) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Recipe(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeAdditive2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v RecipeAdditive) graphql.Marshaler {
	return ec._RecipeAdditive(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditive(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeAdditiveConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveConnection(ctx context.Context, sel ast.SelectionSet, v RecipeAdditiveConnection) graphql.Marshaler {
	return ec._RecipeAdditiveConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditiveConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditiveConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditiveConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeAdditiveCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveCreateInput(ctx context.Context, v interface{}) (RecipeAdditiveCreateInput, error) {
	return ec.unmarshalInputRecipeAdditiveCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeAdditiveDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeAdditiveDeletePayload) graphql.Marshaler {
	return ec._RecipeAdditiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditiveDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeAdditiveOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveOrdering(ctx context.Context, v interface{}) (RecipeAdditiveOrdering, error) {
	return ec.unmarshalInputRecipeAdditiveOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeAdditiveOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveOrdering(ctx context.Context, v interface{}) (*RecipeAdditiveOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeAdditiveOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeAdditivePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivePayload(ctx context.Context, sel ast.SelectionSet, v RecipeAdditivePayload) graphql.Marshaler {
	return ec._RecipeAdditivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveSort(ctx context.Context, v interface{}) (RecipeAdditiveSort, error) {
	var res RecipeAdditiveSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveSort(ctx context.Context, sel ast.SelectionSet, v RecipeAdditiveSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveUpdateInput(ctx context.Context, v interface{}) (RecipeAdditiveUpdateInput, error) {
	return ec.unmarshalInputRecipeAdditiveUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeAdditivesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeAdditivesDeletePayload) graphql.Marshaler {
	return ec._RecipeAdditivesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditivesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditivesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditivesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeAdditivesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeAdditivesUpdatePayload) graphql.Marshaler {
	return ec._RecipeAdditivesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditivesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditivesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditivesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatch2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v RecipeBatch) graphql.Marshaler {
	return ec._RecipeBatch(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v *RecipeBatch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatch(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditive2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditive) graphql.Marshaler {
	return ec._RecipeBatchAdditive(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditive(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveConnection(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditiveConnection) graphql.Marshaler {
	return ec._RecipeBatchAdditiveConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditiveConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditiveConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveCreateInput(ctx context.Context, v interface{}) (RecipeBatchAdditiveCreateInput, error) {
	return ec.unmarshalInputRecipeBatchAdditiveCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditiveDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchAdditiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveOrdering(ctx context.Context, v interface{}) (RecipeBatchAdditiveOrdering, error) {
	return ec.unmarshalInputRecipeBatchAdditiveOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveOrdering(ctx context.Context, v interface{}) (*RecipeBatchAdditiveOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeBatchAdditiveOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeBatchAdditivePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditivePayload) graphql.Marshaler {
	return ec._RecipeBatchAdditivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveSort(ctx context.Context, v interface{}) (RecipeBatchAdditiveSort, error) {
	var res RecipeBatchAdditiveSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveSort(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditiveSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveUpdateInput(ctx context.Context, v interface{}) (RecipeBatchAdditiveUpdateInput, error) {
	return ec.unmarshalInputRecipeBatchAdditiveUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditivesDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchAdditivesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditivesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditivesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditivesUpdatePayload) graphql.Marshaler {
	return ec._RecipeBatchAdditivesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditivesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditivesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditivesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchConnection(ctx context.Context, sel ast.SelectionSet, v RecipeBatchConnection) graphql.Marshaler {
	return ec._RecipeBatchConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchCreateInput(ctx context.Context, v interface{}) (RecipeBatchCreateInput, error) {
	return ec.unmarshalInputRecipeBatchCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchFragrance2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragrance) graphql.Marshaler {
	return ec._RecipeBatchFragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragrance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragrance(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchFragranceConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceConnection(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragranceConnection) graphql.Marshaler {
	return ec._RecipeBatchFragranceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragranceConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragranceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragranceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceCreateInput(ctx context.Context, v interface{}) (RecipeBatchFragranceCreateInput, error) {
	return ec.unmarshalInputRecipeBatchFragranceCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchFragranceDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragranceDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchFragranceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragranceDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragranceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragranceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceOrdering(ctx context.Context, v interface{}) (RecipeBatchFragranceOrdering, error) {
	return ec.unmarshalInputRecipeBatchFragranceOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceOrdering(ctx context.Context, v interface{}) (*RecipeBatchFragranceOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeBatchFragranceOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeBatchFragrancePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragrancePayload) graphql.Marshaler {
	return ec._RecipeBatchFragrancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragrancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragrancePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceSort(ctx context.Context, v interface{}) (RecipeBatchFragranceSort, error) {
	var res RecipeBatchFragranceSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeBatchFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceSort(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragranceSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceUpdateInput(ctx context.Context, v interface{}) (RecipeBatchFragranceUpdateInput, error) {
	return ec.unmarshalInputRecipeBatchFragranceUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragrancesDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchFragrancesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragrancesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragrancesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragrancesUpdatePayload) graphql.Marshaler {
	return ec._RecipeBatchFragrancesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragrancesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragrancesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLipid2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipid) graphql.Marshaler {
	return ec._RecipeBatchLipid(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipid(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLipidConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidConnection(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidConnection) graphql.Marshaler {
	return ec._RecipeBatchLipidConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipidConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLipidCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidCreateInput(ctx context.Context, v interface{}) (RecipeBatchLipidCreateInput, error) {
	return ec.unmarshalInputRecipeBatchLipidCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchLipidDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchLipidDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipidDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLipidOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidOrdering(ctx context.Context, v interface{}) (RecipeBatchLipidOrdering, error) {
	return ec.unmarshalInputRecipeBatchLipidOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLipidOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidOrdering(ctx context.Context, v interface{}) (*RecipeBatchLipidOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeBatchLipidOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeBatchLipidPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidPayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidPayload) graphql.Marshaler {
	return ec._RecipeBatchLipidPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidPayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipidPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidSort(ctx context.Context, v interface{}) (RecipeBatchLipidSort, error) {
	var res RecipeBatchLipidSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeBatchLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidSort(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeBatchLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidUpdateInput(ctx context.Context, v interface{}) (RecipeBatchLipidUpdateInput, error) {
	return ec.unmarshalInputRecipeBatchLipidUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchLipidsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidsDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchLipidsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipidsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLipidsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidsUpdatePayload) graphql.Marshaler {
	return ec._RecipeBatchLipidsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipidsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLye2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLye) graphql.Marshaler {
	return ec._RecipeBatchLye(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLye) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLye(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLyeConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeConnection(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyeConnection) graphql.Marshaler {
	return ec._RecipeBatchLyeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLyeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLyeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeCreateInput(ctx context.Context, v interface{}) (RecipeBatchLyeCreateInput, error) {
	return ec.unmarshalInputRecipeBatchLyeCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchLyeDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyeDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchLyeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLyeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLyeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeOrdering(ctx context.Context, v interface{}) (RecipeBatchLyeOrdering, error) {
	return ec.unmarshalInputRecipeBatchLyeOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLyeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeOrdering(ctx context.Context, v interface{}) (*RecipeBatchLyeOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeBatchLyeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeBatchLyePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyePayload) graphql.Marshaler {
	return ec._RecipeBatchLyePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLyePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLyeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeSort(ctx context.Context, v interface{}) (RecipeBatchLyeSort, error) {
	var res RecipeBatchLyeSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeBatchLyeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeSort(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyeSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeBatchLyeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeUpdateInput(ctx context.Context, v interface{}) (RecipeBatchLyeUpdateInput, error) {
	return ec.unmarshalInputRecipeBatchLyeUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchLyesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyesDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchLyesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLyesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLyesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyesUpdatePayload) graphql.Marshaler {
	return ec._RecipeBatchLyesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLyesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchNote2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNote) graphql.Marshaler {
	return ec._RecipeBatchNote(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNote2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNote(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchNoteConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteConnection(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNoteConnection) graphql.Marshaler {
	return ec._RecipeBatchNoteConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNoteConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNoteConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNoteConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchNoteCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteCreateInput(ctx context.Context, v interface{}) (RecipeBatchNoteCreateInput, error) {
	return ec.unmarshalInputRecipeBatchNoteCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchNoteDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNoteDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchNoteDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNoteDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNoteDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNoteDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchNoteOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteOrdering(ctx context.Context, v interface{}) (RecipeBatchNoteOrdering, error) {
	return ec.unmarshalInputRecipeBatchNoteOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeBatchNoteOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteOrdering(ctx context.Context, v interface{}) (*RecipeBatchNoteOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeBatchNoteOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeBatchNotePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNotePayload) graphql.Marshaler {
	return ec._RecipeBatchNotePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNotePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNotePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNotePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchNoteSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteSort(ctx context.Context, v interface{}) (RecipeBatchNoteSort, error) {
	var res RecipeBatchNoteSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeBatchNoteSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteSort(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNoteSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeBatchNoteUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteUpdateInput(ctx context.Context, v interface{}) (RecipeBatchNoteUpdateInput, error) {
	return ec.unmarshalInputRecipeBatchNoteUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchNotesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNotesDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchNotesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNotesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNotesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNotesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchNotesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNotesUpdatePayload) graphql.Marshaler {
	return ec._RecipeBatchNotesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNotesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNotesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNotesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNotesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchOrdering(ctx context.Context, v interface{}) (RecipeBatchOrdering, error) {
	return ec.unmarshalInputRecipeBatchOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeBatchOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchOrdering(ctx context.Context, v interface{}) (*RecipeBatchOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeBatchOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeBatchPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchPayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchPayload) graphql.Marshaler {
	return ec._RecipeBatchPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchPayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchSort(ctx context.Context, v interface{}) (RecipeBatchSort, error) {
	var res RecipeBatchSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeBatchSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchSort(ctx context.Context, sel ast.SelectionSet, v RecipeBatchSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeBatchUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchUpdateInput(ctx context.Context, v interface{}) (RecipeBatchUpdateInput, error) {
	return ec.unmarshalInputRecipeBatchUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeBatchesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchesDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeBatchesUpdatePayload) graphql.Marshaler {
	return ec._RecipeBatchesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeConnection(ctx context.Context, sel ast.SelectionSet, v RecipeConnection) graphql.Marshaler {
	return ec._RecipeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeCreateInput(ctx context.Context, v interface{}) (RecipeCreateInput, error) {
	return ec.unmarshalInputRecipeCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeDeletePayload) graphql.Marshaler {
	return ec._RecipeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeFragrance2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v RecipeFragrance) graphql.Marshaler {
	return ec._RecipeFragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v *RecipeFragrance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragrance(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeFragranceConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceConnection(ctx context.Context, sel ast.SelectionSet, v RecipeFragranceConnection) graphql.Marshaler {
	return ec._RecipeFragranceConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragranceConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeFragranceConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragranceConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeFragranceCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceCreateInput(ctx context.Context, v interface{}) (RecipeFragranceCreateInput, error) {
	return ec.unmarshalInputRecipeFragranceCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeFragranceDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeFragranceDeletePayload) graphql.Marshaler {
	return ec._RecipeFragranceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragranceDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeFragranceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragranceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeFragranceOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceOrdering(ctx context.Context, v interface{}) (RecipeFragranceOrdering, error) {
	return ec.unmarshalInputRecipeFragranceOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeFragranceOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceOrdering(ctx context.Context, v interface{}) (*RecipeFragranceOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeFragranceOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeFragrancePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancePayload(ctx context.Context, sel ast.SelectionSet, v RecipeFragrancePayload) graphql.Marshaler {
	return ec._RecipeFragrancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragrancePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeFragrancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragrancePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceSort(ctx context.Context, v interface{}) (RecipeFragranceSort, error) {
	var res RecipeFragranceSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeFragranceSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceSort(ctx context.Context, sel ast.SelectionSet, v RecipeFragranceSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeFragranceUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceUpdateInput(ctx context.Context, v interface{}) (RecipeFragranceUpdateInput, error) {
	return ec.unmarshalInputRecipeFragranceUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeFragrancesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeFragrancesDeletePayload) graphql.Marshaler {
	return ec._RecipeFragrancesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragrancesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeFragrancesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragrancesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeFragrancesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeFragrancesUpdatePayload) graphql.Marshaler {
	return ec._RecipeFragrancesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragrancesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrancesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeFragrancesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragrancesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeLipid2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v RecipeLipid) graphql.Marshaler {
	return ec._RecipeLipid(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v *RecipeLipid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipid(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeLipidConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidConnection(ctx context.Context, sel ast.SelectionSet, v RecipeLipidConnection) graphql.Marshaler {
	return ec._RecipeLipidConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeLipidConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeLipidCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidCreateInput(ctx context.Context, v interface{}) (RecipeLipidCreateInput, error) {
	return ec.unmarshalInputRecipeLipidCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeLipidDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeLipidDeletePayload) graphql.Marshaler {
	return ec._RecipeLipidDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeLipidDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeLipidOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidOrdering(ctx context.Context, v interface{}) (RecipeLipidOrdering, error) {
	return ec.unmarshalInputRecipeLipidOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeLipidOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidOrdering(ctx context.Context, v interface{}) (*RecipeLipidOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeLipidOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeLipidPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidPayload(ctx context.Context, sel ast.SelectionSet, v RecipeLipidPayload) graphql.Marshaler {
	return ec._RecipeLipidPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidPayload(ctx context.Context, sel ast.SelectionSet, v *RecipeLipidPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidSort(ctx context.Context, v interface{}) (RecipeLipidSort, error) {
	var res RecipeLipidSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeLipidSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidSort(ctx context.Context, sel ast.SelectionSet, v RecipeLipidSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeLipidUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidUpdateInput(ctx context.Context, v interface{}) (RecipeLipidUpdateInput, error) {
	return ec.unmarshalInputRecipeLipidUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeLipidsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeLipidsDeletePayload) graphql.Marshaler {
	return ec._RecipeLipidsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeLipidsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeLipidsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeLipidsUpdatePayload) graphql.Marshaler {
	return ec._RecipeLipidsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeLipidsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeOrdering(ctx context.Context, v interface{}) (RecipeOrdering, error) {
	return ec.unmarshalInputRecipeOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeOrdering(ctx context.Context, v interface{}) (*RecipeOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipePayload(ctx context.Context, sel ast.SelectionSet, v RecipePayload) graphql.Marshaler {
	return ec._RecipePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipePayload(ctx context.Context, sel ast.SelectionSet, v *RecipePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeSort(ctx context.Context, v interface{}) (RecipeSort, error) {
	var res RecipeSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeSort(ctx context.Context, sel ast.SelectionSet, v RecipeSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRecipeStep2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v RecipeStep) graphql.Marshaler {
	return ec._RecipeStep(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStep2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v *RecipeStep) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStep(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeStepConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepConnection(ctx context.Context, sel ast.SelectionSet, v RecipeStepConnection) graphql.Marshaler {
	return ec._RecipeStepConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepConnection(ctx context.Context, sel ast.SelectionSet, v *RecipeStepConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeStepCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepCreateInput(ctx context.Context, v interface{}) (RecipeStepCreateInput, error) {
	return ec.unmarshalInputRecipeStepCreateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeStepDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeStepDeletePayload) graphql.Marshaler {
	return ec._RecipeStepDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeStepDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeStepOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepOrdering(ctx context.Context, v interface{}) (RecipeStepOrdering, error) {
	return ec.unmarshalInputRecipeStepOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNRecipeStepOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepOrdering(ctx context.Context, v interface{}) (*RecipeStepOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNRecipeStepOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNRecipeStepPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepPayload(ctx context.Context, sel ast.SelectionSet, v RecipeStepPayload) graphql.Marshaler {
	return ec._RecipeStepPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepPayload(ctx context.Context, sel ast.SelectionSet, v *RecipeStepPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeStepSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepSort(ctx context.Context, v interface{}) (RecipeStepSort, error) {
	var res RecipeStepSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNRecipeStepSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepSort(ctx context.Context, sel ast.SelectionSet, v RecipeStepSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRecipeStepUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepUpdateInput(ctx context.Context, v interface{}) (RecipeStepUpdateInput, error) {
	return ec.unmarshalInputRecipeStepUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipeStepsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepsDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipeStepsDeletePayload) graphql.Marshaler {
	return ec._RecipeStepsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeStepsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeStepsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipeStepsUpdatePayload) graphql.Marshaler {
	return ec._RecipeStepsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipeStepsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeUpdateInput(ctx context.Context, v interface{}) (RecipeUpdateInput, error) {
	return ec.unmarshalInputRecipeUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNRecipesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipesDeletePayload(ctx context.Context, sel ast.SelectionSet, v RecipesDeletePayload) graphql.Marshaler {
	return ec._RecipesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *RecipesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v RecipesUpdatePayload) graphql.Marshaler {
	return ec._RecipesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *RecipesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx context.Context, v interface{}) (boilergql.SortDirection, error) {
	var res boilergql.SortDirection
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v boilergql.SortDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSupplier2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalNSupplierConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierConnection(ctx context.Context, sel ast.SelectionSet, v SupplierConnection) graphql.Marshaler {
	return ec._SupplierConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplierConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierConnection(ctx context.Context, sel ast.SelectionSet, v *SupplierConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupplierConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierCreateInput(ctx context.Context, v interface{}) (SupplierCreateInput, error) {
	return ec.unmarshalInputSupplierCreateInput(ctx, v)
}

func (ec *executionContext) marshalNSupplierDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierDeletePayload(ctx context.Context, sel ast.SelectionSet, v SupplierDeletePayload) graphql.Marshaler {
	return ec._SupplierDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplierDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierDeletePayload(ctx context.Context, sel ast.SelectionSet, v *SupplierDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupplierDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierOrdering(ctx context.Context, v interface{}) (SupplierOrdering, error) {
	return ec.unmarshalInputSupplierOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNSupplierOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierOrdering(ctx context.Context, v interface{}) (*SupplierOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNSupplierOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNSupplierPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierPayload(ctx context.Context, sel ast.SelectionSet, v SupplierPayload) graphql.Marshaler {
	return ec._SupplierPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplierPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierPayload(ctx context.Context, sel ast.SelectionSet, v *SupplierPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupplierPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierSort(ctx context.Context, v interface{}) (SupplierSort, error) {
	var res SupplierSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNSupplierSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierSort(ctx context.Context, sel ast.SelectionSet, v SupplierSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSupplierUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierUpdateInput(ctx context.Context, v interface{}) (SupplierUpdateInput, error) {
	return ec.unmarshalInputSupplierUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNSuppliersDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSuppliersDeletePayload(ctx context.Context, sel ast.SelectionSet, v SuppliersDeletePayload) graphql.Marshaler {
	return ec._SuppliersDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSuppliersDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSuppliersDeletePayload(ctx context.Context, sel ast.SelectionSet, v *SuppliersDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SuppliersDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSuppliersUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSuppliersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v SuppliersUpdatePayload) graphql.Marshaler {
	return ec._SuppliersUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSuppliersUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSuppliersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *SuppliersUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SuppliersUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAdditive2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx context.Context, sel ast.SelectionSet, v Additive) graphql.Marshaler {
	return ec._Additive(ctx, sel, &v)
}

func (ec *executionContext) marshalOAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditive(ctx context.Context, sel ast.SelectionSet, v *Additive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Additive(ctx, sel, v)
}

func (ec *executionContext) marshalOAdditiveEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v AdditiveEdge) graphql.Marshaler {
	return ec._AdditiveEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAdditiveEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v []*AdditiveEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdditiveEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAdditiveEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v *AdditiveEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdditiveEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAdditiveFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveFilter(ctx context.Context, v interface{}) (AdditiveFilter, error) {
	return ec.unmarshalInputAdditiveFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveFilter(ctx context.Context, v interface{}) (*AdditiveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAdditiveFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAdditiveInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v AdditiveInventory) graphql.Marshaler {
	return ec._AdditiveInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalOAdditiveInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v []*AdditiveInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdditiveInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAdditiveInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdditiveInventory(ctx, sel, v)
}

func (ec *executionContext) marshalOAdditiveInventoryEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryEdge(ctx context.Context, sel ast.SelectionSet, v AdditiveInventoryEdge) graphql.Marshaler {
	return ec._AdditiveInventoryEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAdditiveInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryEdge(ctx context.Context, sel ast.SelectionSet, v []*AdditiveInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdditiveInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAdditiveInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryEdge(ctx context.Context, sel ast.SelectionSet, v *AdditiveInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdditiveInventoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAdditiveInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryFilter(ctx context.Context, v interface{}) (AdditiveInventoryFilter, error) {
	return ec.unmarshalInputAdditiveInventoryFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAdditiveInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryFilter(ctx context.Context, v interface{}) (*AdditiveInventoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAdditiveInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAdditiveInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryOrderingᚄ(ctx context.Context, v interface{}) ([]*AdditiveInventoryOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AdditiveInventoryOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAdditiveInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAdditiveInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx context.Context, v interface{}) (AdditiveInventoryWhere, error) {
	return ec.unmarshalInputAdditiveInventoryWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx context.Context, v interface{}) (*AdditiveInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAdditiveInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveInventoryWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAdditiveOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveOrderingᚄ(ctx context.Context, v interface{}) ([]*AdditiveOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AdditiveOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAdditiveOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAdditiveWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx context.Context, v interface{}) (AdditiveWhere, error) {
	return ec.unmarshalInputAdditiveWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx context.Context, v interface{}) (*AdditiveWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAdditiveWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAdditiveWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAuthGroup2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx context.Context, sel ast.SelectionSet, v AuthGroup) graphql.Marshaler {
	return ec._AuthGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroup(ctx context.Context, sel ast.SelectionSet, v *AuthGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthGroup(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthGroupEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupEdge(ctx context.Context, sel ast.SelectionSet, v AuthGroupEdge) graphql.Marshaler {
	return ec._AuthGroupEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthGroupEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupEdge(ctx context.Context, sel ast.SelectionSet, v []*AuthGroupEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthGroupEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthGroupEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupEdge(ctx context.Context, sel ast.SelectionSet, v *AuthGroupEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthGroupEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthGroupFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupFilter(ctx context.Context, v interface{}) (AuthGroupFilter, error) {
	return ec.unmarshalInputAuthGroupFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAuthGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupFilter(ctx context.Context, v interface{}) (*AuthGroupFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthGroupFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthGroupOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupOrderingᚄ(ctx context.Context, v interface{}) ([]*AuthGroupOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AuthGroupOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthGroupOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAuthGroupPermission2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermission) graphql.Marshaler {
	return ec._AuthGroupPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthGroupPermission2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx context.Context, sel ast.SelectionSet, v []*AuthGroupPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthGroupPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthGroupPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermission(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthGroupPermission(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthGroupPermissionEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionEdge(ctx context.Context, sel ast.SelectionSet, v AuthGroupPermissionEdge) graphql.Marshaler {
	return ec._AuthGroupPermissionEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthGroupPermissionEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionEdge(ctx context.Context, sel ast.SelectionSet, v []*AuthGroupPermissionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthGroupPermissionEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthGroupPermissionEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionEdge(ctx context.Context, sel ast.SelectionSet, v *AuthGroupPermissionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthGroupPermissionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthGroupPermissionFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionFilter(ctx context.Context, v interface{}) (AuthGroupPermissionFilter, error) {
	return ec.unmarshalInputAuthGroupPermissionFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAuthGroupPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionFilter(ctx context.Context, v interface{}) (*AuthGroupPermissionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthGroupPermissionFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthGroupPermissionOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionOrderingᚄ(ctx context.Context, v interface{}) ([]*AuthGroupPermissionOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AuthGroupPermissionOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthGroupPermissionOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthGroupPermissionWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx context.Context, v interface{}) (AuthGroupPermissionWhere, error) {
	return ec.unmarshalInputAuthGroupPermissionWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAuthGroupPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx context.Context, v interface{}) (*AuthGroupPermissionWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthGroupPermissionWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupPermissionWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthGroupWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx context.Context, v interface{}) (AuthGroupWhere, error) {
	return ec.unmarshalInputAuthGroupWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAuthGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx context.Context, v interface{}) (*AuthGroupWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthGroupWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthGroupWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAuthPermission2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx context.Context, sel ast.SelectionSet, v AuthPermission) graphql.Marshaler {
	return ec._AuthPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermission(ctx context.Context, sel ast.SelectionSet, v *AuthPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthPermission(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthPermissionEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionEdge(ctx context.Context, sel ast.SelectionSet, v AuthPermissionEdge) graphql.Marshaler {
	return ec._AuthPermissionEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthPermissionEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionEdge(ctx context.Context, sel ast.SelectionSet, v []*AuthPermissionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthPermissionEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthPermissionEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionEdge(ctx context.Context, sel ast.SelectionSet, v *AuthPermissionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthPermissionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthPermissionFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionFilter(ctx context.Context, v interface{}) (AuthPermissionFilter, error) {
	return ec.unmarshalInputAuthPermissionFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAuthPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionFilter(ctx context.Context, v interface{}) (*AuthPermissionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthPermissionFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthPermissionOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionOrderingᚄ(ctx context.Context, v interface{}) ([]*AuthPermissionOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AuthPermissionOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthPermissionOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthPermissionWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx context.Context, v interface{}) (AuthPermissionWhere, error) {
	return ec.unmarshalInputAuthPermissionWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAuthPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx context.Context, v interface{}) (*AuthPermissionWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthPermissionWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthPermissionWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAuthUser2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx context.Context, sel ast.SelectionSet, v AuthUser) graphql.Marshaler {
	return ec._AuthUser(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUser(ctx context.Context, sel ast.SelectionSet, v *AuthUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthUser(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthUserEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserEdge(ctx context.Context, sel ast.SelectionSet, v AuthUserEdge) graphql.Marshaler {
	return ec._AuthUserEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthUserEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserEdge(ctx context.Context, sel ast.SelectionSet, v []*AuthUserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthUserEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthUserEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserEdge(ctx context.Context, sel ast.SelectionSet, v *AuthUserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthUserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthUserFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserFilter(ctx context.Context, v interface{}) (AuthUserFilter, error) {
	return ec.unmarshalInputAuthUserFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAuthUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserFilter(ctx context.Context, v interface{}) (*AuthUserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthUserFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOAuthUserGroup2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx context.Context, sel ast.SelectionSet, v AuthUserGroup) graphql.Marshaler {
	return ec._AuthUserGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthUserGroup2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx context.Context, sel ast.SelectionSet, v []*AuthUserGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthUserGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthUserGroup2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroup(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthUserGroup(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthUserGroupEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupEdge(ctx context.Context, sel ast.SelectionSet, v AuthUserGroupEdge) graphql.Marshaler {
	return ec._AuthUserGroupEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthUserGroupEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupEdge(ctx context.Context, sel ast.SelectionSet, v []*AuthUserGroupEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthUserGroupEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthUserGroupEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupEdge(ctx context.Context, sel ast.SelectionSet, v *AuthUserGroupEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthUserGroupEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthUserGroupFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupFilter(ctx context.Context, v interface{}) (AuthUserGroupFilter, error) {
	return ec.unmarshalInputAuthUserGroupFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAuthUserGroupFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupFilter(ctx context.Context, v interface{}) (*AuthUserGroupFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthUserGroupFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthUserGroupOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupOrderingᚄ(ctx context.Context, v interface{}) ([]*AuthUserGroupOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AuthUserGroupOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthUserGroupOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthUserGroupWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx context.Context, v interface{}) (AuthUserGroupWhere, error) {
	return ec.unmarshalInputAuthUserGroupWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAuthUserGroupWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx context.Context, v interface{}) (*AuthUserGroupWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthUserGroupWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserGroupWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthUserOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserOrderingᚄ(ctx context.Context, v interface{}) ([]*AuthUserOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AuthUserOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthUserOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAuthUserUserPermission2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermission) graphql.Marshaler {
	return ec._AuthUserUserPermission(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthUserUserPermission2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx context.Context, sel ast.SelectionSet, v []*AuthUserUserPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthUserUserPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthUserUserPermission2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermission(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthUserUserPermission(ctx, sel, v)
}

func (ec *executionContext) marshalOAuthUserUserPermissionEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionEdge(ctx context.Context, sel ast.SelectionSet, v AuthUserUserPermissionEdge) graphql.Marshaler {
	return ec._AuthUserUserPermissionEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAuthUserUserPermissionEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionEdge(ctx context.Context, sel ast.SelectionSet, v []*AuthUserUserPermissionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAuthUserUserPermissionEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAuthUserUserPermissionEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionEdge(ctx context.Context, sel ast.SelectionSet, v *AuthUserUserPermissionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AuthUserUserPermissionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuthUserUserPermissionFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionFilter(ctx context.Context, v interface{}) (AuthUserUserPermissionFilter, error) {
	return ec.unmarshalInputAuthUserUserPermissionFilter(ctx, v)
}

func (ec *executionContext) unmarshalOAuthUserUserPermissionFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionFilter(ctx context.Context, v interface{}) (*AuthUserUserPermissionFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthUserUserPermissionFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthUserUserPermissionOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionOrderingᚄ(ctx context.Context, v interface{}) ([]*AuthUserUserPermissionOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*AuthUserUserPermissionOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNAuthUserUserPermissionOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOAuthUserUserPermissionWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx context.Context, v interface{}) (AuthUserUserPermissionWhere, error) {
	return ec.unmarshalInputAuthUserUserPermissionWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAuthUserUserPermissionWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx context.Context, v interface{}) (*AuthUserUserPermissionWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthUserUserPermissionWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserUserPermissionWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOAuthUserWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx context.Context, v interface{}) (AuthUserWhere, error) {
	return ec.unmarshalInputAuthUserWhere(ctx, v)
}

func (ec *executionContext) unmarshalOAuthUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx context.Context, v interface{}) (*AuthUserWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOAuthUserWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐAuthUserWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOBooleanFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐBooleanFilter(ctx context.Context, v interface{}) (BooleanFilter, error) {
	return ec.unmarshalInputBooleanFilter(ctx, v)
}

func (ec *executionContext) unmarshalOBooleanFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐBooleanFilter(ctx context.Context, v interface{}) (*BooleanFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBooleanFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐBooleanFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOConnectionBackwardPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionBackwardPagination(ctx context.Context, v interface{}) (boilergql.ConnectionBackwardPagination, error) {
	return ec.unmarshalInputConnectionBackwardPagination(ctx, v)
}

func (ec *executionContext) unmarshalOConnectionBackwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionBackwardPagination(ctx context.Context, v interface{}) (*boilergql.ConnectionBackwardPagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOConnectionBackwardPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionBackwardPagination(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOConnectionForwardPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionForwardPagination(ctx context.Context, v interface{}) (boilergql.ConnectionForwardPagination, error) {
	return ec.unmarshalInputConnectionForwardPagination(ctx, v)
}

func (ec *executionContext) unmarshalOConnectionForwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionForwardPagination(ctx context.Context, v interface{}) (*boilergql.ConnectionForwardPagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOConnectionForwardPagination2githubᚗcomᚋwebᚑridgeᚋutilsᚑgoᚋboilergqlᚋv3ᚐConnectionForwardPagination(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOFloatFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx context.Context, v interface{}) (FloatFilter, error) {
	return ec.unmarshalInputFloatFilter(ctx, v)
}

func (ec *executionContext) unmarshalOFloatFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx context.Context, v interface{}) (*FloatFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloatFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFloatFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFragrance2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx context.Context, sel ast.SelectionSet, v Fragrance) graphql.Marshaler {
	return ec._Fragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalOFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragrance(ctx context.Context, sel ast.SelectionSet, v *Fragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Fragrance(ctx, sel, v)
}

func (ec *executionContext) marshalOFragranceEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceEdge(ctx context.Context, sel ast.SelectionSet, v FragranceEdge) graphql.Marshaler {
	return ec._FragranceEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOFragranceEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceEdge(ctx context.Context, sel ast.SelectionSet, v []*FragranceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFragranceEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFragranceEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceEdge(ctx context.Context, sel ast.SelectionSet, v *FragranceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FragranceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFragranceFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceFilter(ctx context.Context, v interface{}) (FragranceFilter, error) {
	return ec.unmarshalInputFragranceFilter(ctx, v)
}

func (ec *executionContext) unmarshalOFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceFilter(ctx context.Context, v interface{}) (*FragranceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFragranceFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFragranceInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v FragranceInventory) graphql.Marshaler {
	return ec._FragranceInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalOFragranceInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v []*FragranceInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFragranceInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFragranceInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v *FragranceInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FragranceInventory(ctx, sel, v)
}

func (ec *executionContext) marshalOFragranceInventoryEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryEdge(ctx context.Context, sel ast.SelectionSet, v FragranceInventoryEdge) graphql.Marshaler {
	return ec._FragranceInventoryEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOFragranceInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryEdge(ctx context.Context, sel ast.SelectionSet, v []*FragranceInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFragranceInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFragranceInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryEdge(ctx context.Context, sel ast.SelectionSet, v *FragranceInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FragranceInventoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFragranceInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryFilter(ctx context.Context, v interface{}) (FragranceInventoryFilter, error) {
	return ec.unmarshalInputFragranceInventoryFilter(ctx, v)
}

func (ec *executionContext) unmarshalOFragranceInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryFilter(ctx context.Context, v interface{}) (*FragranceInventoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFragranceInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFragranceInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryOrderingᚄ(ctx context.Context, v interface{}) ([]*FragranceInventoryOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*FragranceInventoryOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFragranceInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFragranceInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx context.Context, v interface{}) (FragranceInventoryWhere, error) {
	return ec.unmarshalInputFragranceInventoryWhere(ctx, v)
}

func (ec *executionContext) unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx context.Context, v interface{}) (*FragranceInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFragranceInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceInventoryWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFragranceOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceOrderingᚄ(ctx context.Context, v interface{}) ([]*FragranceOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*FragranceOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFragranceOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFragranceWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx context.Context, v interface{}) (FragranceWhere, error) {
	return ec.unmarshalInputFragranceWhere(ctx, v)
}

func (ec *executionContext) unmarshalOFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx context.Context, v interface{}) (*FragranceWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFragranceWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐFragranceWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIDFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx context.Context, v interface{}) (IDFilter, error) {
	return ec.unmarshalInputIDFilter(ctx, v)
}

func (ec *executionContext) unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx context.Context, v interface{}) (*IDFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIDFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIDFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIntFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx context.Context, v interface{}) (IntFilter, error) {
	return ec.unmarshalInputIntFilter(ctx, v)
}

func (ec *executionContext) unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx context.Context, v interface{}) (*IntFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIntFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐIntFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLipid2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx context.Context, sel ast.SelectionSet, v Lipid) graphql.Marshaler {
	return ec._Lipid(ctx, sel, &v)
}

func (ec *executionContext) marshalOLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipid(ctx context.Context, sel ast.SelectionSet, v *Lipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lipid(ctx, sel, v)
}

func (ec *executionContext) marshalOLipidEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidEdge(ctx context.Context, sel ast.SelectionSet, v LipidEdge) graphql.Marshaler {
	return ec._LipidEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOLipidEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidEdge(ctx context.Context, sel ast.SelectionSet, v []*LipidEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLipidEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLipidEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidEdge(ctx context.Context, sel ast.SelectionSet, v *LipidEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LipidEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLipidFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidFilter(ctx context.Context, v interface{}) (LipidFilter, error) {
	return ec.unmarshalInputLipidFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidFilter(ctx context.Context, v interface{}) (*LipidFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLipidFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLipidInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v LipidInventory) graphql.Marshaler {
	return ec._LipidInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalOLipidInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v []*LipidInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLipidInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLipidInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v *LipidInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LipidInventory(ctx, sel, v)
}

func (ec *executionContext) marshalOLipidInventoryEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryEdge(ctx context.Context, sel ast.SelectionSet, v LipidInventoryEdge) graphql.Marshaler {
	return ec._LipidInventoryEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOLipidInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryEdge(ctx context.Context, sel ast.SelectionSet, v []*LipidInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLipidInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLipidInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryEdge(ctx context.Context, sel ast.SelectionSet, v *LipidInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LipidInventoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLipidInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryFilter(ctx context.Context, v interface{}) (LipidInventoryFilter, error) {
	return ec.unmarshalInputLipidInventoryFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLipidInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryFilter(ctx context.Context, v interface{}) (*LipidInventoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLipidInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLipidInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryOrderingᚄ(ctx context.Context, v interface{}) ([]*LipidInventoryOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LipidInventoryOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLipidInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLipidInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx context.Context, v interface{}) (LipidInventoryWhere, error) {
	return ec.unmarshalInputLipidInventoryWhere(ctx, v)
}

func (ec *executionContext) unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx context.Context, v interface{}) (*LipidInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLipidInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidInventoryWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLipidOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidOrderingᚄ(ctx context.Context, v interface{}) ([]*LipidOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LipidOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLipidOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLipidWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx context.Context, v interface{}) (LipidWhere, error) {
	return ec.unmarshalInputLipidWhere(ctx, v)
}

func (ec *executionContext) unmarshalOLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx context.Context, v interface{}) (*LipidWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLipidWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLipidWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLye2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx context.Context, sel ast.SelectionSet, v Lye) graphql.Marshaler {
	return ec._Lye(ctx, sel, &v)
}

func (ec *executionContext) marshalOLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLye(ctx context.Context, sel ast.SelectionSet, v *Lye) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Lye(ctx, sel, v)
}

func (ec *executionContext) marshalOLyeEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeEdge(ctx context.Context, sel ast.SelectionSet, v LyeEdge) graphql.Marshaler {
	return ec._LyeEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOLyeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeEdge(ctx context.Context, sel ast.SelectionSet, v []*LyeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLyeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLyeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeEdge(ctx context.Context, sel ast.SelectionSet, v *LyeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LyeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLyeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeFilter(ctx context.Context, v interface{}) (LyeFilter, error) {
	return ec.unmarshalInputLyeFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeFilter(ctx context.Context, v interface{}) (*LyeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLyeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLyeInventory2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v LyeInventory) graphql.Marshaler {
	return ec._LyeInventory(ctx, sel, &v)
}

func (ec *executionContext) marshalOLyeInventory2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v []*LyeInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLyeInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLyeInventory2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v *LyeInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LyeInventory(ctx, sel, v)
}

func (ec *executionContext) marshalOLyeInventoryEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryEdge(ctx context.Context, sel ast.SelectionSet, v LyeInventoryEdge) graphql.Marshaler {
	return ec._LyeInventoryEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOLyeInventoryEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryEdge(ctx context.Context, sel ast.SelectionSet, v []*LyeInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLyeInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLyeInventoryEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryEdge(ctx context.Context, sel ast.SelectionSet, v *LyeInventoryEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LyeInventoryEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLyeInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryFilter(ctx context.Context, v interface{}) (LyeInventoryFilter, error) {
	return ec.unmarshalInputLyeInventoryFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLyeInventoryFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryFilter(ctx context.Context, v interface{}) (*LyeInventoryFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLyeInventoryFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLyeInventoryOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryOrderingᚄ(ctx context.Context, v interface{}) ([]*LyeInventoryOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LyeInventoryOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLyeInventoryOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLyeInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx context.Context, v interface{}) (LyeInventoryWhere, error) {
	return ec.unmarshalInputLyeInventoryWhere(ctx, v)
}

func (ec *executionContext) unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx context.Context, v interface{}) (*LyeInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLyeInventoryWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeInventoryWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLyeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeOrderingᚄ(ctx context.Context, v interface{}) ([]*LyeOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LyeOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLyeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLyeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx context.Context, v interface{}) (LyeWhere, error) {
	return ec.unmarshalInputLyeWhere(ctx, v)
}

func (ec *executionContext) unmarshalOLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx context.Context, v interface{}) (*LyeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLyeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐLyeWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONode2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐNode(ctx context.Context, sel ast.SelectionSet, v Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalORecipe2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx context.Context, sel ast.SelectionSet, v Recipe) graphql.Marshaler {
	return ec._Recipe(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipe2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipe(ctx context.Context, sel ast.SelectionSet, v *Recipe) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Recipe(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeAdditive2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v RecipeAdditive) graphql.Marshaler {
	return ec._RecipeAdditive(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeAdditive2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v []*RecipeAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeAdditive(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeAdditiveEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v RecipeAdditiveEdge) graphql.Marshaler {
	return ec._RecipeAdditiveEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeAdditiveEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeAdditiveEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeAdditiveEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeAdditiveEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeAdditiveEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeAdditiveEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeAdditiveFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveFilter(ctx context.Context, v interface{}) (RecipeAdditiveFilter, error) {
	return ec.unmarshalInputRecipeAdditiveFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveFilter(ctx context.Context, v interface{}) (*RecipeAdditiveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeAdditiveFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeAdditiveOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeAdditiveOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeAdditiveOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeAdditiveOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeAdditiveWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx context.Context, v interface{}) (RecipeAdditiveWhere, error) {
	return ec.unmarshalInputRecipeAdditiveWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx context.Context, v interface{}) (*RecipeAdditiveWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeAdditiveWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeAdditiveWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeBatch2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v RecipeBatch) graphql.Marshaler {
	return ec._RecipeBatch(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatch2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatch2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v *RecipeBatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatch(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchAdditive2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditive) graphql.Marshaler {
	return ec._RecipeBatchAdditive(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchAdditive2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchAdditive2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchAdditive(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchAdditiveEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v RecipeBatchAdditiveEdge) graphql.Marshaler {
	return ec._RecipeBatchAdditiveEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchAdditiveEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchAdditiveEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchAdditiveEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchAdditiveEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchAdditiveEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchAdditiveEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveFilter(ctx context.Context, v interface{}) (RecipeBatchAdditiveFilter, error) {
	return ec.unmarshalInputRecipeBatchAdditiveFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveFilter(ctx context.Context, v interface{}) (*RecipeBatchAdditiveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchAdditiveFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeBatchAdditiveOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeBatchAdditiveOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeBatchAdditiveOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx context.Context, v interface{}) (RecipeBatchAdditiveWhere, error) {
	return ec.unmarshalInputRecipeBatchAdditiveWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx context.Context, v interface{}) (*RecipeBatchAdditiveWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchAdditiveWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchAdditiveWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeBatchEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchEdge(ctx context.Context, sel ast.SelectionSet, v RecipeBatchEdge) graphql.Marshaler {
	return ec._RecipeBatchEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFilter(ctx context.Context, v interface{}) (RecipeBatchFilter, error) {
	return ec.unmarshalInputRecipeBatchFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFilter(ctx context.Context, v interface{}) (*RecipeBatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeBatchFragrance2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragrance) graphql.Marshaler {
	return ec._RecipeBatchFragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchFragrance2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchFragrance(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchFragranceEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceEdge(ctx context.Context, sel ast.SelectionSet, v RecipeBatchFragranceEdge) graphql.Marshaler {
	return ec._RecipeBatchFragranceEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchFragranceEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchFragranceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchFragranceEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchFragranceEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchFragranceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchFragranceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchFragranceFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceFilter(ctx context.Context, v interface{}) (RecipeBatchFragranceFilter, error) {
	return ec.unmarshalInputRecipeBatchFragranceFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceFilter(ctx context.Context, v interface{}) (*RecipeBatchFragranceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchFragranceFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeBatchFragranceOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeBatchFragranceOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeBatchFragranceOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeBatchFragranceOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeBatchFragranceWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx context.Context, v interface{}) (RecipeBatchFragranceWhere, error) {
	return ec.unmarshalInputRecipeBatchFragranceWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx context.Context, v interface{}) (*RecipeBatchFragranceWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchFragranceWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchFragranceWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeBatchLipid2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipid) graphql.Marshaler {
	return ec._RecipeBatchLipid(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchLipid2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchLipid(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchLipidEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidEdge(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLipidEdge) graphql.Marshaler {
	return ec._RecipeBatchLipidEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchLipidEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchLipidEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchLipidEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchLipidEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLipidEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchLipidEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchLipidFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidFilter(ctx context.Context, v interface{}) (RecipeBatchLipidFilter, error) {
	return ec.unmarshalInputRecipeBatchLipidFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidFilter(ctx context.Context, v interface{}) (*RecipeBatchLipidFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchLipidFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeBatchLipidOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeBatchLipidOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeBatchLipidOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeBatchLipidOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeBatchLipidWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx context.Context, v interface{}) (RecipeBatchLipidWhere, error) {
	return ec.unmarshalInputRecipeBatchLipidWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx context.Context, v interface{}) (*RecipeBatchLipidWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchLipidWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLipidWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeBatchLye2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLye) graphql.Marshaler {
	return ec._RecipeBatchLye(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchLye2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchLye) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchLye2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLye) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchLye(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchLyeEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeEdge(ctx context.Context, sel ast.SelectionSet, v RecipeBatchLyeEdge) graphql.Marshaler {
	return ec._RecipeBatchLyeEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchLyeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchLyeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchLyeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchLyeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchLyeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchLyeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchLyeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeFilter(ctx context.Context, v interface{}) (RecipeBatchLyeFilter, error) {
	return ec.unmarshalInputRecipeBatchLyeFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchLyeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeFilter(ctx context.Context, v interface{}) (*RecipeBatchLyeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchLyeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeBatchLyeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeBatchLyeOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeBatchLyeOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeBatchLyeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeBatchLyeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx context.Context, v interface{}) (RecipeBatchLyeWhere, error) {
	return ec.unmarshalInputRecipeBatchLyeWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx context.Context, v interface{}) (*RecipeBatchLyeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchLyeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchLyeWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeBatchNote2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNote) graphql.Marshaler {
	return ec._RecipeBatchNote(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchNote2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchNote2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchNote2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchNote(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchNoteEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteEdge(ctx context.Context, sel ast.SelectionSet, v RecipeBatchNoteEdge) graphql.Marshaler {
	return ec._RecipeBatchNoteEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeBatchNoteEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeBatchNoteEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchNoteEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchNoteEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeBatchNoteEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchNoteEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchNoteFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteFilter(ctx context.Context, v interface{}) (RecipeBatchNoteFilter, error) {
	return ec.unmarshalInputRecipeBatchNoteFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchNoteFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteFilter(ctx context.Context, v interface{}) (*RecipeBatchNoteFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchNoteFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeBatchNoteOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeBatchNoteOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeBatchNoteOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeBatchNoteOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeBatchNoteWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx context.Context, v interface{}) (RecipeBatchNoteWhere, error) {
	return ec.unmarshalInputRecipeBatchNoteWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx context.Context, v interface{}) (*RecipeBatchNoteWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchNoteWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchNoteWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeBatchOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeBatchOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeBatchOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeBatchOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeBatchWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx context.Context, v interface{}) (RecipeBatchWhere, error) {
	return ec.unmarshalInputRecipeBatchWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx context.Context, v interface{}) (*RecipeBatchWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeBatchWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeBatchWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeEdge(ctx context.Context, sel ast.SelectionSet, v RecipeEdge) graphql.Marshaler {
	return ec._RecipeEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFilter(ctx context.Context, v interface{}) (RecipeFilter, error) {
	return ec.unmarshalInputRecipeFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFilter(ctx context.Context, v interface{}) (*RecipeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeFragrance2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v RecipeFragrance) graphql.Marshaler {
	return ec._RecipeFragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeFragrance2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v []*RecipeFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeFragrance2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v *RecipeFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeFragrance(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeFragranceEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceEdge(ctx context.Context, sel ast.SelectionSet, v RecipeFragranceEdge) graphql.Marshaler {
	return ec._RecipeFragranceEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeFragranceEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeFragranceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeFragranceEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeFragranceEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeFragranceEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeFragranceEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeFragranceFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceFilter(ctx context.Context, v interface{}) (RecipeFragranceFilter, error) {
	return ec.unmarshalInputRecipeFragranceFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeFragranceFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceFilter(ctx context.Context, v interface{}) (*RecipeFragranceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeFragranceFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeFragranceOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeFragranceOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeFragranceOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeFragranceOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeFragranceWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx context.Context, v interface{}) (RecipeFragranceWhere, error) {
	return ec.unmarshalInputRecipeFragranceWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx context.Context, v interface{}) (*RecipeFragranceWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeFragranceWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeFragranceWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalORecipeLipid2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v RecipeLipid) graphql.Marshaler {
	return ec._RecipeLipid(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeLipid2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v []*RecipeLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeLipid2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v *RecipeLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeLipid(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeLipidEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidEdge(ctx context.Context, sel ast.SelectionSet, v RecipeLipidEdge) graphql.Marshaler {
	return ec._RecipeLipidEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeLipidEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeLipidEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeLipidEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeLipidEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeLipidEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeLipidEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeLipidFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidFilter(ctx context.Context, v interface{}) (RecipeLipidFilter, error) {
	return ec.unmarshalInputRecipeLipidFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeLipidFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidFilter(ctx context.Context, v interface{}) (*RecipeLipidFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeLipidFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeLipidOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeLipidOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeLipidOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeLipidOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeLipidWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx context.Context, v interface{}) (RecipeLipidWhere, error) {
	return ec.unmarshalInputRecipeLipidWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx context.Context, v interface{}) (*RecipeLipidWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeLipidWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeLipidWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORecipeStep2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v RecipeStep) graphql.Marshaler {
	return ec._RecipeStep(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeStep2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v []*RecipeStep) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeStep2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeStep2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v *RecipeStep) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeStep(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeStepEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepEdge(ctx context.Context, sel ast.SelectionSet, v RecipeStepEdge) graphql.Marshaler {
	return ec._RecipeStepEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalORecipeStepEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepEdge(ctx context.Context, sel ast.SelectionSet, v []*RecipeStepEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeStepEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeStepEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepEdge(ctx context.Context, sel ast.SelectionSet, v *RecipeStepEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeStepEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeStepFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepFilter(ctx context.Context, v interface{}) (RecipeStepFilter, error) {
	return ec.unmarshalInputRecipeStepFilter(ctx, v)
}

func (ec *executionContext) unmarshalORecipeStepFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepFilter(ctx context.Context, v interface{}) (*RecipeStepFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeStepFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeStepOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepOrderingᚄ(ctx context.Context, v interface{}) ([]*RecipeStepOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*RecipeStepOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNRecipeStepOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORecipeStepWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx context.Context, v interface{}) (RecipeStepWhere, error) {
	return ec.unmarshalInputRecipeStepWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx context.Context, v interface{}) (*RecipeStepWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeStepWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeStepWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalORecipeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx context.Context, v interface{}) (RecipeWhere, error) {
	return ec.unmarshalInputRecipeWhere(ctx, v)
}

func (ec *executionContext) unmarshalORecipeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx context.Context, v interface{}) (*RecipeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecipeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐRecipeWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOStringFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx context.Context, v interface{}) (StringFilter, error) {
	return ec.unmarshalInputStringFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx context.Context, v interface{}) (*StringFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐStringFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOSupplier2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalOSupplier2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *Supplier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) marshalOSupplierEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierEdge(ctx context.Context, sel ast.SelectionSet, v SupplierEdge) graphql.Marshaler {
	return ec._SupplierEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOSupplierEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierEdge(ctx context.Context, sel ast.SelectionSet, v []*SupplierEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSupplierEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSupplierEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierEdge(ctx context.Context, sel ast.SelectionSet, v *SupplierEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SupplierEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSupplierFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierFilter(ctx context.Context, v interface{}) (SupplierFilter, error) {
	return ec.unmarshalInputSupplierFilter(ctx, v)
}

func (ec *executionContext) unmarshalOSupplierFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierFilter(ctx context.Context, v interface{}) (*SupplierFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSupplierFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOSupplierOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierOrderingᚄ(ctx context.Context, v interface{}) ([]*SupplierOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*SupplierOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNSupplierOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSupplierWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx context.Context, v interface{}) (SupplierWhere, error) {
	return ec.unmarshalInputSupplierWhere(ctx, v)
}

func (ec *executionContext) unmarshalOSupplierWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx context.Context, v interface{}) (*SupplierWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSupplierWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋissueᚑ38ᚑpluginᚑpanicsᚋgraphql_modelsᚐSupplierWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
