// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_models

type Additive struct {
	ID                  string               `json:"id"`
	Name                string               `json:"name"`
	Note                string               `json:"note"`
	UpdatedAt           int                  `json:"updatedAt"`
	CreatedAt           int                  `json:"createdAt"`
	DeletedAt           *int                 `json:"deletedAt"`
	RecipeAdditive      *RecipeAdditive      `json:"recipeAdditive"`
	RecipeBatchAdditive *RecipeBatchAdditive `json:"recipeBatchAdditive"`
	AdditiveInventories []*AdditiveInventory `json:"additiveInventories"`
}

type AdditiveCreateInput struct {
	Name      string `json:"name"`
	Note      string `json:"note"`
	UpdatedAt int    `json:"updatedAt"`
	CreatedAt int    `json:"createdAt"`
	DeletedAt *int   `json:"deletedAt"`
}

type AdditiveDeletePayload struct {
	ID string `json:"id"`
}

type AdditiveFilter struct {
	Search *string        `json:"search"`
	Where  *AdditiveWhere `json:"where"`
}

type AdditiveInventoriesCreateInput struct {
	AdditiveInventories []*AdditiveInventoryCreateInput `json:"additiveInventories"`
}

type AdditiveInventoriesDeletePayload struct {
	Ids []string `json:"ids"`
}

type AdditiveInventoriesPayload struct {
	AdditiveInventories []*AdditiveInventory `json:"additiveInventories"`
}

type AdditiveInventoriesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AdditiveInventory struct {
	ID           string    `json:"id"`
	PurchaseDate int       `json:"purchaseDate"`
	ExpiryDate   int       `json:"expiryDate"`
	Cost         float64   `json:"cost"`
	Weight       float64   `json:"weight"`
	Additive     *Additive `json:"additive"`
	Supplier     *Supplier `json:"supplier"`
	UpdatedAt    int       `json:"updatedAt"`
	DeletedAt    *int      `json:"deletedAt"`
	CreatedAt    int       `json:"createdAt"`
}

type AdditiveInventoryCreateInput struct {
	PurchaseDate int     `json:"purchaseDate"`
	ExpiryDate   int     `json:"expiryDate"`
	Cost         float64 `json:"cost"`
	Weight       float64 `json:"weight"`
	AdditiveID   string  `json:"additiveId"`
	SupplierID   string  `json:"supplierId"`
	UpdatedAt    int     `json:"updatedAt"`
	DeletedAt    *int    `json:"deletedAt"`
	CreatedAt    int     `json:"createdAt"`
}

type AdditiveInventoryDeletePayload struct {
	ID string `json:"id"`
}

type AdditiveInventoryFilter struct {
	Search *string                 `json:"search"`
	Where  *AdditiveInventoryWhere `json:"where"`
}

type AdditiveInventoryPayload struct {
	AdditiveInventory *AdditiveInventory `json:"additiveInventory"`
}

type AdditiveInventoryUpdateInput struct {
	PurchaseDate *int     `json:"purchaseDate"`
	ExpiryDate   *int     `json:"expiryDate"`
	Cost         *float64 `json:"cost"`
	Weight       *float64 `json:"weight"`
	AdditiveID   *string  `json:"additiveId"`
	SupplierID   *string  `json:"supplierId"`
	UpdatedAt    *int     `json:"updatedAt"`
	DeletedAt    *int     `json:"deletedAt"`
	CreatedAt    *int     `json:"createdAt"`
}

type AdditiveInventoryWhere struct {
	ID           *IDFilter               `json:"id"`
	PurchaseDate *IntFilter              `json:"purchaseDate"`
	ExpiryDate   *IntFilter              `json:"expiryDate"`
	Cost         *FloatFilter            `json:"cost"`
	Weight       *FloatFilter            `json:"weight"`
	Additive     *AdditiveWhere          `json:"additive"`
	Supplier     *SupplierWhere          `json:"supplier"`
	UpdatedAt    *IntFilter              `json:"updatedAt"`
	DeletedAt    *IntFilter              `json:"deletedAt"`
	CreatedAt    *IntFilter              `json:"createdAt"`
	Or           *AdditiveInventoryWhere `json:"or"`
	And          *AdditiveInventoryWhere `json:"and"`
}

type AdditivePayload struct {
	Additive *Additive `json:"additive"`
}

type AdditiveUpdateInput struct {
	Name      *string `json:"name"`
	Note      *string `json:"note"`
	UpdatedAt *int    `json:"updatedAt"`
	CreatedAt *int    `json:"createdAt"`
	DeletedAt *int    `json:"deletedAt"`
}

type AdditiveWhere struct {
	ID                  *IDFilter                 `json:"id"`
	Name                *StringFilter             `json:"name"`
	Note                *StringFilter             `json:"note"`
	UpdatedAt           *IntFilter                `json:"updatedAt"`
	CreatedAt           *IntFilter                `json:"createdAt"`
	DeletedAt           *IntFilter                `json:"deletedAt"`
	RecipeAdditive      *RecipeAdditiveWhere      `json:"recipeAdditive"`
	RecipeBatchAdditive *RecipeBatchAdditiveWhere `json:"recipeBatchAdditive"`
	AdditiveInventories *AdditiveInventoryWhere   `json:"additiveInventories"`
	Or                  *AdditiveWhere            `json:"or"`
	And                 *AdditiveWhere            `json:"and"`
}

type AdditivesCreateInput struct {
	Additives []*AdditiveCreateInput `json:"additives"`
}

type AdditivesDeletePayload struct {
	Ids []string `json:"ids"`
}

type AdditivesPayload struct {
	Additives []*Additive `json:"additives"`
}

type AdditivesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AuthGroup struct {
	ID                        string                 `json:"id"`
	Name                      string                 `json:"name"`
	GroupAuthGroupPermissions []*AuthGroupPermission `json:"groupAuthGroupPermissions"`
	GroupAuthUserGroups       []*AuthUserGroup       `json:"groupAuthUserGroups"`
}

type AuthGroupCreateInput struct {
	Name string `json:"name"`
}

type AuthGroupDeletePayload struct {
	ID string `json:"id"`
}

type AuthGroupFilter struct {
	Search *string         `json:"search"`
	Where  *AuthGroupWhere `json:"where"`
}

type AuthGroupPayload struct {
	AuthGroup *AuthGroup `json:"authGroup"`
}

type AuthGroupPermission struct {
	ID         string          `json:"id"`
	Group      *AuthGroup      `json:"group"`
	Permission *AuthPermission `json:"permission"`
}

type AuthGroupPermissionCreateInput struct {
	GroupID      string `json:"groupId"`
	PermissionID string `json:"permissionId"`
}

type AuthGroupPermissionDeletePayload struct {
	ID string `json:"id"`
}

type AuthGroupPermissionFilter struct {
	Search *string                   `json:"search"`
	Where  *AuthGroupPermissionWhere `json:"where"`
}

type AuthGroupPermissionPayload struct {
	AuthGroupPermission *AuthGroupPermission `json:"authGroupPermission"`
}

type AuthGroupPermissionUpdateInput struct {
	GroupID      *string `json:"groupId"`
	PermissionID *string `json:"permissionId"`
}

type AuthGroupPermissionWhere struct {
	ID         *IDFilter                 `json:"id"`
	Group      *AuthGroupWhere           `json:"group"`
	Permission *AuthPermissionWhere      `json:"permission"`
	Or         *AuthGroupPermissionWhere `json:"or"`
	And        *AuthGroupPermissionWhere `json:"and"`
}

type AuthGroupPermissionsCreateInput struct {
	AuthGroupPermissions []*AuthGroupPermissionCreateInput `json:"authGroupPermissions"`
}

type AuthGroupPermissionsDeletePayload struct {
	Ids []string `json:"ids"`
}

type AuthGroupPermissionsPayload struct {
	AuthGroupPermissions []*AuthGroupPermission `json:"authGroupPermissions"`
}

type AuthGroupPermissionsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AuthGroupUpdateInput struct {
	Name *string `json:"name"`
}

type AuthGroupWhere struct {
	ID                        *IDFilter                 `json:"id"`
	Name                      *StringFilter             `json:"name"`
	GroupAuthGroupPermissions *AuthGroupPermissionWhere `json:"groupAuthGroupPermissions"`
	GroupAuthUserGroups       *AuthUserGroupWhere       `json:"groupAuthUserGroups"`
	Or                        *AuthGroupWhere           `json:"or"`
	And                       *AuthGroupWhere           `json:"and"`
}

type AuthGroupsCreateInput struct {
	AuthGroups []*AuthGroupCreateInput `json:"authGroups"`
}

type AuthGroupsDeletePayload struct {
	Ids []string `json:"ids"`
}

type AuthGroupsPayload struct {
	AuthGroups []*AuthGroup `json:"authGroups"`
}

type AuthGroupsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AuthPermission struct {
	ID                                string                    `json:"id"`
	Name                              string                    `json:"name"`
	ContentTypeID                     string                    `json:"contentTypeId"`
	Codename                          string                    `json:"codename"`
	PermissionAuthGroupPermissions    []*AuthGroupPermission    `json:"permissionAuthGroupPermissions"`
	PermissionAuthUserUserPermissions []*AuthUserUserPermission `json:"permissionAuthUserUserPermissions"`
}

type AuthPermissionCreateInput struct {
	Name          string `json:"name"`
	ContentTypeID string `json:"contentTypeId"`
	Codename      string `json:"codename"`
}

type AuthPermissionDeletePayload struct {
	ID string `json:"id"`
}

type AuthPermissionFilter struct {
	Search *string              `json:"search"`
	Where  *AuthPermissionWhere `json:"where"`
}

type AuthPermissionPayload struct {
	AuthPermission *AuthPermission `json:"authPermission"`
}

type AuthPermissionUpdateInput struct {
	Name          *string `json:"name"`
	ContentTypeID *string `json:"contentTypeId"`
	Codename      *string `json:"codename"`
}

type AuthPermissionWhere struct {
	ID                                *IDFilter                    `json:"id"`
	Name                              *StringFilter                `json:"name"`
	ContentTypeID                     *IDFilter                    `json:"contentTypeId"`
	Codename                          *StringFilter                `json:"codename"`
	PermissionAuthGroupPermissions    *AuthGroupPermissionWhere    `json:"permissionAuthGroupPermissions"`
	PermissionAuthUserUserPermissions *AuthUserUserPermissionWhere `json:"permissionAuthUserUserPermissions"`
	Or                                *AuthPermissionWhere         `json:"or"`
	And                               *AuthPermissionWhere         `json:"and"`
}

type AuthPermissionsCreateInput struct {
	AuthPermissions []*AuthPermissionCreateInput `json:"authPermissions"`
}

type AuthPermissionsDeletePayload struct {
	Ids []string `json:"ids"`
}

type AuthPermissionsPayload struct {
	AuthPermissions []*AuthPermission `json:"authPermissions"`
}

type AuthPermissionsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AuthUser struct {
	ID                          string                    `json:"id"`
	Password                    string                    `json:"password"`
	LastLogin                   *int                      `json:"lastLogin"`
	IsSuperuser                 bool                      `json:"isSuperuser"`
	Username                    string                    `json:"username"`
	FirstName                   string                    `json:"firstName"`
	LastName                    string                    `json:"lastName"`
	Email                       string                    `json:"email"`
	IsStaff                     bool                      `json:"isStaff"`
	IsActive                    bool                      `json:"isActive"`
	DateJoined                  int                       `json:"dateJoined"`
	UserAuthUserGroups          []*AuthUserGroup          `json:"userAuthUserGroups"`
	UserAuthUserUserPermissions []*AuthUserUserPermission `json:"userAuthUserUserPermissions"`
}

type AuthUserCreateInput struct {
	Password    string `json:"password"`
	LastLogin   *int   `json:"lastLogin"`
	IsSuperuser bool   `json:"isSuperuser"`
	Username    string `json:"username"`
	FirstName   string `json:"firstName"`
	LastName    string `json:"lastName"`
	Email       string `json:"email"`
	IsStaff     bool   `json:"isStaff"`
	IsActive    bool   `json:"isActive"`
	DateJoined  int    `json:"dateJoined"`
}

type AuthUserDeletePayload struct {
	ID string `json:"id"`
}

type AuthUserFilter struct {
	Search *string        `json:"search"`
	Where  *AuthUserWhere `json:"where"`
}

type AuthUserGroup struct {
	ID    string     `json:"id"`
	User  *AuthUser  `json:"user"`
	Group *AuthGroup `json:"group"`
}

type AuthUserGroupCreateInput struct {
	UserID  string `json:"userId"`
	GroupID string `json:"groupId"`
}

type AuthUserGroupDeletePayload struct {
	ID string `json:"id"`
}

type AuthUserGroupFilter struct {
	Search *string             `json:"search"`
	Where  *AuthUserGroupWhere `json:"where"`
}

type AuthUserGroupPayload struct {
	AuthUserGroup *AuthUserGroup `json:"authUserGroup"`
}

type AuthUserGroupUpdateInput struct {
	UserID  *string `json:"userId"`
	GroupID *string `json:"groupId"`
}

type AuthUserGroupWhere struct {
	ID    *IDFilter           `json:"id"`
	User  *AuthUserWhere      `json:"user"`
	Group *AuthGroupWhere     `json:"group"`
	Or    *AuthUserGroupWhere `json:"or"`
	And   *AuthUserGroupWhere `json:"and"`
}

type AuthUserGroupsCreateInput struct {
	AuthUserGroups []*AuthUserGroupCreateInput `json:"authUserGroups"`
}

type AuthUserGroupsDeletePayload struct {
	Ids []string `json:"ids"`
}

type AuthUserGroupsPayload struct {
	AuthUserGroups []*AuthUserGroup `json:"authUserGroups"`
}

type AuthUserGroupsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AuthUserPayload struct {
	AuthUser *AuthUser `json:"authUser"`
}

type AuthUserUpdateInput struct {
	Password    *string `json:"password"`
	LastLogin   *int    `json:"lastLogin"`
	IsSuperuser *bool   `json:"isSuperuser"`
	Username    *string `json:"username"`
	FirstName   *string `json:"firstName"`
	LastName    *string `json:"lastName"`
	Email       *string `json:"email"`
	IsStaff     *bool   `json:"isStaff"`
	IsActive    *bool   `json:"isActive"`
	DateJoined  *int    `json:"dateJoined"`
}

type AuthUserUserPermission struct {
	ID         string          `json:"id"`
	User       *AuthUser       `json:"user"`
	Permission *AuthPermission `json:"permission"`
}

type AuthUserUserPermissionCreateInput struct {
	UserID       string `json:"userId"`
	PermissionID string `json:"permissionId"`
}

type AuthUserUserPermissionDeletePayload struct {
	ID string `json:"id"`
}

type AuthUserUserPermissionFilter struct {
	Search *string                      `json:"search"`
	Where  *AuthUserUserPermissionWhere `json:"where"`
}

type AuthUserUserPermissionPayload struct {
	AuthUserUserPermission *AuthUserUserPermission `json:"authUserUserPermission"`
}

type AuthUserUserPermissionUpdateInput struct {
	UserID       *string `json:"userId"`
	PermissionID *string `json:"permissionId"`
}

type AuthUserUserPermissionWhere struct {
	ID         *IDFilter                    `json:"id"`
	User       *AuthUserWhere               `json:"user"`
	Permission *AuthPermissionWhere         `json:"permission"`
	Or         *AuthUserUserPermissionWhere `json:"or"`
	And        *AuthUserUserPermissionWhere `json:"and"`
}

type AuthUserUserPermissionsCreateInput struct {
	AuthUserUserPermissions []*AuthUserUserPermissionCreateInput `json:"authUserUserPermissions"`
}

type AuthUserUserPermissionsDeletePayload struct {
	Ids []string `json:"ids"`
}

type AuthUserUserPermissionsPayload struct {
	AuthUserUserPermissions []*AuthUserUserPermission `json:"authUserUserPermissions"`
}

type AuthUserUserPermissionsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type AuthUserWhere struct {
	ID                          *IDFilter                    `json:"id"`
	Password                    *StringFilter                `json:"password"`
	LastLogin                   *IntFilter                   `json:"lastLogin"`
	IsSuperuser                 *BooleanFilter               `json:"isSuperuser"`
	Username                    *StringFilter                `json:"username"`
	FirstName                   *StringFilter                `json:"firstName"`
	LastName                    *StringFilter                `json:"lastName"`
	Email                       *StringFilter                `json:"email"`
	IsStaff                     *BooleanFilter               `json:"isStaff"`
	IsActive                    *BooleanFilter               `json:"isActive"`
	DateJoined                  *IntFilter                   `json:"dateJoined"`
	UserAuthUserGroups          *AuthUserGroupWhere          `json:"userAuthUserGroups"`
	UserAuthUserUserPermissions *AuthUserUserPermissionWhere `json:"userAuthUserUserPermissions"`
	Or                          *AuthUserWhere               `json:"or"`
	And                         *AuthUserWhere               `json:"and"`
}

type AuthUsersCreateInput struct {
	AuthUsers []*AuthUserCreateInput `json:"authUsers"`
}

type AuthUsersDeletePayload struct {
	Ids []string `json:"ids"`
}

type AuthUsersPayload struct {
	AuthUsers []*AuthUser `json:"authUsers"`
}

type AuthUsersUpdatePayload struct {
	Ok bool `json:"ok"`
}

type BooleanFilter struct {
	EqualTo    *bool `json:"equalTo"`
	NotEqualTo *bool `json:"notEqualTo"`
}

type FloatFilter struct {
	EqualTo           *float64  `json:"equalTo"`
	NotEqualTo        *float64  `json:"notEqualTo"`
	LessThan          *float64  `json:"lessThan"`
	LessThanOrEqualTo *float64  `json:"lessThanOrEqualTo"`
	MoreThan          *float64  `json:"moreThan"`
	MoreThanOrEqualTo *float64  `json:"moreThanOrEqualTo"`
	In                []float64 `json:"in"`
	NotIn             []float64 `json:"notIn"`
}

type Fragrance struct {
	ID                   string                `json:"id"`
	Name                 string                `json:"name"`
	Note                 string                `json:"note"`
	DeletedAt            *int                  `json:"deletedAt"`
	CreatedAt            int                   `json:"createdAt"`
	UpdatedAt            int                   `json:"updatedAt"`
	RecipeBatchFragrance *RecipeBatchFragrance `json:"recipeBatchFragrance"`
	RecipeFragrance      *RecipeFragrance      `json:"recipeFragrance"`
	FragranceInventories []*FragranceInventory `json:"fragranceInventories"`
}

type FragranceCreateInput struct {
	Name      string `json:"name"`
	Note      string `json:"note"`
	DeletedAt *int   `json:"deletedAt"`
	CreatedAt int    `json:"createdAt"`
	UpdatedAt int    `json:"updatedAt"`
}

type FragranceDeletePayload struct {
	ID string `json:"id"`
}

type FragranceFilter struct {
	Search *string         `json:"search"`
	Where  *FragranceWhere `json:"where"`
}

type FragranceInventoriesCreateInput struct {
	FragranceInventories []*FragranceInventoryCreateInput `json:"fragranceInventories"`
}

type FragranceInventoriesDeletePayload struct {
	Ids []string `json:"ids"`
}

type FragranceInventoriesPayload struct {
	FragranceInventories []*FragranceInventory `json:"fragranceInventories"`
}

type FragranceInventoriesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type FragranceInventory struct {
	ID           string     `json:"id"`
	PurchaseDate int        `json:"purchaseDate"`
	ExpiryDate   int        `json:"expiryDate"`
	Cost         float64    `json:"cost"`
	Weight       float64    `json:"weight"`
	Fragrance    *Fragrance `json:"fragrance"`
	Supplier     *Supplier  `json:"supplier"`
	CreatedAt    int        `json:"createdAt"`
	DeletedAt    *int       `json:"deletedAt"`
	UpdatedAt    int        `json:"updatedAt"`
}

type FragranceInventoryCreateInput struct {
	PurchaseDate int     `json:"purchaseDate"`
	ExpiryDate   int     `json:"expiryDate"`
	Cost         float64 `json:"cost"`
	Weight       float64 `json:"weight"`
	FragranceID  string  `json:"fragranceId"`
	SupplierID   string  `json:"supplierId"`
	CreatedAt    int     `json:"createdAt"`
	DeletedAt    *int    `json:"deletedAt"`
	UpdatedAt    int     `json:"updatedAt"`
}

type FragranceInventoryDeletePayload struct {
	ID string `json:"id"`
}

type FragranceInventoryFilter struct {
	Search *string                  `json:"search"`
	Where  *FragranceInventoryWhere `json:"where"`
}

type FragranceInventoryPayload struct {
	FragranceInventory *FragranceInventory `json:"fragranceInventory"`
}

type FragranceInventoryUpdateInput struct {
	PurchaseDate *int     `json:"purchaseDate"`
	ExpiryDate   *int     `json:"expiryDate"`
	Cost         *float64 `json:"cost"`
	Weight       *float64 `json:"weight"`
	FragranceID  *string  `json:"fragranceId"`
	SupplierID   *string  `json:"supplierId"`
	CreatedAt    *int     `json:"createdAt"`
	DeletedAt    *int     `json:"deletedAt"`
	UpdatedAt    *int     `json:"updatedAt"`
}

type FragranceInventoryWhere struct {
	ID           *IDFilter                `json:"id"`
	PurchaseDate *IntFilter               `json:"purchaseDate"`
	ExpiryDate   *IntFilter               `json:"expiryDate"`
	Cost         *FloatFilter             `json:"cost"`
	Weight       *FloatFilter             `json:"weight"`
	Fragrance    *FragranceWhere          `json:"fragrance"`
	Supplier     *SupplierWhere           `json:"supplier"`
	CreatedAt    *IntFilter               `json:"createdAt"`
	DeletedAt    *IntFilter               `json:"deletedAt"`
	UpdatedAt    *IntFilter               `json:"updatedAt"`
	Or           *FragranceInventoryWhere `json:"or"`
	And          *FragranceInventoryWhere `json:"and"`
}

type FragrancePayload struct {
	Fragrance *Fragrance `json:"fragrance"`
}

type FragranceUpdateInput struct {
	Name      *string `json:"name"`
	Note      *string `json:"note"`
	DeletedAt *int    `json:"deletedAt"`
	CreatedAt *int    `json:"createdAt"`
	UpdatedAt *int    `json:"updatedAt"`
}

type FragranceWhere struct {
	ID                   *IDFilter                  `json:"id"`
	Name                 *StringFilter              `json:"name"`
	Note                 *StringFilter              `json:"note"`
	DeletedAt            *IntFilter                 `json:"deletedAt"`
	CreatedAt            *IntFilter                 `json:"createdAt"`
	UpdatedAt            *IntFilter                 `json:"updatedAt"`
	RecipeBatchFragrance *RecipeBatchFragranceWhere `json:"recipeBatchFragrance"`
	RecipeFragrance      *RecipeFragranceWhere      `json:"recipeFragrance"`
	FragranceInventories *FragranceInventoryWhere   `json:"fragranceInventories"`
	Or                   *FragranceWhere            `json:"or"`
	And                  *FragranceWhere            `json:"and"`
}

type FragrancesCreateInput struct {
	Fragrances []*FragranceCreateInput `json:"fragrances"`
}

type FragrancesDeletePayload struct {
	Ids []string `json:"ids"`
}

type FragrancesPayload struct {
	Fragrances []*Fragrance `json:"fragrances"`
}

type FragrancesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type IDFilter struct {
	EqualTo    *string  `json:"equalTo"`
	NotEqualTo *string  `json:"notEqualTo"`
	In         []string `json:"in"`
	NotIn      []string `json:"notIn"`
}

type IntFilter struct {
	EqualTo           *int  `json:"equalTo"`
	NotEqualTo        *int  `json:"notEqualTo"`
	LessThan          *int  `json:"lessThan"`
	LessThanOrEqualTo *int  `json:"lessThanOrEqualTo"`
	MoreThan          *int  `json:"moreThan"`
	MoreThanOrEqualTo *int  `json:"moreThanOrEqualTo"`
	In                []int `json:"in"`
	NotIn             []int `json:"notIn"`
}

type Lipid struct {
	ID               string            `json:"id"`
	Name             string            `json:"name"`
	Lauric           int               `json:"lauric"`
	Myristic         int               `json:"myristic"`
	Palmitic         int               `json:"palmitic"`
	Stearic          int               `json:"stearic"`
	Ricinoleic       int               `json:"ricinoleic"`
	Oleic            int               `json:"oleic"`
	Linoleic         int               `json:"linoleic"`
	Linolenic        int               `json:"linolenic"`
	Hardness         int               `json:"hardness"`
	Cleansing        int               `json:"cleansing"`
	Conditioning     int               `json:"conditioning"`
	Bubbly           int               `json:"bubbly"`
	Creamy           int               `json:"creamy"`
	Iodine           int               `json:"iodine"`
	Ins              int               `json:"ins"`
	InciName         string            `json:"inciName"`
	Family           string            `json:"family"`
	Naoh             float64           `json:"naoh"`
	DeletedAt        *int              `json:"deletedAt"`
	CreatedAt        int               `json:"createdAt"`
	UpdatedAt        int               `json:"updatedAt"`
	RecipeBatchLipid *RecipeBatchLipid `json:"recipeBatchLipid"`
	RecipeLipid      *RecipeLipid      `json:"recipeLipid"`
	LipidInventories []*LipidInventory `json:"lipidInventories"`
}

type LipidCreateInput struct {
	Name         string  `json:"name"`
	Lauric       int     `json:"lauric"`
	Myristic     int     `json:"myristic"`
	Palmitic     int     `json:"palmitic"`
	Stearic      int     `json:"stearic"`
	Ricinoleic   int     `json:"ricinoleic"`
	Oleic        int     `json:"oleic"`
	Linoleic     int     `json:"linoleic"`
	Linolenic    int     `json:"linolenic"`
	Hardness     int     `json:"hardness"`
	Cleansing    int     `json:"cleansing"`
	Conditioning int     `json:"conditioning"`
	Bubbly       int     `json:"bubbly"`
	Creamy       int     `json:"creamy"`
	Iodine       int     `json:"iodine"`
	Ins          int     `json:"ins"`
	InciName     string  `json:"inciName"`
	Family       string  `json:"family"`
	Naoh         float64 `json:"naoh"`
	DeletedAt    *int    `json:"deletedAt"`
	CreatedAt    int     `json:"createdAt"`
	UpdatedAt    int     `json:"updatedAt"`
}

type LipidDeletePayload struct {
	ID string `json:"id"`
}

type LipidFilter struct {
	Search *string     `json:"search"`
	Where  *LipidWhere `json:"where"`
}

type LipidInventoriesCreateInput struct {
	LipidInventories []*LipidInventoryCreateInput `json:"lipidInventories"`
}

type LipidInventoriesDeletePayload struct {
	Ids []string `json:"ids"`
}

type LipidInventoriesPayload struct {
	LipidInventories []*LipidInventory `json:"lipidInventories"`
}

type LipidInventoriesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type LipidInventory struct {
	ID            string    `json:"id"`
	PurchaseDate  int       `json:"purchaseDate"`
	ExpiryDate    int       `json:"expiryDate"`
	Cost          float64   `json:"cost"`
	Weight        float64   `json:"weight"`
	Sap           float64   `json:"sap"`
	Naoh          float64   `json:"naoh"`
	Koh           float64   `json:"koh"`
	GramsPerLiter float64   `json:"gramsPerLiter"`
	Lipid         *Lipid    `json:"lipid"`
	Supplier      *Supplier `json:"supplier"`
	DeletedAt     *int      `json:"deletedAt"`
	UpdatedAt     int       `json:"updatedAt"`
	CreatedAt     int       `json:"createdAt"`
}

type LipidInventoryCreateInput struct {
	PurchaseDate  int     `json:"purchaseDate"`
	ExpiryDate    int     `json:"expiryDate"`
	Cost          float64 `json:"cost"`
	Weight        float64 `json:"weight"`
	Sap           float64 `json:"sap"`
	Naoh          float64 `json:"naoh"`
	Koh           float64 `json:"koh"`
	GramsPerLiter float64 `json:"gramsPerLiter"`
	LipidID       string  `json:"lipidId"`
	SupplierID    string  `json:"supplierId"`
	DeletedAt     *int    `json:"deletedAt"`
	UpdatedAt     int     `json:"updatedAt"`
	CreatedAt     int     `json:"createdAt"`
}

type LipidInventoryDeletePayload struct {
	ID string `json:"id"`
}

type LipidInventoryFilter struct {
	Search *string              `json:"search"`
	Where  *LipidInventoryWhere `json:"where"`
}

type LipidInventoryPayload struct {
	LipidInventory *LipidInventory `json:"lipidInventory"`
}

type LipidInventoryUpdateInput struct {
	PurchaseDate  *int     `json:"purchaseDate"`
	ExpiryDate    *int     `json:"expiryDate"`
	Cost          *float64 `json:"cost"`
	Weight        *float64 `json:"weight"`
	Sap           *float64 `json:"sap"`
	Naoh          *float64 `json:"naoh"`
	Koh           *float64 `json:"koh"`
	GramsPerLiter *float64 `json:"gramsPerLiter"`
	LipidID       *string  `json:"lipidId"`
	SupplierID    *string  `json:"supplierId"`
	DeletedAt     *int     `json:"deletedAt"`
	UpdatedAt     *int     `json:"updatedAt"`
	CreatedAt     *int     `json:"createdAt"`
}

type LipidInventoryWhere struct {
	ID            *IDFilter            `json:"id"`
	PurchaseDate  *IntFilter           `json:"purchaseDate"`
	ExpiryDate    *IntFilter           `json:"expiryDate"`
	Cost          *FloatFilter         `json:"cost"`
	Weight        *FloatFilter         `json:"weight"`
	Sap           *FloatFilter         `json:"sap"`
	Naoh          *FloatFilter         `json:"naoh"`
	Koh           *FloatFilter         `json:"koh"`
	GramsPerLiter *FloatFilter         `json:"gramsPerLiter"`
	Lipid         *LipidWhere          `json:"lipid"`
	Supplier      *SupplierWhere       `json:"supplier"`
	DeletedAt     *IntFilter           `json:"deletedAt"`
	UpdatedAt     *IntFilter           `json:"updatedAt"`
	CreatedAt     *IntFilter           `json:"createdAt"`
	Or            *LipidInventoryWhere `json:"or"`
	And           *LipidInventoryWhere `json:"and"`
}

type LipidPayload struct {
	Lipid *Lipid `json:"lipid"`
}

type LipidUpdateInput struct {
	Name         *string  `json:"name"`
	Lauric       *int     `json:"lauric"`
	Myristic     *int     `json:"myristic"`
	Palmitic     *int     `json:"palmitic"`
	Stearic      *int     `json:"stearic"`
	Ricinoleic   *int     `json:"ricinoleic"`
	Oleic        *int     `json:"oleic"`
	Linoleic     *int     `json:"linoleic"`
	Linolenic    *int     `json:"linolenic"`
	Hardness     *int     `json:"hardness"`
	Cleansing    *int     `json:"cleansing"`
	Conditioning *int     `json:"conditioning"`
	Bubbly       *int     `json:"bubbly"`
	Creamy       *int     `json:"creamy"`
	Iodine       *int     `json:"iodine"`
	Ins          *int     `json:"ins"`
	InciName     *string  `json:"inciName"`
	Family       *string  `json:"family"`
	Naoh         *float64 `json:"naoh"`
	DeletedAt    *int     `json:"deletedAt"`
	CreatedAt    *int     `json:"createdAt"`
	UpdatedAt    *int     `json:"updatedAt"`
}

type LipidWhere struct {
	ID               *IDFilter              `json:"id"`
	Name             *StringFilter          `json:"name"`
	Lauric           *IntFilter             `json:"lauric"`
	Myristic         *IntFilter             `json:"myristic"`
	Palmitic         *IntFilter             `json:"palmitic"`
	Stearic          *IntFilter             `json:"stearic"`
	Ricinoleic       *IntFilter             `json:"ricinoleic"`
	Oleic            *IntFilter             `json:"oleic"`
	Linoleic         *IntFilter             `json:"linoleic"`
	Linolenic        *IntFilter             `json:"linolenic"`
	Hardness         *IntFilter             `json:"hardness"`
	Cleansing        *IntFilter             `json:"cleansing"`
	Conditioning     *IntFilter             `json:"conditioning"`
	Bubbly           *IntFilter             `json:"bubbly"`
	Creamy           *IntFilter             `json:"creamy"`
	Iodine           *IntFilter             `json:"iodine"`
	Ins              *IntFilter             `json:"ins"`
	InciName         *StringFilter          `json:"inciName"`
	Family           *StringFilter          `json:"family"`
	Naoh             *FloatFilter           `json:"naoh"`
	DeletedAt        *IntFilter             `json:"deletedAt"`
	CreatedAt        *IntFilter             `json:"createdAt"`
	UpdatedAt        *IntFilter             `json:"updatedAt"`
	RecipeBatchLipid *RecipeBatchLipidWhere `json:"recipeBatchLipid"`
	RecipeLipid      *RecipeLipidWhere      `json:"recipeLipid"`
	LipidInventories *LipidInventoryWhere   `json:"lipidInventories"`
	Or               *LipidWhere            `json:"or"`
	And              *LipidWhere            `json:"and"`
}

type LipidsCreateInput struct {
	Lipids []*LipidCreateInput `json:"lipids"`
}

type LipidsDeletePayload struct {
	Ids []string `json:"ids"`
}

type LipidsPayload struct {
	Lipids []*Lipid `json:"lipids"`
}

type LipidsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type Lye struct {
	ID             string          `json:"id"`
	Kind           string          `json:"kind"`
	Name           string          `json:"name"`
	Note           string          `json:"note"`
	DeletedAt      *int            `json:"deletedAt"`
	UpdatedAt      int             `json:"updatedAt"`
	CreatedAt      int             `json:"createdAt"`
	RecipeBatchLye *RecipeBatchLye `json:"recipeBatchLye"`
	LyeInventories []*LyeInventory `json:"lyeInventories"`
}

type LyeCreateInput struct {
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Note      string `json:"note"`
	DeletedAt *int   `json:"deletedAt"`
	UpdatedAt int    `json:"updatedAt"`
	CreatedAt int    `json:"createdAt"`
}

type LyeDeletePayload struct {
	ID string `json:"id"`
}

type LyeFilter struct {
	Search *string   `json:"search"`
	Where  *LyeWhere `json:"where"`
}

type LyeInventoriesCreateInput struct {
	LyeInventories []*LyeInventoryCreateInput `json:"lyeInventories"`
}

type LyeInventoriesDeletePayload struct {
	Ids []string `json:"ids"`
}

type LyeInventoriesPayload struct {
	LyeInventories []*LyeInventory `json:"lyeInventories"`
}

type LyeInventoriesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type LyeInventory struct {
	ID            string    `json:"id"`
	PurchaseDate  int       `json:"purchaseDate"`
	ExpiryDate    int       `json:"expiryDate"`
	Cost          float64   `json:"cost"`
	Weight        float64   `json:"weight"`
	Concentration float64   `json:"concentration"`
	Lye           *Lye      `json:"lye"`
	Supplier      *Supplier `json:"supplier"`
	DeletedAt     *int      `json:"deletedAt"`
	UpdatedAt     int       `json:"updatedAt"`
	CreatedAt     int       `json:"createdAt"`
}

type LyeInventoryCreateInput struct {
	PurchaseDate  int     `json:"purchaseDate"`
	ExpiryDate    int     `json:"expiryDate"`
	Cost          float64 `json:"cost"`
	Weight        float64 `json:"weight"`
	Concentration float64 `json:"concentration"`
	LyeID         string  `json:"lyeId"`
	SupplierID    string  `json:"supplierId"`
	DeletedAt     *int    `json:"deletedAt"`
	UpdatedAt     int     `json:"updatedAt"`
	CreatedAt     int     `json:"createdAt"`
}

type LyeInventoryDeletePayload struct {
	ID string `json:"id"`
}

type LyeInventoryFilter struct {
	Search *string            `json:"search"`
	Where  *LyeInventoryWhere `json:"where"`
}

type LyeInventoryPayload struct {
	LyeInventory *LyeInventory `json:"lyeInventory"`
}

type LyeInventoryUpdateInput struct {
	PurchaseDate  *int     `json:"purchaseDate"`
	ExpiryDate    *int     `json:"expiryDate"`
	Cost          *float64 `json:"cost"`
	Weight        *float64 `json:"weight"`
	Concentration *float64 `json:"concentration"`
	LyeID         *string  `json:"lyeId"`
	SupplierID    *string  `json:"supplierId"`
	DeletedAt     *int     `json:"deletedAt"`
	UpdatedAt     *int     `json:"updatedAt"`
	CreatedAt     *int     `json:"createdAt"`
}

type LyeInventoryWhere struct {
	ID            *IDFilter          `json:"id"`
	PurchaseDate  *IntFilter         `json:"purchaseDate"`
	ExpiryDate    *IntFilter         `json:"expiryDate"`
	Cost          *FloatFilter       `json:"cost"`
	Weight        *FloatFilter       `json:"weight"`
	Concentration *FloatFilter       `json:"concentration"`
	Lye           *LyeWhere          `json:"lye"`
	Supplier      *SupplierWhere     `json:"supplier"`
	DeletedAt     *IntFilter         `json:"deletedAt"`
	UpdatedAt     *IntFilter         `json:"updatedAt"`
	CreatedAt     *IntFilter         `json:"createdAt"`
	Or            *LyeInventoryWhere `json:"or"`
	And           *LyeInventoryWhere `json:"and"`
}

type LyePayload struct {
	Lye *Lye `json:"lye"`
}

type LyeUpdateInput struct {
	Kind      *string `json:"kind"`
	Name      *string `json:"name"`
	Note      *string `json:"note"`
	DeletedAt *int    `json:"deletedAt"`
	UpdatedAt *int    `json:"updatedAt"`
	CreatedAt *int    `json:"createdAt"`
}

type LyeWhere struct {
	ID             *IDFilter            `json:"id"`
	Kind           *StringFilter        `json:"kind"`
	Name           *StringFilter        `json:"name"`
	Note           *StringFilter        `json:"note"`
	DeletedAt      *IntFilter           `json:"deletedAt"`
	UpdatedAt      *IntFilter           `json:"updatedAt"`
	CreatedAt      *IntFilter           `json:"createdAt"`
	RecipeBatchLye *RecipeBatchLyeWhere `json:"recipeBatchLye"`
	LyeInventories *LyeInventoryWhere   `json:"lyeInventories"`
	Or             *LyeWhere            `json:"or"`
	And            *LyeWhere            `json:"and"`
}

type LyesCreateInput struct {
	Lyes []*LyeCreateInput `json:"lyes"`
}

type LyesDeletePayload struct {
	Ids []string `json:"ids"`
}

type LyesPayload struct {
	Lyes []*Lye `json:"lyes"`
}

type LyesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type Recipe struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	Note             string             `json:"note"`
	UpdatedAt        int                `json:"updatedAt"`
	DeletedAt        *int               `json:"deletedAt"`
	CreatedAt        int                `json:"createdAt"`
	RecipeAdditives  []*RecipeAdditive  `json:"recipeAdditives"`
	RecipeBatches    []*RecipeBatch     `json:"recipeBatches"`
	RecipeFragrances []*RecipeFragrance `json:"recipeFragrances"`
	RecipeLipids     []*RecipeLipid     `json:"recipeLipids"`
	RecipeSteps      []*RecipeStep      `json:"recipeSteps"`
}

type RecipeAdditive struct {
	ID         string    `json:"id"`
	Percentage float64   `json:"percentage"`
	Additive   *Additive `json:"additive"`
	Recipe     *Recipe   `json:"recipe"`
	CreatedAt  int       `json:"createdAt"`
	UpdatedAt  int       `json:"updatedAt"`
	DeletedAt  *int      `json:"deletedAt"`
}

type RecipeAdditiveCreateInput struct {
	Percentage float64 `json:"percentage"`
	AdditiveID string  `json:"additiveId"`
	RecipeID   string  `json:"recipeId"`
	CreatedAt  int     `json:"createdAt"`
	UpdatedAt  int     `json:"updatedAt"`
	DeletedAt  *int    `json:"deletedAt"`
}

type RecipeAdditiveDeletePayload struct {
	ID string `json:"id"`
}

type RecipeAdditiveFilter struct {
	Search *string              `json:"search"`
	Where  *RecipeAdditiveWhere `json:"where"`
}

type RecipeAdditivePayload struct {
	RecipeAdditive *RecipeAdditive `json:"recipeAdditive"`
}

type RecipeAdditiveUpdateInput struct {
	Percentage *float64 `json:"percentage"`
	AdditiveID *string  `json:"additiveId"`
	RecipeID   *string  `json:"recipeId"`
	CreatedAt  *int     `json:"createdAt"`
	UpdatedAt  *int     `json:"updatedAt"`
	DeletedAt  *int     `json:"deletedAt"`
}

type RecipeAdditiveWhere struct {
	ID         *IDFilter            `json:"id"`
	Percentage *FloatFilter         `json:"percentage"`
	Additive   *AdditiveWhere       `json:"additive"`
	Recipe     *RecipeWhere         `json:"recipe"`
	CreatedAt  *IntFilter           `json:"createdAt"`
	UpdatedAt  *IntFilter           `json:"updatedAt"`
	DeletedAt  *IntFilter           `json:"deletedAt"`
	Or         *RecipeAdditiveWhere `json:"or"`
	And        *RecipeAdditiveWhere `json:"and"`
}

type RecipeAdditivesCreateInput struct {
	RecipeAdditives []*RecipeAdditiveCreateInput `json:"recipeAdditives"`
}

type RecipeAdditivesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeAdditivesPayload struct {
	RecipeAdditives []*RecipeAdditive `json:"recipeAdditives"`
}

type RecipeAdditivesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeBatch struct {
	ID                         string                  `json:"id"`
	Tag                        string                  `json:"tag"`
	ProductionDate             int                     `json:"productionDate"`
	SellableDate               int                     `json:"sellableDate"`
	Note                       string                  `json:"note"`
	LipidWeight                float64                 `json:"lipidWeight"`
	ProductionWeight           float64                 `json:"productionWeight"`
	CuredWeight                float64                 `json:"curedWeight"`
	Recipe                     *Recipe                 `json:"recipe"`
	CreatedAt                  int                     `json:"createdAt"`
	DeletedAt                  *int                    `json:"deletedAt"`
	UpdatedAt                  int                     `json:"updatedAt"`
	BatchRecipeBatchAdditives  []*RecipeBatchAdditive  `json:"batchRecipeBatchAdditives"`
	BatchRecipeBatchFragrances []*RecipeBatchFragrance `json:"batchRecipeBatchFragrances"`
	BatchRecipeBatchLipids     []*RecipeBatchLipid     `json:"batchRecipeBatchLipids"`
	BatchRecipeBatchLyes       []*RecipeBatchLye       `json:"batchRecipeBatchLyes"`
	BatchRecipeBatchNotes      []*RecipeBatchNote      `json:"batchRecipeBatchNotes"`
}

type RecipeBatchAdditive struct {
	ID        string       `json:"id"`
	Weight    float64      `json:"weight"`
	Cost      float64      `json:"cost"`
	Additive  *Additive    `json:"additive"`
	Batch     *RecipeBatch `json:"batch"`
	CreatedAt int          `json:"createdAt"`
	DeletedAt *int         `json:"deletedAt"`
	UpdatedAt int          `json:"updatedAt"`
}

type RecipeBatchAdditiveCreateInput struct {
	Weight     float64 `json:"weight"`
	Cost       float64 `json:"cost"`
	AdditiveID string  `json:"additiveId"`
	BatchID    string  `json:"batchId"`
	CreatedAt  int     `json:"createdAt"`
	DeletedAt  *int    `json:"deletedAt"`
	UpdatedAt  int     `json:"updatedAt"`
}

type RecipeBatchAdditiveDeletePayload struct {
	ID string `json:"id"`
}

type RecipeBatchAdditiveFilter struct {
	Search *string                   `json:"search"`
	Where  *RecipeBatchAdditiveWhere `json:"where"`
}

type RecipeBatchAdditivePayload struct {
	RecipeBatchAdditive *RecipeBatchAdditive `json:"recipeBatchAdditive"`
}

type RecipeBatchAdditiveUpdateInput struct {
	Weight     *float64 `json:"weight"`
	Cost       *float64 `json:"cost"`
	AdditiveID *string  `json:"additiveId"`
	BatchID    *string  `json:"batchId"`
	CreatedAt  *int     `json:"createdAt"`
	DeletedAt  *int     `json:"deletedAt"`
	UpdatedAt  *int     `json:"updatedAt"`
}

type RecipeBatchAdditiveWhere struct {
	ID        *IDFilter                 `json:"id"`
	Weight    *FloatFilter              `json:"weight"`
	Cost      *FloatFilter              `json:"cost"`
	Additive  *AdditiveWhere            `json:"additive"`
	Batch     *RecipeBatchWhere         `json:"batch"`
	CreatedAt *IntFilter                `json:"createdAt"`
	DeletedAt *IntFilter                `json:"deletedAt"`
	UpdatedAt *IntFilter                `json:"updatedAt"`
	Or        *RecipeBatchAdditiveWhere `json:"or"`
	And       *RecipeBatchAdditiveWhere `json:"and"`
}

type RecipeBatchAdditivesCreateInput struct {
	RecipeBatchAdditives []*RecipeBatchAdditiveCreateInput `json:"recipeBatchAdditives"`
}

type RecipeBatchAdditivesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeBatchAdditivesPayload struct {
	RecipeBatchAdditives []*RecipeBatchAdditive `json:"recipeBatchAdditives"`
}

type RecipeBatchAdditivesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeBatchCreateInput struct {
	Tag              string  `json:"tag"`
	ProductionDate   int     `json:"productionDate"`
	SellableDate     int     `json:"sellableDate"`
	Note             string  `json:"note"`
	LipidWeight      float64 `json:"lipidWeight"`
	ProductionWeight float64 `json:"productionWeight"`
	CuredWeight      float64 `json:"curedWeight"`
	RecipeID         string  `json:"recipeId"`
	CreatedAt        int     `json:"createdAt"`
	DeletedAt        *int    `json:"deletedAt"`
	UpdatedAt        int     `json:"updatedAt"`
}

type RecipeBatchDeletePayload struct {
	ID string `json:"id"`
}

type RecipeBatchFilter struct {
	Search *string           `json:"search"`
	Where  *RecipeBatchWhere `json:"where"`
}

type RecipeBatchFragrance struct {
	ID        string       `json:"id"`
	Weight    float64      `json:"weight"`
	Cost      float64      `json:"cost"`
	Fragrance *Fragrance   `json:"fragrance"`
	Batch     *RecipeBatch `json:"batch"`
	CreatedAt int          `json:"createdAt"`
	DeletedAt *int         `json:"deletedAt"`
	UpdatedAt int          `json:"updatedAt"`
}

type RecipeBatchFragranceCreateInput struct {
	Weight      float64 `json:"weight"`
	Cost        float64 `json:"cost"`
	FragranceID string  `json:"fragranceId"`
	BatchID     string  `json:"batchId"`
	CreatedAt   int     `json:"createdAt"`
	DeletedAt   *int    `json:"deletedAt"`
	UpdatedAt   int     `json:"updatedAt"`
}

type RecipeBatchFragranceDeletePayload struct {
	ID string `json:"id"`
}

type RecipeBatchFragranceFilter struct {
	Search *string                    `json:"search"`
	Where  *RecipeBatchFragranceWhere `json:"where"`
}

type RecipeBatchFragrancePayload struct {
	RecipeBatchFragrance *RecipeBatchFragrance `json:"recipeBatchFragrance"`
}

type RecipeBatchFragranceUpdateInput struct {
	Weight      *float64 `json:"weight"`
	Cost        *float64 `json:"cost"`
	FragranceID *string  `json:"fragranceId"`
	BatchID     *string  `json:"batchId"`
	CreatedAt   *int     `json:"createdAt"`
	DeletedAt   *int     `json:"deletedAt"`
	UpdatedAt   *int     `json:"updatedAt"`
}

type RecipeBatchFragranceWhere struct {
	ID        *IDFilter                  `json:"id"`
	Weight    *FloatFilter               `json:"weight"`
	Cost      *FloatFilter               `json:"cost"`
	Fragrance *FragranceWhere            `json:"fragrance"`
	Batch     *RecipeBatchWhere          `json:"batch"`
	CreatedAt *IntFilter                 `json:"createdAt"`
	DeletedAt *IntFilter                 `json:"deletedAt"`
	UpdatedAt *IntFilter                 `json:"updatedAt"`
	Or        *RecipeBatchFragranceWhere `json:"or"`
	And       *RecipeBatchFragranceWhere `json:"and"`
}

type RecipeBatchFragrancesCreateInput struct {
	RecipeBatchFragrances []*RecipeBatchFragranceCreateInput `json:"recipeBatchFragrances"`
}

type RecipeBatchFragrancesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeBatchFragrancesPayload struct {
	RecipeBatchFragrances []*RecipeBatchFragrance `json:"recipeBatchFragrances"`
}

type RecipeBatchFragrancesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeBatchLipid struct {
	ID        string       `json:"id"`
	Weight    float64      `json:"weight"`
	Cost      float64      `json:"cost"`
	Lipid     *Lipid       `json:"lipid"`
	Batch     *RecipeBatch `json:"batch"`
	CreatedAt int          `json:"createdAt"`
	UpdatedAt int          `json:"updatedAt"`
	DeletedAt *int         `json:"deletedAt"`
}

type RecipeBatchLipidCreateInput struct {
	Weight    float64 `json:"weight"`
	Cost      float64 `json:"cost"`
	LipidID   string  `json:"lipidId"`
	BatchID   string  `json:"batchId"`
	CreatedAt int     `json:"createdAt"`
	UpdatedAt int     `json:"updatedAt"`
	DeletedAt *int    `json:"deletedAt"`
}

type RecipeBatchLipidDeletePayload struct {
	ID string `json:"id"`
}

type RecipeBatchLipidFilter struct {
	Search *string                `json:"search"`
	Where  *RecipeBatchLipidWhere `json:"where"`
}

type RecipeBatchLipidPayload struct {
	RecipeBatchLipid *RecipeBatchLipid `json:"recipeBatchLipid"`
}

type RecipeBatchLipidUpdateInput struct {
	Weight    *float64 `json:"weight"`
	Cost      *float64 `json:"cost"`
	LipidID   *string  `json:"lipidId"`
	BatchID   *string  `json:"batchId"`
	CreatedAt *int     `json:"createdAt"`
	UpdatedAt *int     `json:"updatedAt"`
	DeletedAt *int     `json:"deletedAt"`
}

type RecipeBatchLipidWhere struct {
	ID        *IDFilter              `json:"id"`
	Weight    *FloatFilter           `json:"weight"`
	Cost      *FloatFilter           `json:"cost"`
	Lipid     *LipidWhere            `json:"lipid"`
	Batch     *RecipeBatchWhere      `json:"batch"`
	CreatedAt *IntFilter             `json:"createdAt"`
	UpdatedAt *IntFilter             `json:"updatedAt"`
	DeletedAt *IntFilter             `json:"deletedAt"`
	Or        *RecipeBatchLipidWhere `json:"or"`
	And       *RecipeBatchLipidWhere `json:"and"`
}

type RecipeBatchLipidsCreateInput struct {
	RecipeBatchLipids []*RecipeBatchLipidCreateInput `json:"recipeBatchLipids"`
}

type RecipeBatchLipidsDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeBatchLipidsPayload struct {
	RecipeBatchLipids []*RecipeBatchLipid `json:"recipeBatchLipids"`
}

type RecipeBatchLipidsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeBatchLye struct {
	ID        string       `json:"id"`
	Weight    float64      `json:"weight"`
	Discount  float64      `json:"discount"`
	Cost      float64      `json:"cost"`
	Lye       *Lye         `json:"lye"`
	Batch     *RecipeBatch `json:"batch"`
	CreatedAt int          `json:"createdAt"`
	DeletedAt *int         `json:"deletedAt"`
	UpdatedAt int          `json:"updatedAt"`
}

type RecipeBatchLyeCreateInput struct {
	Weight    float64 `json:"weight"`
	Discount  float64 `json:"discount"`
	Cost      float64 `json:"cost"`
	LyeID     string  `json:"lyeId"`
	BatchID   string  `json:"batchId"`
	CreatedAt int     `json:"createdAt"`
	DeletedAt *int    `json:"deletedAt"`
	UpdatedAt int     `json:"updatedAt"`
}

type RecipeBatchLyeDeletePayload struct {
	ID string `json:"id"`
}

type RecipeBatchLyeFilter struct {
	Search *string              `json:"search"`
	Where  *RecipeBatchLyeWhere `json:"where"`
}

type RecipeBatchLyePayload struct {
	RecipeBatchLye *RecipeBatchLye `json:"recipeBatchLye"`
}

type RecipeBatchLyeUpdateInput struct {
	Weight    *float64 `json:"weight"`
	Discount  *float64 `json:"discount"`
	Cost      *float64 `json:"cost"`
	LyeID     *string  `json:"lyeId"`
	BatchID   *string  `json:"batchId"`
	CreatedAt *int     `json:"createdAt"`
	DeletedAt *int     `json:"deletedAt"`
	UpdatedAt *int     `json:"updatedAt"`
}

type RecipeBatchLyeWhere struct {
	ID        *IDFilter            `json:"id"`
	Weight    *FloatFilter         `json:"weight"`
	Discount  *FloatFilter         `json:"discount"`
	Cost      *FloatFilter         `json:"cost"`
	Lye       *LyeWhere            `json:"lye"`
	Batch     *RecipeBatchWhere    `json:"batch"`
	CreatedAt *IntFilter           `json:"createdAt"`
	DeletedAt *IntFilter           `json:"deletedAt"`
	UpdatedAt *IntFilter           `json:"updatedAt"`
	Or        *RecipeBatchLyeWhere `json:"or"`
	And       *RecipeBatchLyeWhere `json:"and"`
}

type RecipeBatchLyesCreateInput struct {
	RecipeBatchLyes []*RecipeBatchLyeCreateInput `json:"recipeBatchLyes"`
}

type RecipeBatchLyesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeBatchLyesPayload struct {
	RecipeBatchLyes []*RecipeBatchLye `json:"recipeBatchLyes"`
}

type RecipeBatchLyesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeBatchNote struct {
	ID        string       `json:"id"`
	Note      string       `json:"note"`
	Link      string       `json:"link"`
	Batch     *RecipeBatch `json:"batch"`
	DeletedAt *int         `json:"deletedAt"`
	CreatedAt int          `json:"createdAt"`
	UpdatedAt int          `json:"updatedAt"`
}

type RecipeBatchNoteCreateInput struct {
	Note      string `json:"note"`
	Link      string `json:"link"`
	BatchID   string `json:"batchId"`
	DeletedAt *int   `json:"deletedAt"`
	CreatedAt int    `json:"createdAt"`
	UpdatedAt int    `json:"updatedAt"`
}

type RecipeBatchNoteDeletePayload struct {
	ID string `json:"id"`
}

type RecipeBatchNoteFilter struct {
	Search *string               `json:"search"`
	Where  *RecipeBatchNoteWhere `json:"where"`
}

type RecipeBatchNotePayload struct {
	RecipeBatchNote *RecipeBatchNote `json:"recipeBatchNote"`
}

type RecipeBatchNoteUpdateInput struct {
	Note      *string `json:"note"`
	Link      *string `json:"link"`
	BatchID   *string `json:"batchId"`
	DeletedAt *int    `json:"deletedAt"`
	CreatedAt *int    `json:"createdAt"`
	UpdatedAt *int    `json:"updatedAt"`
}

type RecipeBatchNoteWhere struct {
	ID        *IDFilter             `json:"id"`
	Note      *StringFilter         `json:"note"`
	Link      *StringFilter         `json:"link"`
	Batch     *RecipeBatchWhere     `json:"batch"`
	DeletedAt *IntFilter            `json:"deletedAt"`
	CreatedAt *IntFilter            `json:"createdAt"`
	UpdatedAt *IntFilter            `json:"updatedAt"`
	Or        *RecipeBatchNoteWhere `json:"or"`
	And       *RecipeBatchNoteWhere `json:"and"`
}

type RecipeBatchNotesCreateInput struct {
	RecipeBatchNotes []*RecipeBatchNoteCreateInput `json:"recipeBatchNotes"`
}

type RecipeBatchNotesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeBatchNotesPayload struct {
	RecipeBatchNotes []*RecipeBatchNote `json:"recipeBatchNotes"`
}

type RecipeBatchNotesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeBatchPayload struct {
	RecipeBatch *RecipeBatch `json:"recipeBatch"`
}

type RecipeBatchUpdateInput struct {
	Tag              *string  `json:"tag"`
	ProductionDate   *int     `json:"productionDate"`
	SellableDate     *int     `json:"sellableDate"`
	Note             *string  `json:"note"`
	LipidWeight      *float64 `json:"lipidWeight"`
	ProductionWeight *float64 `json:"productionWeight"`
	CuredWeight      *float64 `json:"curedWeight"`
	RecipeID         *string  `json:"recipeId"`
	CreatedAt        *int     `json:"createdAt"`
	DeletedAt        *int     `json:"deletedAt"`
	UpdatedAt        *int     `json:"updatedAt"`
}

type RecipeBatchWhere struct {
	ID                         *IDFilter                  `json:"id"`
	Tag                        *StringFilter              `json:"tag"`
	ProductionDate             *IntFilter                 `json:"productionDate"`
	SellableDate               *IntFilter                 `json:"sellableDate"`
	Note                       *StringFilter              `json:"note"`
	LipidWeight                *FloatFilter               `json:"lipidWeight"`
	ProductionWeight           *FloatFilter               `json:"productionWeight"`
	CuredWeight                *FloatFilter               `json:"curedWeight"`
	Recipe                     *RecipeWhere               `json:"recipe"`
	CreatedAt                  *IntFilter                 `json:"createdAt"`
	DeletedAt                  *IntFilter                 `json:"deletedAt"`
	UpdatedAt                  *IntFilter                 `json:"updatedAt"`
	BatchRecipeBatchAdditives  *RecipeBatchAdditiveWhere  `json:"batchRecipeBatchAdditives"`
	BatchRecipeBatchFragrances *RecipeBatchFragranceWhere `json:"batchRecipeBatchFragrances"`
	BatchRecipeBatchLipids     *RecipeBatchLipidWhere     `json:"batchRecipeBatchLipids"`
	BatchRecipeBatchLyes       *RecipeBatchLyeWhere       `json:"batchRecipeBatchLyes"`
	BatchRecipeBatchNotes      *RecipeBatchNoteWhere      `json:"batchRecipeBatchNotes"`
	Or                         *RecipeBatchWhere          `json:"or"`
	And                        *RecipeBatchWhere          `json:"and"`
}

type RecipeBatchesCreateInput struct {
	RecipeBatches []*RecipeBatchCreateInput `json:"recipeBatches"`
}

type RecipeBatchesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeBatchesPayload struct {
	RecipeBatches []*RecipeBatch `json:"recipeBatches"`
}

type RecipeBatchesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeCreateInput struct {
	Name      string `json:"name"`
	Note      string `json:"note"`
	UpdatedAt int    `json:"updatedAt"`
	DeletedAt *int   `json:"deletedAt"`
	CreatedAt int    `json:"createdAt"`
}

type RecipeDeletePayload struct {
	ID string `json:"id"`
}

type RecipeFilter struct {
	Search *string      `json:"search"`
	Where  *RecipeWhere `json:"where"`
}

type RecipeFragrance struct {
	ID         string     `json:"id"`
	Percentage float64    `json:"percentage"`
	Fragrance  *Fragrance `json:"fragrance"`
	Recipe     *Recipe    `json:"recipe"`
	DeletedAt  *int       `json:"deletedAt"`
	UpdatedAt  int        `json:"updatedAt"`
	CreatedAt  int        `json:"createdAt"`
}

type RecipeFragranceCreateInput struct {
	Percentage  float64 `json:"percentage"`
	FragranceID string  `json:"fragranceId"`
	RecipeID    string  `json:"recipeId"`
	DeletedAt   *int    `json:"deletedAt"`
	UpdatedAt   int     `json:"updatedAt"`
	CreatedAt   int     `json:"createdAt"`
}

type RecipeFragranceDeletePayload struct {
	ID string `json:"id"`
}

type RecipeFragranceFilter struct {
	Search *string               `json:"search"`
	Where  *RecipeFragranceWhere `json:"where"`
}

type RecipeFragrancePayload struct {
	RecipeFragrance *RecipeFragrance `json:"recipeFragrance"`
}

type RecipeFragranceUpdateInput struct {
	Percentage  *float64 `json:"percentage"`
	FragranceID *string  `json:"fragranceId"`
	RecipeID    *string  `json:"recipeId"`
	DeletedAt   *int     `json:"deletedAt"`
	UpdatedAt   *int     `json:"updatedAt"`
	CreatedAt   *int     `json:"createdAt"`
}

type RecipeFragranceWhere struct {
	ID         *IDFilter             `json:"id"`
	Percentage *FloatFilter          `json:"percentage"`
	Fragrance  *FragranceWhere       `json:"fragrance"`
	Recipe     *RecipeWhere          `json:"recipe"`
	DeletedAt  *IntFilter            `json:"deletedAt"`
	UpdatedAt  *IntFilter            `json:"updatedAt"`
	CreatedAt  *IntFilter            `json:"createdAt"`
	Or         *RecipeFragranceWhere `json:"or"`
	And        *RecipeFragranceWhere `json:"and"`
}

type RecipeFragrancesCreateInput struct {
	RecipeFragrances []*RecipeFragranceCreateInput `json:"recipeFragrances"`
}

type RecipeFragrancesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeFragrancesPayload struct {
	RecipeFragrances []*RecipeFragrance `json:"recipeFragrances"`
}

type RecipeFragrancesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeLipid struct {
	ID         string  `json:"id"`
	Percentage float64 `json:"percentage"`
	Lipid      *Lipid  `json:"lipid"`
	Recipe     *Recipe `json:"recipe"`
	UpdatedAt  int     `json:"updatedAt"`
	DeletedAt  *int    `json:"deletedAt"`
	CreatedAt  int     `json:"createdAt"`
}

type RecipeLipidCreateInput struct {
	Percentage float64 `json:"percentage"`
	LipidID    string  `json:"lipidId"`
	RecipeID   string  `json:"recipeId"`
	UpdatedAt  int     `json:"updatedAt"`
	DeletedAt  *int    `json:"deletedAt"`
	CreatedAt  int     `json:"createdAt"`
}

type RecipeLipidDeletePayload struct {
	ID string `json:"id"`
}

type RecipeLipidFilter struct {
	Search *string           `json:"search"`
	Where  *RecipeLipidWhere `json:"where"`
}

type RecipeLipidPayload struct {
	RecipeLipid *RecipeLipid `json:"recipeLipid"`
}

type RecipeLipidUpdateInput struct {
	Percentage *float64 `json:"percentage"`
	LipidID    *string  `json:"lipidId"`
	RecipeID   *string  `json:"recipeId"`
	UpdatedAt  *int     `json:"updatedAt"`
	DeletedAt  *int     `json:"deletedAt"`
	CreatedAt  *int     `json:"createdAt"`
}

type RecipeLipidWhere struct {
	ID         *IDFilter         `json:"id"`
	Percentage *FloatFilter      `json:"percentage"`
	Lipid      *LipidWhere       `json:"lipid"`
	Recipe     *RecipeWhere      `json:"recipe"`
	UpdatedAt  *IntFilter        `json:"updatedAt"`
	DeletedAt  *IntFilter        `json:"deletedAt"`
	CreatedAt  *IntFilter        `json:"createdAt"`
	Or         *RecipeLipidWhere `json:"or"`
	And        *RecipeLipidWhere `json:"and"`
}

type RecipeLipidsCreateInput struct {
	RecipeLipids []*RecipeLipidCreateInput `json:"recipeLipids"`
}

type RecipeLipidsDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeLipidsPayload struct {
	RecipeLipids []*RecipeLipid `json:"recipeLipids"`
}

type RecipeLipidsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipePayload struct {
	Recipe *Recipe `json:"recipe"`
}

type RecipeStep struct {
	ID        string  `json:"id"`
	Num       int     `json:"num"`
	Note      string  `json:"note"`
	Recipe    *Recipe `json:"recipe"`
	UpdatedAt int     `json:"updatedAt"`
	DeletedAt *int    `json:"deletedAt"`
	CreatedAt int     `json:"createdAt"`
}

type RecipeStepCreateInput struct {
	Num       int    `json:"num"`
	Note      string `json:"note"`
	RecipeID  string `json:"recipeId"`
	UpdatedAt int    `json:"updatedAt"`
	DeletedAt *int   `json:"deletedAt"`
	CreatedAt int    `json:"createdAt"`
}

type RecipeStepDeletePayload struct {
	ID string `json:"id"`
}

type RecipeStepFilter struct {
	Search *string          `json:"search"`
	Where  *RecipeStepWhere `json:"where"`
}

type RecipeStepPayload struct {
	RecipeStep *RecipeStep `json:"recipeStep"`
}

type RecipeStepUpdateInput struct {
	Num       *int    `json:"num"`
	Note      *string `json:"note"`
	RecipeID  *string `json:"recipeId"`
	UpdatedAt *int    `json:"updatedAt"`
	DeletedAt *int    `json:"deletedAt"`
	CreatedAt *int    `json:"createdAt"`
}

type RecipeStepWhere struct {
	ID        *IDFilter        `json:"id"`
	Num       *IntFilter       `json:"num"`
	Note      *StringFilter    `json:"note"`
	Recipe    *RecipeWhere     `json:"recipe"`
	UpdatedAt *IntFilter       `json:"updatedAt"`
	DeletedAt *IntFilter       `json:"deletedAt"`
	CreatedAt *IntFilter       `json:"createdAt"`
	Or        *RecipeStepWhere `json:"or"`
	And       *RecipeStepWhere `json:"and"`
}

type RecipeStepsCreateInput struct {
	RecipeSteps []*RecipeStepCreateInput `json:"recipeSteps"`
}

type RecipeStepsDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipeStepsPayload struct {
	RecipeSteps []*RecipeStep `json:"recipeSteps"`
}

type RecipeStepsUpdatePayload struct {
	Ok bool `json:"ok"`
}

type RecipeUpdateInput struct {
	Name      *string `json:"name"`
	Note      *string `json:"note"`
	UpdatedAt *int    `json:"updatedAt"`
	DeletedAt *int    `json:"deletedAt"`
	CreatedAt *int    `json:"createdAt"`
}

type RecipeWhere struct {
	ID               *IDFilter             `json:"id"`
	Name             *StringFilter         `json:"name"`
	Note             *StringFilter         `json:"note"`
	UpdatedAt        *IntFilter            `json:"updatedAt"`
	DeletedAt        *IntFilter            `json:"deletedAt"`
	CreatedAt        *IntFilter            `json:"createdAt"`
	RecipeAdditives  *RecipeAdditiveWhere  `json:"recipeAdditives"`
	RecipeBatches    *RecipeBatchWhere     `json:"recipeBatches"`
	RecipeFragrances *RecipeFragranceWhere `json:"recipeFragrances"`
	RecipeLipids     *RecipeLipidWhere     `json:"recipeLipids"`
	RecipeSteps      *RecipeStepWhere      `json:"recipeSteps"`
	Or               *RecipeWhere          `json:"or"`
	And              *RecipeWhere          `json:"and"`
}

type RecipesCreateInput struct {
	Recipes []*RecipeCreateInput `json:"recipes"`
}

type RecipesDeletePayload struct {
	Ids []string `json:"ids"`
}

type RecipesPayload struct {
	Recipes []*Recipe `json:"recipes"`
}

type RecipesUpdatePayload struct {
	Ok bool `json:"ok"`
}

type StringFilter struct {
	EqualTo            *string  `json:"equalTo"`
	NotEqualTo         *string  `json:"notEqualTo"`
	In                 []string `json:"in"`
	NotIn              []string `json:"notIn"`
	StartWith          *string  `json:"startWith"`
	NotStartWith       *string  `json:"notStartWith"`
	EndWith            *string  `json:"endWith"`
	NotEndWith         *string  `json:"notEndWith"`
	Contain            *string  `json:"contain"`
	NotContain         *string  `json:"notContain"`
	StartWithStrict    *string  `json:"startWithStrict"`
	NotStartWithStrict *string  `json:"notStartWithStrict"`
	EndWithStrict      *string  `json:"endWithStrict"`
	NotEndWithStrict   *string  `json:"notEndWithStrict"`
	ContainStrict      *string  `json:"containStrict"`
	NotContainStrict   *string  `json:"notContainStrict"`
}

type Supplier struct {
	ID                   string                `json:"id"`
	Name                 string                `json:"name"`
	Website              string                `json:"website"`
	Note                 string                `json:"note"`
	CreatedAt            int                   `json:"createdAt"`
	DeletedAt            *int                  `json:"deletedAt"`
	UpdatedAt            int                   `json:"updatedAt"`
	AdditiveInventories  []*AdditiveInventory  `json:"additiveInventories"`
	FragranceInventories []*FragranceInventory `json:"fragranceInventories"`
	LipidInventories     []*LipidInventory     `json:"lipidInventories"`
	LyeInventories       []*LyeInventory       `json:"lyeInventories"`
}

type SupplierCreateInput struct {
	Name      string `json:"name"`
	Website   string `json:"website"`
	Note      string `json:"note"`
	CreatedAt int    `json:"createdAt"`
	DeletedAt *int   `json:"deletedAt"`
	UpdatedAt int    `json:"updatedAt"`
}

type SupplierDeletePayload struct {
	ID string `json:"id"`
}

type SupplierFilter struct {
	Search *string        `json:"search"`
	Where  *SupplierWhere `json:"where"`
}

type SupplierPayload struct {
	Supplier *Supplier `json:"supplier"`
}

type SupplierUpdateInput struct {
	Name      *string `json:"name"`
	Website   *string `json:"website"`
	Note      *string `json:"note"`
	CreatedAt *int    `json:"createdAt"`
	DeletedAt *int    `json:"deletedAt"`
	UpdatedAt *int    `json:"updatedAt"`
}

type SupplierWhere struct {
	ID                   *IDFilter                `json:"id"`
	Name                 *StringFilter            `json:"name"`
	Website              *StringFilter            `json:"website"`
	Note                 *StringFilter            `json:"note"`
	CreatedAt            *IntFilter               `json:"createdAt"`
	DeletedAt            *IntFilter               `json:"deletedAt"`
	UpdatedAt            *IntFilter               `json:"updatedAt"`
	AdditiveInventories  *AdditiveInventoryWhere  `json:"additiveInventories"`
	FragranceInventories *FragranceInventoryWhere `json:"fragranceInventories"`
	LipidInventories     *LipidInventoryWhere     `json:"lipidInventories"`
	LyeInventories       *LyeInventoryWhere       `json:"lyeInventories"`
	Or                   *SupplierWhere           `json:"or"`
	And                  *SupplierWhere           `json:"and"`
}

type SuppliersCreateInput struct {
	Suppliers []*SupplierCreateInput `json:"suppliers"`
}

type SuppliersDeletePayload struct {
	Ids []string `json:"ids"`
}

type SuppliersPayload struct {
	Suppliers []*Supplier `json:"suppliers"`
}

type SuppliersUpdatePayload struct {
	Ok bool `json:"ok"`
}
