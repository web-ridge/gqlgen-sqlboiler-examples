// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testImageVariations(t *testing.T) {
	t.Parallel()

	query := ImageVariations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testImageVariationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageVariationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ImageVariations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageVariationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageVariationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testImageVariationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ImageVariationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ImageVariation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ImageVariationExists to return true, but got false.")
	}
}

func testImageVariationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	imageVariationFound, err := FindImageVariation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if imageVariationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testImageVariationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ImageVariations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testImageVariationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ImageVariations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testImageVariationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	imageVariationOne := &ImageVariation{}
	imageVariationTwo := &ImageVariation{}
	if err = randomize.Struct(seed, imageVariationOne, imageVariationDBTypes, false, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, imageVariationTwo, imageVariationDBTypes, false, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageVariationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageVariationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageVariations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testImageVariationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	imageVariationOne := &ImageVariation{}
	imageVariationTwo := &ImageVariation{}
	if err = randomize.Struct(seed, imageVariationOne, imageVariationDBTypes, false, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, imageVariationTwo, imageVariationDBTypes, false, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = imageVariationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = imageVariationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func imageVariationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func imageVariationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ImageVariation) error {
	*o = ImageVariation{}
	return nil
}

func testImageVariationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ImageVariation{}
	o := &ImageVariation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, imageVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageVariation object: %s", err)
	}

	AddImageVariationHook(boil.BeforeInsertHook, imageVariationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	imageVariationBeforeInsertHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.AfterInsertHook, imageVariationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	imageVariationAfterInsertHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.AfterSelectHook, imageVariationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	imageVariationAfterSelectHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.BeforeUpdateHook, imageVariationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	imageVariationBeforeUpdateHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.AfterUpdateHook, imageVariationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	imageVariationAfterUpdateHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.BeforeDeleteHook, imageVariationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	imageVariationBeforeDeleteHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.AfterDeleteHook, imageVariationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	imageVariationAfterDeleteHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.BeforeUpsertHook, imageVariationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	imageVariationBeforeUpsertHooks = []ImageVariationHook{}

	AddImageVariationHook(boil.AfterUpsertHook, imageVariationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	imageVariationAfterUpsertHooks = []ImageVariationHook{}
}

func testImageVariationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageVariationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(imageVariationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testImageVariationToOneImageUsingImage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ImageVariation
	var foreign Image

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, imageVariationDBTypes, false, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, imageDBTypes, false, imageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Image struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ImageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Image().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ImageVariationSlice{&local}
	if err = local.L.LoadImage(ctx, tx, false, (*[]*ImageVariation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Image = nil
	if err = local.L.LoadImage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Image == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testImageVariationToOneSetOpImageUsingImage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ImageVariation
	var b, c Image

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, imageVariationDBTypes, false, strmangle.SetComplement(imageVariationPrimaryKeyColumns, imageVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, imageDBTypes, false, strmangle.SetComplement(imagePrimaryKeyColumns, imageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Image{&b, &c} {
		err = a.SetImage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Image != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ImageVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ImageID != x.ID {
			t.Error("foreign key was wrong value", a.ImageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ImageID))
		reflect.Indirect(reflect.ValueOf(&a.ImageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ImageID != x.ID {
			t.Error("foreign key was wrong value", a.ImageID, x.ID)
		}
	}
}

func testImageVariationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageVariationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ImageVariationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testImageVariationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ImageVariations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	imageVariationDBTypes = map[string]string{`ID`: `varchar`, `ImageID`: `varchar`}
	_                     = bytes.MinRead
)

func testImageVariationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(imageVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(imageVariationAllColumns) == len(imageVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testImageVariationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(imageVariationAllColumns) == len(imageVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ImageVariation{}
	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, imageVariationDBTypes, true, imageVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(imageVariationAllColumns, imageVariationPrimaryKeyColumns) {
		fields = imageVariationAllColumns
	} else {
		fields = strmangle.SetComplement(
			imageVariationAllColumns,
			imageVariationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ImageVariationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testImageVariationsUpsert(t *testing.T) {
	t.Parallel()

	if len(imageVariationAllColumns) == len(imageVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLImageVariationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ImageVariation{}
	if err = randomize.Struct(seed, &o, imageVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageVariation: %s", err)
	}

	count, err := ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, imageVariationDBTypes, false, imageVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ImageVariation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ImageVariation: %s", err)
	}

	count, err = ImageVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
