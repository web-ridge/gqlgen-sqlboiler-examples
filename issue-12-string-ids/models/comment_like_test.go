// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCommentLikes(t *testing.T) {
	t.Parallel()

	query := CommentLikes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCommentLikesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommentLikesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CommentLikes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommentLikesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CommentLikeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommentLikesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CommentLikeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CommentLike exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CommentLikeExists to return true, but got false.")
	}
}

func testCommentLikesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	commentLikeFound, err := FindCommentLike(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if commentLikeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCommentLikesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CommentLikes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCommentLikesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CommentLikes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCommentLikesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	commentLikeOne := &CommentLike{}
	commentLikeTwo := &CommentLike{}
	if err = randomize.Struct(seed, commentLikeOne, commentLikeDBTypes, false, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}
	if err = randomize.Struct(seed, commentLikeTwo, commentLikeDBTypes, false, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = commentLikeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = commentLikeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CommentLikes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCommentLikesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	commentLikeOne := &CommentLike{}
	commentLikeTwo := &CommentLike{}
	if err = randomize.Struct(seed, commentLikeOne, commentLikeDBTypes, false, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}
	if err = randomize.Struct(seed, commentLikeTwo, commentLikeDBTypes, false, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = commentLikeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = commentLikeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func commentLikeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func commentLikeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CommentLike) error {
	*o = CommentLike{}
	return nil
}

func testCommentLikesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CommentLike{}
	o := &CommentLike{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, commentLikeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CommentLike object: %s", err)
	}

	AddCommentLikeHook(boil.BeforeInsertHook, commentLikeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	commentLikeBeforeInsertHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.AfterInsertHook, commentLikeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	commentLikeAfterInsertHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.AfterSelectHook, commentLikeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	commentLikeAfterSelectHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.BeforeUpdateHook, commentLikeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	commentLikeBeforeUpdateHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.AfterUpdateHook, commentLikeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	commentLikeAfterUpdateHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.BeforeDeleteHook, commentLikeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	commentLikeBeforeDeleteHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.AfterDeleteHook, commentLikeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	commentLikeAfterDeleteHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.BeforeUpsertHook, commentLikeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	commentLikeBeforeUpsertHooks = []CommentLikeHook{}

	AddCommentLikeHook(boil.AfterUpsertHook, commentLikeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	commentLikeAfterUpsertHooks = []CommentLikeHook{}
}

func testCommentLikesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommentLikesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(commentLikeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommentLikeToOneCommentUsingComment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CommentLike
	var foreign Comment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, commentLikeDBTypes, false, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, commentDBTypes, false, commentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CommentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Comment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommentLikeSlice{&local}
	if err = local.L.LoadComment(ctx, tx, false, (*[]*CommentLike)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Comment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Comment = nil
	if err = local.L.LoadComment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Comment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommentLikeToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CommentLike
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, commentLikeDBTypes, false, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommentLikeSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CommentLike)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommentLikeToOneSetOpCommentUsingComment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CommentLike
	var b, c Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, commentLikeDBTypes, false, strmangle.SetComplement(commentLikePrimaryKeyColumns, commentLikeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Comment{&b, &c} {
		err = a.SetComment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Comment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CommentLikes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CommentID != x.ID {
			t.Error("foreign key was wrong value", a.CommentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CommentID))
		reflect.Indirect(reflect.ValueOf(&a.CommentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CommentID != x.ID {
			t.Error("foreign key was wrong value", a.CommentID, x.ID)
		}
	}
}
func testCommentLikeToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CommentLike
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, commentLikeDBTypes, false, strmangle.SetComplement(commentLikePrimaryKeyColumns, commentLikeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CommentLikes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCommentLikesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCommentLikesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CommentLikeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCommentLikesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CommentLikes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	commentLikeDBTypes = map[string]string{`ID`: `varchar`, `CommentID`: `varchar`, `UserID`: `varchar`, `CreatedAt`: `datetime`, `LikeType`: `varchar`}
	_                  = bytes.MinRead
)

func testCommentLikesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(commentLikePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(commentLikeAllColumns) == len(commentLikePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCommentLikesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(commentLikeAllColumns) == len(commentLikePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CommentLike{}
	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, commentLikeDBTypes, true, commentLikePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(commentLikeAllColumns, commentLikePrimaryKeyColumns) {
		fields = commentLikeAllColumns
	} else {
		fields = strmangle.SetComplement(
			commentLikeAllColumns,
			commentLikePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CommentLikeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCommentLikesUpsert(t *testing.T) {
	t.Parallel()

	if len(commentLikeAllColumns) == len(commentLikePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCommentLikeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CommentLike{}
	if err = randomize.Struct(seed, &o, commentLikeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CommentLike: %s", err)
	}

	count, err := CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, commentLikeDBTypes, false, commentLikePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CommentLike struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CommentLike: %s", err)
	}

	count, err = CommentLikes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
