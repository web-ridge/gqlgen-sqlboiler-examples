interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ConnectionForwardPagination {
  first: Int!
  after: ID
}

input ConnectionBackwardPagination {
  last: Int!
  before: ID
}

input ConnectionPagination {
  forward: ConnectionForwardPagination
  backward: ConnectionBackwardPagination
}

enum SortDirection {
  ASC
  DESC
}

enum UserSort {
  ID
  FIRST_NAME
  LAST_NAME
  EMAIL
}

input UserOrdering {
  sort: UserSort!
  direction: SortDirection! = ASC
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}

type UserEdge {
  cursor: String!
  node: User
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo!
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  equalTo: Boolean
  notEqualTo: Boolean
}

input UserFilter {
  search: String
  where: UserWhere
}

input UserWhere {
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  or: UserWhere
  and: UserWhere
}

type Query {
  node(id: ID!): Node
  user(id: ID!): User!
  users(
    pagination: ConnectionPagination!
    ordering: [UserOrdering!]
    filter: UserFilter
  ): UserConnection!
}
