// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_models

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	IsAuthenticated func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Comment struct {
		CommentLikes func(childComplexity int) int
		Content      func(childComplexity int) int
		ID           func(childComplexity int) int
		Post         func(childComplexity int) int
		User         func(childComplexity int) int
	}

	CommentConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CommentDeletePayload struct {
		ID func(childComplexity int) int
	}

	CommentEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CommentLike struct {
		Comment   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		LikeType  func(childComplexity int) int
		User      func(childComplexity int) int
	}

	CommentLikeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	CommentLikeDeletePayload struct {
		ID func(childComplexity int) int
	}

	CommentLikeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CommentLikePayload struct {
		CommentLike func(childComplexity int) int
	}

	CommentLikesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	CommentLikesPayload struct {
		CommentLikes func(childComplexity int) int
	}

	CommentLikesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	CommentPayload struct {
		Comment func(childComplexity int) int
	}

	CommentsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	CommentsPayload struct {
		Comments func(childComplexity int) int
	}

	CommentsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Friendship struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Users     func(childComplexity int) int
	}

	FriendshipConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FriendshipDeletePayload struct {
		ID func(childComplexity int) int
	}

	FriendshipEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FriendshipPayload struct {
		Friendship func(childComplexity int) int
	}

	FriendshipsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	FriendshipsPayload struct {
		Friendships func(childComplexity int) int
	}

	FriendshipsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Image struct {
		ID              func(childComplexity int) int
		ImageVariations func(childComplexity int) int
		OriginalURL     func(childComplexity int) int
		Post            func(childComplexity int) int
		Views           func(childComplexity int) int
	}

	ImageConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ImageDeletePayload struct {
		ID func(childComplexity int) int
	}

	ImageEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ImagePayload struct {
		Image func(childComplexity int) int
	}

	ImageVariation struct {
		ID    func(childComplexity int) int
		Image func(childComplexity int) int
	}

	ImageVariationConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	ImageVariationDeletePayload struct {
		ID func(childComplexity int) int
	}

	ImageVariationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ImageVariationPayload struct {
		ImageVariation func(childComplexity int) int
	}

	ImageVariationsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	ImageVariationsPayload struct {
		ImageVariations func(childComplexity int) int
	}

	ImageVariationsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	ImagesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	ImagesPayload struct {
		Images func(childComplexity int) int
	}

	ImagesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Like struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		LikeType  func(childComplexity int) int
		Post      func(childComplexity int) int
		User      func(childComplexity int) int
	}

	LikeConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	LikeDeletePayload struct {
		ID func(childComplexity int) int
	}

	LikeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LikePayload struct {
		Like func(childComplexity int) int
	}

	LikesDeletePayload struct {
		Ids func(childComplexity int) int
	}

	LikesPayload struct {
		Likes func(childComplexity int) int
	}

	LikesUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Mutation struct {
		CreateComment         func(childComplexity int, input CommentCreateInput) int
		CreateCommentLike     func(childComplexity int, input CommentLikeCreateInput) int
		CreateCommentLikes    func(childComplexity int, input CommentLikesCreateInput) int
		CreateComments        func(childComplexity int, input CommentsCreateInput) int
		CreateFriendship      func(childComplexity int, input FriendshipCreateInput) int
		CreateFriendships     func(childComplexity int, input FriendshipsCreateInput) int
		CreateImage           func(childComplexity int, input ImageCreateInput) int
		CreateImageVariation  func(childComplexity int, input ImageVariationCreateInput) int
		CreateImageVariations func(childComplexity int, input ImageVariationsCreateInput) int
		CreateImages          func(childComplexity int, input ImagesCreateInput) int
		CreateLike            func(childComplexity int, input LikeCreateInput) int
		CreateLikes           func(childComplexity int, input LikesCreateInput) int
		CreatePost            func(childComplexity int, input PostCreateInput) int
		CreatePosts           func(childComplexity int, input PostsCreateInput) int
		CreateUser            func(childComplexity int, input UserCreateInput) int
		CreateUsers           func(childComplexity int, input UsersCreateInput) int
		DeleteComment         func(childComplexity int, id string) int
		DeleteCommentLike     func(childComplexity int, id string) int
		DeleteCommentLikes    func(childComplexity int, filter *CommentLikeFilter) int
		DeleteComments        func(childComplexity int, filter *CommentFilter) int
		DeleteFriendship      func(childComplexity int, id string) int
		DeleteFriendships     func(childComplexity int, filter *FriendshipFilter) int
		DeleteImage           func(childComplexity int, id string) int
		DeleteImageVariation  func(childComplexity int, id string) int
		DeleteImageVariations func(childComplexity int, filter *ImageVariationFilter) int
		DeleteImages          func(childComplexity int, filter *ImageFilter) int
		DeleteLike            func(childComplexity int, id string) int
		DeleteLikes           func(childComplexity int, filter *LikeFilter) int
		DeletePost            func(childComplexity int, id string) int
		DeletePosts           func(childComplexity int, filter *PostFilter) int
		DeleteUser            func(childComplexity int, id string) int
		DeleteUsers           func(childComplexity int, filter *UserFilter) int
		UpdateComment         func(childComplexity int, id string, input CommentUpdateInput) int
		UpdateCommentLike     func(childComplexity int, id string, input CommentLikeUpdateInput) int
		UpdateCommentLikes    func(childComplexity int, filter *CommentLikeFilter, input CommentLikeUpdateInput) int
		UpdateComments        func(childComplexity int, filter *CommentFilter, input CommentUpdateInput) int
		UpdateFriendship      func(childComplexity int, id string, input FriendshipUpdateInput) int
		UpdateFriendships     func(childComplexity int, filter *FriendshipFilter, input FriendshipUpdateInput) int
		UpdateImage           func(childComplexity int, id string, input ImageUpdateInput) int
		UpdateImageVariation  func(childComplexity int, id string, input ImageVariationUpdateInput) int
		UpdateImageVariations func(childComplexity int, filter *ImageVariationFilter, input ImageVariationUpdateInput) int
		UpdateImages          func(childComplexity int, filter *ImageFilter, input ImageUpdateInput) int
		UpdateLike            func(childComplexity int, id string, input LikeUpdateInput) int
		UpdateLikes           func(childComplexity int, filter *LikeFilter, input LikeUpdateInput) int
		UpdatePost            func(childComplexity int, id string, input PostUpdateInput) int
		UpdatePosts           func(childComplexity int, filter *PostFilter, input PostUpdateInput) int
		UpdateUser            func(childComplexity int, id string, input UserUpdateInput) int
		UpdateUsers           func(childComplexity int, filter *UserFilter, input UserUpdateInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Post struct {
		Comments func(childComplexity int) int
		Content  func(childComplexity int) int
		ID       func(childComplexity int) int
		Images   func(childComplexity int) int
		Likes    func(childComplexity int) int
		User     func(childComplexity int) int
	}

	PostConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	PostDeletePayload struct {
		ID func(childComplexity int) int
	}

	PostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostPayload struct {
		Post func(childComplexity int) int
	}

	PostsDeletePayload struct {
		Ids func(childComplexity int) int
	}

	PostsPayload struct {
		Posts func(childComplexity int) int
	}

	PostsUpdatePayload struct {
		Ok func(childComplexity int) int
	}

	Query struct {
		Comment         func(childComplexity int, id string) int
		CommentLike     func(childComplexity int, id string) int
		CommentLikes    func(childComplexity int, pagination ConnectionPagination, ordering []*CommentLikeOrdering, filter *CommentLikeFilter) int
		Comments        func(childComplexity int, pagination ConnectionPagination, ordering []*CommentOrdering, filter *CommentFilter) int
		Friendship      func(childComplexity int, id string) int
		Friendships     func(childComplexity int, pagination ConnectionPagination, ordering []*FriendshipOrdering, filter *FriendshipFilter) int
		Image           func(childComplexity int, id string) int
		ImageVariation  func(childComplexity int, id string) int
		ImageVariations func(childComplexity int, pagination ConnectionPagination, ordering []*ImageVariationOrdering, filter *ImageVariationFilter) int
		Images          func(childComplexity int, pagination ConnectionPagination, ordering []*ImageOrdering, filter *ImageFilter) int
		Like            func(childComplexity int, id string) int
		Likes           func(childComplexity int, pagination ConnectionPagination, ordering []*LikeOrdering, filter *LikeFilter) int
		Node            func(childComplexity int, id string) int
		Post            func(childComplexity int, id string) int
		Posts           func(childComplexity int, pagination ConnectionPagination, ordering []*PostOrdering, filter *PostFilter) int
		User            func(childComplexity int, id string) int
		Users           func(childComplexity int, pagination ConnectionPagination, ordering []*UserOrdering, filter *UserFilter) int
	}

	User struct {
		CommentLikes func(childComplexity int) int
		Comments     func(childComplexity int) int
		Email        func(childComplexity int) int
		FirstName    func(childComplexity int) int
		Friendships  func(childComplexity int) int
		ID           func(childComplexity int) int
		LastName     func(childComplexity int) int
		Likes        func(childComplexity int) int
		Posts        func(childComplexity int) int
	}

	UserConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	UserDeletePayload struct {
		ID func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	UserPayload struct {
		User func(childComplexity int) int
	}

	UsersDeletePayload struct {
		Ids func(childComplexity int) int
	}

	UsersPayload struct {
		Users func(childComplexity int) int
	}

	UsersUpdatePayload struct {
		Ok func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateComment(ctx context.Context, input CommentCreateInput) (*CommentPayload, error)
	CreateComments(ctx context.Context, input CommentsCreateInput) (*CommentsPayload, error)
	UpdateComment(ctx context.Context, id string, input CommentUpdateInput) (*CommentPayload, error)
	UpdateComments(ctx context.Context, filter *CommentFilter, input CommentUpdateInput) (*CommentsUpdatePayload, error)
	DeleteComment(ctx context.Context, id string) (*CommentDeletePayload, error)
	DeleteComments(ctx context.Context, filter *CommentFilter) (*CommentsDeletePayload, error)
	CreateCommentLike(ctx context.Context, input CommentLikeCreateInput) (*CommentLikePayload, error)
	CreateCommentLikes(ctx context.Context, input CommentLikesCreateInput) (*CommentLikesPayload, error)
	UpdateCommentLike(ctx context.Context, id string, input CommentLikeUpdateInput) (*CommentLikePayload, error)
	UpdateCommentLikes(ctx context.Context, filter *CommentLikeFilter, input CommentLikeUpdateInput) (*CommentLikesUpdatePayload, error)
	DeleteCommentLike(ctx context.Context, id string) (*CommentLikeDeletePayload, error)
	DeleteCommentLikes(ctx context.Context, filter *CommentLikeFilter) (*CommentLikesDeletePayload, error)
	CreateFriendship(ctx context.Context, input FriendshipCreateInput) (*FriendshipPayload, error)
	CreateFriendships(ctx context.Context, input FriendshipsCreateInput) (*FriendshipsPayload, error)
	UpdateFriendship(ctx context.Context, id string, input FriendshipUpdateInput) (*FriendshipPayload, error)
	UpdateFriendships(ctx context.Context, filter *FriendshipFilter, input FriendshipUpdateInput) (*FriendshipsUpdatePayload, error)
	DeleteFriendship(ctx context.Context, id string) (*FriendshipDeletePayload, error)
	DeleteFriendships(ctx context.Context, filter *FriendshipFilter) (*FriendshipsDeletePayload, error)
	CreateImage(ctx context.Context, input ImageCreateInput) (*ImagePayload, error)
	CreateImages(ctx context.Context, input ImagesCreateInput) (*ImagesPayload, error)
	UpdateImage(ctx context.Context, id string, input ImageUpdateInput) (*ImagePayload, error)
	UpdateImages(ctx context.Context, filter *ImageFilter, input ImageUpdateInput) (*ImagesUpdatePayload, error)
	DeleteImage(ctx context.Context, id string) (*ImageDeletePayload, error)
	DeleteImages(ctx context.Context, filter *ImageFilter) (*ImagesDeletePayload, error)
	CreateImageVariation(ctx context.Context, input ImageVariationCreateInput) (*ImageVariationPayload, error)
	CreateImageVariations(ctx context.Context, input ImageVariationsCreateInput) (*ImageVariationsPayload, error)
	UpdateImageVariation(ctx context.Context, id string, input ImageVariationUpdateInput) (*ImageVariationPayload, error)
	UpdateImageVariations(ctx context.Context, filter *ImageVariationFilter, input ImageVariationUpdateInput) (*ImageVariationsUpdatePayload, error)
	DeleteImageVariation(ctx context.Context, id string) (*ImageVariationDeletePayload, error)
	DeleteImageVariations(ctx context.Context, filter *ImageVariationFilter) (*ImageVariationsDeletePayload, error)
	CreateLike(ctx context.Context, input LikeCreateInput) (*LikePayload, error)
	CreateLikes(ctx context.Context, input LikesCreateInput) (*LikesPayload, error)
	UpdateLike(ctx context.Context, id string, input LikeUpdateInput) (*LikePayload, error)
	UpdateLikes(ctx context.Context, filter *LikeFilter, input LikeUpdateInput) (*LikesUpdatePayload, error)
	DeleteLike(ctx context.Context, id string) (*LikeDeletePayload, error)
	DeleteLikes(ctx context.Context, filter *LikeFilter) (*LikesDeletePayload, error)
	CreatePost(ctx context.Context, input PostCreateInput) (*PostPayload, error)
	CreatePosts(ctx context.Context, input PostsCreateInput) (*PostsPayload, error)
	UpdatePost(ctx context.Context, id string, input PostUpdateInput) (*PostPayload, error)
	UpdatePosts(ctx context.Context, filter *PostFilter, input PostUpdateInput) (*PostsUpdatePayload, error)
	DeletePost(ctx context.Context, id string) (*PostDeletePayload, error)
	DeletePosts(ctx context.Context, filter *PostFilter) (*PostsDeletePayload, error)
	CreateUser(ctx context.Context, input UserCreateInput) (*UserPayload, error)
	CreateUsers(ctx context.Context, input UsersCreateInput) (*UsersPayload, error)
	UpdateUser(ctx context.Context, id string, input UserUpdateInput) (*UserPayload, error)
	UpdateUsers(ctx context.Context, filter *UserFilter, input UserUpdateInput) (*UsersUpdatePayload, error)
	DeleteUser(ctx context.Context, id string) (*UserDeletePayload, error)
	DeleteUsers(ctx context.Context, filter *UserFilter) (*UsersDeletePayload, error)
}
type QueryResolver interface {
	Node(ctx context.Context, id string) (Node, error)
	Comment(ctx context.Context, id string) (*Comment, error)
	Comments(ctx context.Context, pagination ConnectionPagination, ordering []*CommentOrdering, filter *CommentFilter) (*CommentConnection, error)
	CommentLike(ctx context.Context, id string) (*CommentLike, error)
	CommentLikes(ctx context.Context, pagination ConnectionPagination, ordering []*CommentLikeOrdering, filter *CommentLikeFilter) (*CommentLikeConnection, error)
	Friendship(ctx context.Context, id string) (*Friendship, error)
	Friendships(ctx context.Context, pagination ConnectionPagination, ordering []*FriendshipOrdering, filter *FriendshipFilter) (*FriendshipConnection, error)
	Image(ctx context.Context, id string) (*Image, error)
	Images(ctx context.Context, pagination ConnectionPagination, ordering []*ImageOrdering, filter *ImageFilter) (*ImageConnection, error)
	ImageVariation(ctx context.Context, id string) (*ImageVariation, error)
	ImageVariations(ctx context.Context, pagination ConnectionPagination, ordering []*ImageVariationOrdering, filter *ImageVariationFilter) (*ImageVariationConnection, error)
	Like(ctx context.Context, id string) (*Like, error)
	Likes(ctx context.Context, pagination ConnectionPagination, ordering []*LikeOrdering, filter *LikeFilter) (*LikeConnection, error)
	Post(ctx context.Context, id string) (*Post, error)
	Posts(ctx context.Context, pagination ConnectionPagination, ordering []*PostOrdering, filter *PostFilter) (*PostConnection, error)
	User(ctx context.Context, id string) (*User, error)
	Users(ctx context.Context, pagination ConnectionPagination, ordering []*UserOrdering, filter *UserFilter) (*UserConnection, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Comment.commentLikes":
		if e.complexity.Comment.CommentLikes == nil {
			break
		}

		return e.complexity.Comment.CommentLikes(childComplexity), true

	case "Comment.content":
		if e.complexity.Comment.Content == nil {
			break
		}

		return e.complexity.Comment.Content(childComplexity), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.post":
		if e.complexity.Comment.Post == nil {
			break
		}

		return e.complexity.Comment.Post(childComplexity), true

	case "Comment.user":
		if e.complexity.Comment.User == nil {
			break
		}

		return e.complexity.Comment.User(childComplexity), true

	case "CommentConnection.edges":
		if e.complexity.CommentConnection.Edges == nil {
			break
		}

		return e.complexity.CommentConnection.Edges(childComplexity), true

	case "CommentConnection.pageInfo":
		if e.complexity.CommentConnection.PageInfo == nil {
			break
		}

		return e.complexity.CommentConnection.PageInfo(childComplexity), true

	case "CommentDeletePayload.id":
		if e.complexity.CommentDeletePayload.ID == nil {
			break
		}

		return e.complexity.CommentDeletePayload.ID(childComplexity), true

	case "CommentEdge.cursor":
		if e.complexity.CommentEdge.Cursor == nil {
			break
		}

		return e.complexity.CommentEdge.Cursor(childComplexity), true

	case "CommentEdge.node":
		if e.complexity.CommentEdge.Node == nil {
			break
		}

		return e.complexity.CommentEdge.Node(childComplexity), true

	case "CommentLike.comment":
		if e.complexity.CommentLike.Comment == nil {
			break
		}

		return e.complexity.CommentLike.Comment(childComplexity), true

	case "CommentLike.createdAt":
		if e.complexity.CommentLike.CreatedAt == nil {
			break
		}

		return e.complexity.CommentLike.CreatedAt(childComplexity), true

	case "CommentLike.id":
		if e.complexity.CommentLike.ID == nil {
			break
		}

		return e.complexity.CommentLike.ID(childComplexity), true

	case "CommentLike.likeType":
		if e.complexity.CommentLike.LikeType == nil {
			break
		}

		return e.complexity.CommentLike.LikeType(childComplexity), true

	case "CommentLike.user":
		if e.complexity.CommentLike.User == nil {
			break
		}

		return e.complexity.CommentLike.User(childComplexity), true

	case "CommentLikeConnection.edges":
		if e.complexity.CommentLikeConnection.Edges == nil {
			break
		}

		return e.complexity.CommentLikeConnection.Edges(childComplexity), true

	case "CommentLikeConnection.pageInfo":
		if e.complexity.CommentLikeConnection.PageInfo == nil {
			break
		}

		return e.complexity.CommentLikeConnection.PageInfo(childComplexity), true

	case "CommentLikeDeletePayload.id":
		if e.complexity.CommentLikeDeletePayload.ID == nil {
			break
		}

		return e.complexity.CommentLikeDeletePayload.ID(childComplexity), true

	case "CommentLikeEdge.cursor":
		if e.complexity.CommentLikeEdge.Cursor == nil {
			break
		}

		return e.complexity.CommentLikeEdge.Cursor(childComplexity), true

	case "CommentLikeEdge.node":
		if e.complexity.CommentLikeEdge.Node == nil {
			break
		}

		return e.complexity.CommentLikeEdge.Node(childComplexity), true

	case "CommentLikePayload.commentLike":
		if e.complexity.CommentLikePayload.CommentLike == nil {
			break
		}

		return e.complexity.CommentLikePayload.CommentLike(childComplexity), true

	case "CommentLikesDeletePayload.ids":
		if e.complexity.CommentLikesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.CommentLikesDeletePayload.Ids(childComplexity), true

	case "CommentLikesPayload.commentLikes":
		if e.complexity.CommentLikesPayload.CommentLikes == nil {
			break
		}

		return e.complexity.CommentLikesPayload.CommentLikes(childComplexity), true

	case "CommentLikesUpdatePayload.ok":
		if e.complexity.CommentLikesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.CommentLikesUpdatePayload.Ok(childComplexity), true

	case "CommentPayload.comment":
		if e.complexity.CommentPayload.Comment == nil {
			break
		}

		return e.complexity.CommentPayload.Comment(childComplexity), true

	case "CommentsDeletePayload.ids":
		if e.complexity.CommentsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.CommentsDeletePayload.Ids(childComplexity), true

	case "CommentsPayload.comments":
		if e.complexity.CommentsPayload.Comments == nil {
			break
		}

		return e.complexity.CommentsPayload.Comments(childComplexity), true

	case "CommentsUpdatePayload.ok":
		if e.complexity.CommentsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.CommentsUpdatePayload.Ok(childComplexity), true

	case "Friendship.createdAt":
		if e.complexity.Friendship.CreatedAt == nil {
			break
		}

		return e.complexity.Friendship.CreatedAt(childComplexity), true

	case "Friendship.id":
		if e.complexity.Friendship.ID == nil {
			break
		}

		return e.complexity.Friendship.ID(childComplexity), true

	case "Friendship.users":
		if e.complexity.Friendship.Users == nil {
			break
		}

		return e.complexity.Friendship.Users(childComplexity), true

	case "FriendshipConnection.edges":
		if e.complexity.FriendshipConnection.Edges == nil {
			break
		}

		return e.complexity.FriendshipConnection.Edges(childComplexity), true

	case "FriendshipConnection.pageInfo":
		if e.complexity.FriendshipConnection.PageInfo == nil {
			break
		}

		return e.complexity.FriendshipConnection.PageInfo(childComplexity), true

	case "FriendshipDeletePayload.id":
		if e.complexity.FriendshipDeletePayload.ID == nil {
			break
		}

		return e.complexity.FriendshipDeletePayload.ID(childComplexity), true

	case "FriendshipEdge.cursor":
		if e.complexity.FriendshipEdge.Cursor == nil {
			break
		}

		return e.complexity.FriendshipEdge.Cursor(childComplexity), true

	case "FriendshipEdge.node":
		if e.complexity.FriendshipEdge.Node == nil {
			break
		}

		return e.complexity.FriendshipEdge.Node(childComplexity), true

	case "FriendshipPayload.friendship":
		if e.complexity.FriendshipPayload.Friendship == nil {
			break
		}

		return e.complexity.FriendshipPayload.Friendship(childComplexity), true

	case "FriendshipsDeletePayload.ids":
		if e.complexity.FriendshipsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.FriendshipsDeletePayload.Ids(childComplexity), true

	case "FriendshipsPayload.friendships":
		if e.complexity.FriendshipsPayload.Friendships == nil {
			break
		}

		return e.complexity.FriendshipsPayload.Friendships(childComplexity), true

	case "FriendshipsUpdatePayload.ok":
		if e.complexity.FriendshipsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.FriendshipsUpdatePayload.Ok(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.imageVariations":
		if e.complexity.Image.ImageVariations == nil {
			break
		}

		return e.complexity.Image.ImageVariations(childComplexity), true

	case "Image.originalUrl":
		if e.complexity.Image.OriginalURL == nil {
			break
		}

		return e.complexity.Image.OriginalURL(childComplexity), true

	case "Image.post":
		if e.complexity.Image.Post == nil {
			break
		}

		return e.complexity.Image.Post(childComplexity), true

	case "Image.views":
		if e.complexity.Image.Views == nil {
			break
		}

		return e.complexity.Image.Views(childComplexity), true

	case "ImageConnection.edges":
		if e.complexity.ImageConnection.Edges == nil {
			break
		}

		return e.complexity.ImageConnection.Edges(childComplexity), true

	case "ImageConnection.pageInfo":
		if e.complexity.ImageConnection.PageInfo == nil {
			break
		}

		return e.complexity.ImageConnection.PageInfo(childComplexity), true

	case "ImageDeletePayload.id":
		if e.complexity.ImageDeletePayload.ID == nil {
			break
		}

		return e.complexity.ImageDeletePayload.ID(childComplexity), true

	case "ImageEdge.cursor":
		if e.complexity.ImageEdge.Cursor == nil {
			break
		}

		return e.complexity.ImageEdge.Cursor(childComplexity), true

	case "ImageEdge.node":
		if e.complexity.ImageEdge.Node == nil {
			break
		}

		return e.complexity.ImageEdge.Node(childComplexity), true

	case "ImagePayload.image":
		if e.complexity.ImagePayload.Image == nil {
			break
		}

		return e.complexity.ImagePayload.Image(childComplexity), true

	case "ImageVariation.id":
		if e.complexity.ImageVariation.ID == nil {
			break
		}

		return e.complexity.ImageVariation.ID(childComplexity), true

	case "ImageVariation.image":
		if e.complexity.ImageVariation.Image == nil {
			break
		}

		return e.complexity.ImageVariation.Image(childComplexity), true

	case "ImageVariationConnection.edges":
		if e.complexity.ImageVariationConnection.Edges == nil {
			break
		}

		return e.complexity.ImageVariationConnection.Edges(childComplexity), true

	case "ImageVariationConnection.pageInfo":
		if e.complexity.ImageVariationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ImageVariationConnection.PageInfo(childComplexity), true

	case "ImageVariationDeletePayload.id":
		if e.complexity.ImageVariationDeletePayload.ID == nil {
			break
		}

		return e.complexity.ImageVariationDeletePayload.ID(childComplexity), true

	case "ImageVariationEdge.cursor":
		if e.complexity.ImageVariationEdge.Cursor == nil {
			break
		}

		return e.complexity.ImageVariationEdge.Cursor(childComplexity), true

	case "ImageVariationEdge.node":
		if e.complexity.ImageVariationEdge.Node == nil {
			break
		}

		return e.complexity.ImageVariationEdge.Node(childComplexity), true

	case "ImageVariationPayload.imageVariation":
		if e.complexity.ImageVariationPayload.ImageVariation == nil {
			break
		}

		return e.complexity.ImageVariationPayload.ImageVariation(childComplexity), true

	case "ImageVariationsDeletePayload.ids":
		if e.complexity.ImageVariationsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.ImageVariationsDeletePayload.Ids(childComplexity), true

	case "ImageVariationsPayload.imageVariations":
		if e.complexity.ImageVariationsPayload.ImageVariations == nil {
			break
		}

		return e.complexity.ImageVariationsPayload.ImageVariations(childComplexity), true

	case "ImageVariationsUpdatePayload.ok":
		if e.complexity.ImageVariationsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.ImageVariationsUpdatePayload.Ok(childComplexity), true

	case "ImagesDeletePayload.ids":
		if e.complexity.ImagesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.ImagesDeletePayload.Ids(childComplexity), true

	case "ImagesPayload.images":
		if e.complexity.ImagesPayload.Images == nil {
			break
		}

		return e.complexity.ImagesPayload.Images(childComplexity), true

	case "ImagesUpdatePayload.ok":
		if e.complexity.ImagesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.ImagesUpdatePayload.Ok(childComplexity), true

	case "Like.createdAt":
		if e.complexity.Like.CreatedAt == nil {
			break
		}

		return e.complexity.Like.CreatedAt(childComplexity), true

	case "Like.id":
		if e.complexity.Like.ID == nil {
			break
		}

		return e.complexity.Like.ID(childComplexity), true

	case "Like.likeType":
		if e.complexity.Like.LikeType == nil {
			break
		}

		return e.complexity.Like.LikeType(childComplexity), true

	case "Like.post":
		if e.complexity.Like.Post == nil {
			break
		}

		return e.complexity.Like.Post(childComplexity), true

	case "Like.user":
		if e.complexity.Like.User == nil {
			break
		}

		return e.complexity.Like.User(childComplexity), true

	case "LikeConnection.edges":
		if e.complexity.LikeConnection.Edges == nil {
			break
		}

		return e.complexity.LikeConnection.Edges(childComplexity), true

	case "LikeConnection.pageInfo":
		if e.complexity.LikeConnection.PageInfo == nil {
			break
		}

		return e.complexity.LikeConnection.PageInfo(childComplexity), true

	case "LikeDeletePayload.id":
		if e.complexity.LikeDeletePayload.ID == nil {
			break
		}

		return e.complexity.LikeDeletePayload.ID(childComplexity), true

	case "LikeEdge.cursor":
		if e.complexity.LikeEdge.Cursor == nil {
			break
		}

		return e.complexity.LikeEdge.Cursor(childComplexity), true

	case "LikeEdge.node":
		if e.complexity.LikeEdge.Node == nil {
			break
		}

		return e.complexity.LikeEdge.Node(childComplexity), true

	case "LikePayload.like":
		if e.complexity.LikePayload.Like == nil {
			break
		}

		return e.complexity.LikePayload.Like(childComplexity), true

	case "LikesDeletePayload.ids":
		if e.complexity.LikesDeletePayload.Ids == nil {
			break
		}

		return e.complexity.LikesDeletePayload.Ids(childComplexity), true

	case "LikesPayload.likes":
		if e.complexity.LikesPayload.Likes == nil {
			break
		}

		return e.complexity.LikesPayload.Likes(childComplexity), true

	case "LikesUpdatePayload.ok":
		if e.complexity.LikesUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.LikesUpdatePayload.Ok(childComplexity), true

	case "Mutation.createComment":
		if e.complexity.Mutation.CreateComment == nil {
			break
		}

		args, err := ec.field_Mutation_createComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComment(childComplexity, args["input"].(CommentCreateInput)), true

	case "Mutation.createCommentLike":
		if e.complexity.Mutation.CreateCommentLike == nil {
			break
		}

		args, err := ec.field_Mutation_createCommentLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCommentLike(childComplexity, args["input"].(CommentLikeCreateInput)), true

	case "Mutation.createCommentLikes":
		if e.complexity.Mutation.CreateCommentLikes == nil {
			break
		}

		args, err := ec.field_Mutation_createCommentLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCommentLikes(childComplexity, args["input"].(CommentLikesCreateInput)), true

	case "Mutation.createComments":
		if e.complexity.Mutation.CreateComments == nil {
			break
		}

		args, err := ec.field_Mutation_createComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComments(childComplexity, args["input"].(CommentsCreateInput)), true

	case "Mutation.createFriendship":
		if e.complexity.Mutation.CreateFriendship == nil {
			break
		}

		args, err := ec.field_Mutation_createFriendship_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFriendship(childComplexity, args["input"].(FriendshipCreateInput)), true

	case "Mutation.createFriendships":
		if e.complexity.Mutation.CreateFriendships == nil {
			break
		}

		args, err := ec.field_Mutation_createFriendships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFriendships(childComplexity, args["input"].(FriendshipsCreateInput)), true

	case "Mutation.createImage":
		if e.complexity.Mutation.CreateImage == nil {
			break
		}

		args, err := ec.field_Mutation_createImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateImage(childComplexity, args["input"].(ImageCreateInput)), true

	case "Mutation.createImageVariation":
		if e.complexity.Mutation.CreateImageVariation == nil {
			break
		}

		args, err := ec.field_Mutation_createImageVariation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateImageVariation(childComplexity, args["input"].(ImageVariationCreateInput)), true

	case "Mutation.createImageVariations":
		if e.complexity.Mutation.CreateImageVariations == nil {
			break
		}

		args, err := ec.field_Mutation_createImageVariations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateImageVariations(childComplexity, args["input"].(ImageVariationsCreateInput)), true

	case "Mutation.createImages":
		if e.complexity.Mutation.CreateImages == nil {
			break
		}

		args, err := ec.field_Mutation_createImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateImages(childComplexity, args["input"].(ImagesCreateInput)), true

	case "Mutation.createLike":
		if e.complexity.Mutation.CreateLike == nil {
			break
		}

		args, err := ec.field_Mutation_createLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLike(childComplexity, args["input"].(LikeCreateInput)), true

	case "Mutation.createLikes":
		if e.complexity.Mutation.CreateLikes == nil {
			break
		}

		args, err := ec.field_Mutation_createLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLikes(childComplexity, args["input"].(LikesCreateInput)), true

	case "Mutation.createPost":
		if e.complexity.Mutation.CreatePost == nil {
			break
		}

		args, err := ec.field_Mutation_createPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePost(childComplexity, args["input"].(PostCreateInput)), true

	case "Mutation.createPosts":
		if e.complexity.Mutation.CreatePosts == nil {
			break
		}

		args, err := ec.field_Mutation_createPosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePosts(childComplexity, args["input"].(PostsCreateInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(UserCreateInput)), true

	case "Mutation.createUsers":
		if e.complexity.Mutation.CreateUsers == nil {
			break
		}

		args, err := ec.field_Mutation_createUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUsers(childComplexity, args["input"].(UsersCreateInput)), true

	case "Mutation.deleteComment":
		if e.complexity.Mutation.DeleteComment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComment(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCommentLike":
		if e.complexity.Mutation.DeleteCommentLike == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCommentLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCommentLike(childComplexity, args["id"].(string)), true

	case "Mutation.deleteCommentLikes":
		if e.complexity.Mutation.DeleteCommentLikes == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCommentLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCommentLikes(childComplexity, args["filter"].(*CommentLikeFilter)), true

	case "Mutation.deleteComments":
		if e.complexity.Mutation.DeleteComments == nil {
			break
		}

		args, err := ec.field_Mutation_deleteComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteComments(childComplexity, args["filter"].(*CommentFilter)), true

	case "Mutation.deleteFriendship":
		if e.complexity.Mutation.DeleteFriendship == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFriendship_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFriendship(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFriendships":
		if e.complexity.Mutation.DeleteFriendships == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFriendships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFriendships(childComplexity, args["filter"].(*FriendshipFilter)), true

	case "Mutation.deleteImage":
		if e.complexity.Mutation.DeleteImage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteImage(childComplexity, args["id"].(string)), true

	case "Mutation.deleteImageVariation":
		if e.complexity.Mutation.DeleteImageVariation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteImageVariation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteImageVariation(childComplexity, args["id"].(string)), true

	case "Mutation.deleteImageVariations":
		if e.complexity.Mutation.DeleteImageVariations == nil {
			break
		}

		args, err := ec.field_Mutation_deleteImageVariations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteImageVariations(childComplexity, args["filter"].(*ImageVariationFilter)), true

	case "Mutation.deleteImages":
		if e.complexity.Mutation.DeleteImages == nil {
			break
		}

		args, err := ec.field_Mutation_deleteImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteImages(childComplexity, args["filter"].(*ImageFilter)), true

	case "Mutation.deleteLike":
		if e.complexity.Mutation.DeleteLike == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLike(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLikes":
		if e.complexity.Mutation.DeleteLikes == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLikes(childComplexity, args["filter"].(*LikeFilter)), true

	case "Mutation.deletePost":
		if e.complexity.Mutation.DeletePost == nil {
			break
		}

		args, err := ec.field_Mutation_deletePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePost(childComplexity, args["id"].(string)), true

	case "Mutation.deletePosts":
		if e.complexity.Mutation.DeletePosts == nil {
			break
		}

		args, err := ec.field_Mutation_deletePosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePosts(childComplexity, args["filter"].(*PostFilter)), true

	case "Mutation.deleteUser":
		if e.complexity.Mutation.DeleteUser == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUser(childComplexity, args["id"].(string)), true

	case "Mutation.deleteUsers":
		if e.complexity.Mutation.DeleteUsers == nil {
			break
		}

		args, err := ec.field_Mutation_deleteUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteUsers(childComplexity, args["filter"].(*UserFilter)), true

	case "Mutation.updateComment":
		if e.complexity.Mutation.UpdateComment == nil {
			break
		}

		args, err := ec.field_Mutation_updateComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComment(childComplexity, args["id"].(string), args["input"].(CommentUpdateInput)), true

	case "Mutation.updateCommentLike":
		if e.complexity.Mutation.UpdateCommentLike == nil {
			break
		}

		args, err := ec.field_Mutation_updateCommentLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCommentLike(childComplexity, args["id"].(string), args["input"].(CommentLikeUpdateInput)), true

	case "Mutation.updateCommentLikes":
		if e.complexity.Mutation.UpdateCommentLikes == nil {
			break
		}

		args, err := ec.field_Mutation_updateCommentLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCommentLikes(childComplexity, args["filter"].(*CommentLikeFilter), args["input"].(CommentLikeUpdateInput)), true

	case "Mutation.updateComments":
		if e.complexity.Mutation.UpdateComments == nil {
			break
		}

		args, err := ec.field_Mutation_updateComments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateComments(childComplexity, args["filter"].(*CommentFilter), args["input"].(CommentUpdateInput)), true

	case "Mutation.updateFriendship":
		if e.complexity.Mutation.UpdateFriendship == nil {
			break
		}

		args, err := ec.field_Mutation_updateFriendship_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFriendship(childComplexity, args["id"].(string), args["input"].(FriendshipUpdateInput)), true

	case "Mutation.updateFriendships":
		if e.complexity.Mutation.UpdateFriendships == nil {
			break
		}

		args, err := ec.field_Mutation_updateFriendships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFriendships(childComplexity, args["filter"].(*FriendshipFilter), args["input"].(FriendshipUpdateInput)), true

	case "Mutation.updateImage":
		if e.complexity.Mutation.UpdateImage == nil {
			break
		}

		args, err := ec.field_Mutation_updateImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImage(childComplexity, args["id"].(string), args["input"].(ImageUpdateInput)), true

	case "Mutation.updateImageVariation":
		if e.complexity.Mutation.UpdateImageVariation == nil {
			break
		}

		args, err := ec.field_Mutation_updateImageVariation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImageVariation(childComplexity, args["id"].(string), args["input"].(ImageVariationUpdateInput)), true

	case "Mutation.updateImageVariations":
		if e.complexity.Mutation.UpdateImageVariations == nil {
			break
		}

		args, err := ec.field_Mutation_updateImageVariations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImageVariations(childComplexity, args["filter"].(*ImageVariationFilter), args["input"].(ImageVariationUpdateInput)), true

	case "Mutation.updateImages":
		if e.complexity.Mutation.UpdateImages == nil {
			break
		}

		args, err := ec.field_Mutation_updateImages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImages(childComplexity, args["filter"].(*ImageFilter), args["input"].(ImageUpdateInput)), true

	case "Mutation.updateLike":
		if e.complexity.Mutation.UpdateLike == nil {
			break
		}

		args, err := ec.field_Mutation_updateLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLike(childComplexity, args["id"].(string), args["input"].(LikeUpdateInput)), true

	case "Mutation.updateLikes":
		if e.complexity.Mutation.UpdateLikes == nil {
			break
		}

		args, err := ec.field_Mutation_updateLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLikes(childComplexity, args["filter"].(*LikeFilter), args["input"].(LikeUpdateInput)), true

	case "Mutation.updatePost":
		if e.complexity.Mutation.UpdatePost == nil {
			break
		}

		args, err := ec.field_Mutation_updatePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePost(childComplexity, args["id"].(string), args["input"].(PostUpdateInput)), true

	case "Mutation.updatePosts":
		if e.complexity.Mutation.UpdatePosts == nil {
			break
		}

		args, err := ec.field_Mutation_updatePosts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePosts(childComplexity, args["filter"].(*PostFilter), args["input"].(PostUpdateInput)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(string), args["input"].(UserUpdateInput)), true

	case "Mutation.updateUsers":
		if e.complexity.Mutation.UpdateUsers == nil {
			break
		}

		args, err := ec.field_Mutation_updateUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUsers(childComplexity, args["filter"].(*UserFilter), args["input"].(UserUpdateInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Post.comments":
		if e.complexity.Post.Comments == nil {
			break
		}

		return e.complexity.Post.Comments(childComplexity), true

	case "Post.content":
		if e.complexity.Post.Content == nil {
			break
		}

		return e.complexity.Post.Content(childComplexity), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.images":
		if e.complexity.Post.Images == nil {
			break
		}

		return e.complexity.Post.Images(childComplexity), true

	case "Post.likes":
		if e.complexity.Post.Likes == nil {
			break
		}

		return e.complexity.Post.Likes(childComplexity), true

	case "Post.user":
		if e.complexity.Post.User == nil {
			break
		}

		return e.complexity.Post.User(childComplexity), true

	case "PostConnection.edges":
		if e.complexity.PostConnection.Edges == nil {
			break
		}

		return e.complexity.PostConnection.Edges(childComplexity), true

	case "PostConnection.pageInfo":
		if e.complexity.PostConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostConnection.PageInfo(childComplexity), true

	case "PostDeletePayload.id":
		if e.complexity.PostDeletePayload.ID == nil {
			break
		}

		return e.complexity.PostDeletePayload.ID(childComplexity), true

	case "PostEdge.cursor":
		if e.complexity.PostEdge.Cursor == nil {
			break
		}

		return e.complexity.PostEdge.Cursor(childComplexity), true

	case "PostEdge.node":
		if e.complexity.PostEdge.Node == nil {
			break
		}

		return e.complexity.PostEdge.Node(childComplexity), true

	case "PostPayload.post":
		if e.complexity.PostPayload.Post == nil {
			break
		}

		return e.complexity.PostPayload.Post(childComplexity), true

	case "PostsDeletePayload.ids":
		if e.complexity.PostsDeletePayload.Ids == nil {
			break
		}

		return e.complexity.PostsDeletePayload.Ids(childComplexity), true

	case "PostsPayload.posts":
		if e.complexity.PostsPayload.Posts == nil {
			break
		}

		return e.complexity.PostsPayload.Posts(childComplexity), true

	case "PostsUpdatePayload.ok":
		if e.complexity.PostsUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.PostsUpdatePayload.Ok(childComplexity), true

	case "Query.comment":
		if e.complexity.Query.Comment == nil {
			break
		}

		args, err := ec.field_Query_comment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Comment(childComplexity, args["id"].(string)), true

	case "Query.commentLike":
		if e.complexity.Query.CommentLike == nil {
			break
		}

		args, err := ec.field_Query_commentLike_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommentLike(childComplexity, args["id"].(string)), true

	case "Query.commentLikes":
		if e.complexity.Query.CommentLikes == nil {
			break
		}

		args, err := ec.field_Query_commentLikes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommentLikes(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*CommentLikeOrdering), args["filter"].(*CommentLikeFilter)), true

	case "Query.comments":
		if e.complexity.Query.Comments == nil {
			break
		}

		args, err := ec.field_Query_comments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Comments(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*CommentOrdering), args["filter"].(*CommentFilter)), true

	case "Query.friendship":
		if e.complexity.Query.Friendship == nil {
			break
		}

		args, err := ec.field_Query_friendship_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Friendship(childComplexity, args["id"].(string)), true

	case "Query.friendships":
		if e.complexity.Query.Friendships == nil {
			break
		}

		args, err := ec.field_Query_friendships_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Friendships(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*FriendshipOrdering), args["filter"].(*FriendshipFilter)), true

	case "Query.image":
		if e.complexity.Query.Image == nil {
			break
		}

		args, err := ec.field_Query_image_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Image(childComplexity, args["id"].(string)), true

	case "Query.imageVariation":
		if e.complexity.Query.ImageVariation == nil {
			break
		}

		args, err := ec.field_Query_imageVariation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ImageVariation(childComplexity, args["id"].(string)), true

	case "Query.imageVariations":
		if e.complexity.Query.ImageVariations == nil {
			break
		}

		args, err := ec.field_Query_imageVariations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ImageVariations(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*ImageVariationOrdering), args["filter"].(*ImageVariationFilter)), true

	case "Query.images":
		if e.complexity.Query.Images == nil {
			break
		}

		args, err := ec.field_Query_images_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Images(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*ImageOrdering), args["filter"].(*ImageFilter)), true

	case "Query.like":
		if e.complexity.Query.Like == nil {
			break
		}

		args, err := ec.field_Query_like_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Like(childComplexity, args["id"].(string)), true

	case "Query.likes":
		if e.complexity.Query.Likes == nil {
			break
		}

		args, err := ec.field_Query_likes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Likes(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*LikeOrdering), args["filter"].(*LikeFilter)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.post":
		if e.complexity.Query.Post == nil {
			break
		}

		args, err := ec.field_Query_post_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Post(childComplexity, args["id"].(string)), true

	case "Query.posts":
		if e.complexity.Query.Posts == nil {
			break
		}

		args, err := ec.field_Query_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Posts(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*PostOrdering), args["filter"].(*PostFilter)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["pagination"].(ConnectionPagination), args["ordering"].([]*UserOrdering), args["filter"].(*UserFilter)), true

	case "User.commentLikes":
		if e.complexity.User.CommentLikes == nil {
			break
		}

		return e.complexity.User.CommentLikes(childComplexity), true

	case "User.comments":
		if e.complexity.User.Comments == nil {
			break
		}

		return e.complexity.User.Comments(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.friendships":
		if e.complexity.User.Friendships == nil {
			break
		}

		return e.complexity.User.Friendships(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.likes":
		if e.complexity.User.Likes == nil {
			break
		}

		return e.complexity.User.Likes(childComplexity), true

	case "User.posts":
		if e.complexity.User.Posts == nil {
			break
		}

		return e.complexity.User.Posts(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserDeletePayload.id":
		if e.complexity.UserDeletePayload.ID == nil {
			break
		}

		return e.complexity.UserDeletePayload.ID(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "UserPayload.user":
		if e.complexity.UserPayload.User == nil {
			break
		}

		return e.complexity.UserPayload.User(childComplexity), true

	case "UsersDeletePayload.ids":
		if e.complexity.UsersDeletePayload.Ids == nil {
			break
		}

		return e.complexity.UsersDeletePayload.Ids(childComplexity), true

	case "UsersPayload.users":
		if e.complexity.UsersPayload.Users == nil {
			break
		}

		return e.complexity.UsersPayload.Users(childComplexity), true

	case "UsersUpdatePayload.ok":
		if e.complexity.UsersUpdatePayload.Ok == nil {
			break
		}

		return e.complexity.UsersUpdatePayload.Ok(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "schema.graphql", Input: `directive @isAuthenticated on FIELD_DEFINITION

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ConnectionForwardPagination {
  first: Int!
  after: ID!
}

input ConnectionBackwardPagination {
  last: Int!
  before: ID!
}

input ConnectionPagination {
  forward: ConnectionForwardPagination
  backward: ConnectionBackwardPagination
}

enum SortDirection {
  ASC
  DESC
}

enum CommentSort {
  ID
  CONTENT
}

input CommentOrdering {
  sort: CommentSort!
  direction: SortDirection! = ASC
}

enum CommentLikeSort {
  ID
  LIKE_TYPE
  CREATED_AT
}

input CommentLikeOrdering {
  sort: CommentLikeSort!
  direction: SortDirection! = ASC
}

enum FriendshipSort {
  ID
  CREATED_AT
}

input FriendshipOrdering {
  sort: FriendshipSort!
  direction: SortDirection! = ASC
}

enum ImageSort {
  ID
  VIEWS
  ORIGINAL_URL
}

input ImageOrdering {
  sort: ImageSort!
  direction: SortDirection! = ASC
}

enum ImageVariationSort {
  ID
}

input ImageVariationOrdering {
  sort: ImageVariationSort!
  direction: SortDirection! = ASC
}

enum LikeSort {
  ID
  LIKE_TYPE
  CREATED_AT
}

input LikeOrdering {
  sort: LikeSort!
  direction: SortDirection! = ASC
}

enum PostSort {
  ID
  CONTENT
}

input PostOrdering {
  sort: PostSort!
  direction: SortDirection! = ASC
}

enum UserSort {
  ID
  FIRST_NAME
  LAST_NAME
  EMAIL
}

input UserOrdering {
  sort: UserSort!
  direction: SortDirection! = ASC
}

type Comment implements Node {
  id: ID!
  content: String!
  post: Post!
  user: User!
  commentLikes: [CommentLike]
}

type CommentLike implements Node {
  id: ID!
  comment: Comment!
  user: User!
  likeType: String!
  createdAt: Int
}

type Friendship implements Node {
  id: ID!
  createdAt: Int
  users: [User]
}

type Image implements Node {
  id: ID!
  post: Post!
  views: Int
  originalUrl: String
  imageVariations: [ImageVariation]
}

type ImageVariation implements Node {
  id: ID!
  image: Image!
}

type Like implements Node {
  id: ID!
  post: Post!
  user: User!
  likeType: String!
  createdAt: Int
}

type Post implements Node {
  id: ID!
  content: String!
  user: User!
  comments: [Comment]
  images: [Image]
  likes: [Like]
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  comments: [Comment]
  commentLikes: [CommentLike]
  likes: [Like]
  posts: [Post]
  friendships: [Friendship]
}

type CommentEdge {
  cursor: String!
  node: Comment
}

type CommentLikeEdge {
  cursor: String!
  node: CommentLike
}

type FriendshipEdge {
  cursor: String!
  node: Friendship
}

type ImageEdge {
  cursor: String!
  node: Image
}

type ImageVariationEdge {
  cursor: String!
  node: ImageVariation
}

type LikeEdge {
  cursor: String!
  node: Like
}

type PostEdge {
  cursor: String!
  node: Post
}

type UserEdge {
  cursor: String!
  node: User
}

type CommentConnection {
  edges: [CommentEdge]
  pageInfo: PageInfo!
}

type CommentLikeConnection {
  edges: [CommentLikeEdge]
  pageInfo: PageInfo!
}

type FriendshipConnection {
  edges: [FriendshipEdge]
  pageInfo: PageInfo!
}

type ImageConnection {
  edges: [ImageEdge]
  pageInfo: PageInfo!
}

type ImageVariationConnection {
  edges: [ImageVariationEdge]
  pageInfo: PageInfo!
}

type LikeConnection {
  edges: [LikeEdge]
  pageInfo: PageInfo!
}

type PostConnection {
  edges: [PostEdge]
  pageInfo: PageInfo!
}

type UserConnection {
  edges: [UserEdge]
  pageInfo: PageInfo!
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  equalTo: Boolean
  notEqualTo: Boolean
}

input CommentFilter {
  search: String
  where: CommentWhere
}

input CommentWhere {
  id: IDFilter
  content: StringFilter
  post: PostWhere
  user: UserWhere
  commentLikes: CommentLikeWhere
  or: CommentWhere
  and: CommentWhere
}

input CommentLikeFilter {
  search: String
  where: CommentLikeWhere
}

input CommentLikeWhere {
  id: IDFilter
  comment: CommentWhere
  user: UserWhere
  likeType: StringFilter
  createdAt: IntFilter
  or: CommentLikeWhere
  and: CommentLikeWhere
}

input FriendshipFilter {
  search: String
  where: FriendshipWhere
}

input FriendshipWhere {
  id: IDFilter
  createdAt: IntFilter
  users: UserWhere
  or: FriendshipWhere
  and: FriendshipWhere
}

input ImageFilter {
  search: String
  where: ImageWhere
}

input ImageWhere {
  id: IDFilter
  post: PostWhere
  views: IntFilter
  originalUrl: StringFilter
  imageVariations: ImageVariationWhere
  or: ImageWhere
  and: ImageWhere
}

input ImageVariationFilter {
  search: String
  where: ImageVariationWhere
}

input ImageVariationWhere {
  id: IDFilter
  image: ImageWhere
  or: ImageVariationWhere
  and: ImageVariationWhere
}

input LikeFilter {
  search: String
  where: LikeWhere
}

input LikeWhere {
  id: IDFilter
  post: PostWhere
  user: UserWhere
  likeType: StringFilter
  createdAt: IntFilter
  or: LikeWhere
  and: LikeWhere
}

input PostFilter {
  search: String
  where: PostWhere
}

input PostWhere {
  id: IDFilter
  content: StringFilter
  user: UserWhere
  comments: CommentWhere
  images: ImageWhere
  likes: LikeWhere
  or: PostWhere
  and: PostWhere
}

input UserFilter {
  search: String
  where: UserWhere
}

input UserWhere {
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  comments: CommentWhere
  commentLikes: CommentLikeWhere
  likes: LikeWhere
  posts: PostWhere
  friendships: FriendshipWhere
  or: UserWhere
  and: UserWhere
}

type Query {
  node(id: ID!): Node
  comment(id: ID!): Comment! @isAuthenticated
  comments(
    pagination: ConnectionPagination!
    ordering: [CommentOrdering!]
    filter: CommentFilter
  ): CommentConnection! @isAuthenticated
  commentLike(id: ID!): CommentLike! @isAuthenticated
  commentLikes(
    pagination: ConnectionPagination!
    ordering: [CommentLikeOrdering!]
    filter: CommentLikeFilter
  ): CommentLikeConnection! @isAuthenticated
  friendship(id: ID!): Friendship! @isAuthenticated
  friendships(
    pagination: ConnectionPagination!
    ordering: [FriendshipOrdering!]
    filter: FriendshipFilter
  ): FriendshipConnection! @isAuthenticated
  image(id: ID!): Image! @isAuthenticated
  images(
    pagination: ConnectionPagination!
    ordering: [ImageOrdering!]
    filter: ImageFilter
  ): ImageConnection! @isAuthenticated
  imageVariation(id: ID!): ImageVariation! @isAuthenticated
  imageVariations(
    pagination: ConnectionPagination!
    ordering: [ImageVariationOrdering!]
    filter: ImageVariationFilter
  ): ImageVariationConnection! @isAuthenticated
  like(id: ID!): Like! @isAuthenticated
  likes(
    pagination: ConnectionPagination!
    ordering: [LikeOrdering!]
    filter: LikeFilter
  ): LikeConnection! @isAuthenticated
  post(id: ID!): Post! @isAuthenticated
  posts(
    pagination: ConnectionPagination!
    ordering: [PostOrdering!]
    filter: PostFilter
  ): PostConnection! @isAuthenticated
  user(id: ID!): User! @isAuthenticated
  users(
    pagination: ConnectionPagination!
    ordering: [UserOrdering!]
    filter: UserFilter
  ): UserConnection! @isAuthenticated
}

input CommentCreateInput {
  content: String!
  postId: ID!
  userId: ID!
}

input CommentUpdateInput {
  content: String
  postId: ID
  userId: ID
}

input CommentsCreateInput {
  comments: [CommentCreateInput!]!
}

type CommentPayload {
  comment: Comment!
}

type CommentDeletePayload {
  id: ID!
}

type CommentsPayload {
  comments: [Comment!]!
}

type CommentsDeletePayload {
  ids: [ID!]!
}

type CommentsUpdatePayload {
  ok: Boolean!
}

input CommentLikeCreateInput {
  commentId: ID!
  userId: ID!
  likeType: String!
  createdAt: Int
}

input CommentLikeUpdateInput {
  commentId: ID
  userId: ID
  likeType: String
  createdAt: Int
}

input CommentLikesCreateInput {
  commentLikes: [CommentLikeCreateInput!]!
}

type CommentLikePayload {
  commentLike: CommentLike!
}

type CommentLikeDeletePayload {
  id: ID!
}

type CommentLikesPayload {
  commentLikes: [CommentLike!]!
}

type CommentLikesDeletePayload {
  ids: [ID!]!
}

type CommentLikesUpdatePayload {
  ok: Boolean!
}

input FriendshipCreateInput {
  createdAt: Int
}

input FriendshipUpdateInput {
  createdAt: Int
}

input FriendshipsCreateInput {
  friendships: [FriendshipCreateInput!]!
}

type FriendshipPayload {
  friendship: Friendship!
}

type FriendshipDeletePayload {
  id: ID!
}

type FriendshipsPayload {
  friendships: [Friendship!]!
}

type FriendshipsDeletePayload {
  ids: [ID!]!
}

type FriendshipsUpdatePayload {
  ok: Boolean!
}

input ImageCreateInput {
  postId: ID!
  views: Int
  originalUrl: String
}

input ImageUpdateInput {
  postId: ID
  views: Int
  originalUrl: String
}

input ImagesCreateInput {
  images: [ImageCreateInput!]!
}

type ImagePayload {
  image: Image!
}

type ImageDeletePayload {
  id: ID!
}

type ImagesPayload {
  images: [Image!]!
}

type ImagesDeletePayload {
  ids: [ID!]!
}

type ImagesUpdatePayload {
  ok: Boolean!
}

input ImageVariationCreateInput {
  imageId: ID!
}

input ImageVariationUpdateInput {
  imageId: ID
}

input ImageVariationsCreateInput {
  imageVariations: [ImageVariationCreateInput!]!
}

type ImageVariationPayload {
  imageVariation: ImageVariation!
}

type ImageVariationDeletePayload {
  id: ID!
}

type ImageVariationsPayload {
  imageVariations: [ImageVariation!]!
}

type ImageVariationsDeletePayload {
  ids: [ID!]!
}

type ImageVariationsUpdatePayload {
  ok: Boolean!
}

input LikeCreateInput {
  postId: ID!
  userId: ID!
  likeType: String!
  createdAt: Int
}

input LikeUpdateInput {
  postId: ID
  userId: ID
  likeType: String
  createdAt: Int
}

input LikesCreateInput {
  likes: [LikeCreateInput!]!
}

type LikePayload {
  like: Like!
}

type LikeDeletePayload {
  id: ID!
}

type LikesPayload {
  likes: [Like!]!
}

type LikesDeletePayload {
  ids: [ID!]!
}

type LikesUpdatePayload {
  ok: Boolean!
}

input PostCreateInput {
  content: String!
  userId: ID!
}

input PostUpdateInput {
  content: String
  userId: ID
}

input PostsCreateInput {
  posts: [PostCreateInput!]!
}

type PostPayload {
  post: Post!
}

type PostDeletePayload {
  id: ID!
}

type PostsPayload {
  posts: [Post!]!
}

type PostsDeletePayload {
  ids: [ID!]!
}

type PostsUpdatePayload {
  ok: Boolean!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
}

input UsersCreateInput {
  users: [UserCreateInput!]!
}

type UserPayload {
  user: User!
}

type UserDeletePayload {
  id: ID!
}

type UsersPayload {
  users: [User!]!
}

type UsersDeletePayload {
  ids: [ID!]!
}

type UsersUpdatePayload {
  ok: Boolean!
}

type Mutation {
  createComment(input: CommentCreateInput!): CommentPayload! @isAuthenticated
  createComments(input: CommentsCreateInput!): CommentsPayload! @isAuthenticated
  updateComment(id: ID!, input: CommentUpdateInput!): CommentPayload!
    @isAuthenticated
  updateComments(
    filter: CommentFilter
    input: CommentUpdateInput!
  ): CommentsUpdatePayload! @isAuthenticated
  deleteComment(id: ID!): CommentDeletePayload! @isAuthenticated
  deleteComments(filter: CommentFilter): CommentsDeletePayload! @isAuthenticated
  createCommentLike(input: CommentLikeCreateInput!): CommentLikePayload!
    @isAuthenticated
  createCommentLikes(input: CommentLikesCreateInput!): CommentLikesPayload!
    @isAuthenticated
  updateCommentLike(
    id: ID!
    input: CommentLikeUpdateInput!
  ): CommentLikePayload! @isAuthenticated
  updateCommentLikes(
    filter: CommentLikeFilter
    input: CommentLikeUpdateInput!
  ): CommentLikesUpdatePayload! @isAuthenticated
  deleteCommentLike(id: ID!): CommentLikeDeletePayload! @isAuthenticated
  deleteCommentLikes(filter: CommentLikeFilter): CommentLikesDeletePayload!
    @isAuthenticated
  createFriendship(input: FriendshipCreateInput!): FriendshipPayload!
    @isAuthenticated
  createFriendships(input: FriendshipsCreateInput!): FriendshipsPayload!
    @isAuthenticated
  updateFriendship(id: ID!, input: FriendshipUpdateInput!): FriendshipPayload!
    @isAuthenticated
  updateFriendships(
    filter: FriendshipFilter
    input: FriendshipUpdateInput!
  ): FriendshipsUpdatePayload! @isAuthenticated
  deleteFriendship(id: ID!): FriendshipDeletePayload! @isAuthenticated
  deleteFriendships(filter: FriendshipFilter): FriendshipsDeletePayload!
    @isAuthenticated
  createImage(input: ImageCreateInput!): ImagePayload! @isAuthenticated
  createImages(input: ImagesCreateInput!): ImagesPayload! @isAuthenticated
  updateImage(id: ID!, input: ImageUpdateInput!): ImagePayload! @isAuthenticated
  updateImages(
    filter: ImageFilter
    input: ImageUpdateInput!
  ): ImagesUpdatePayload! @isAuthenticated
  deleteImage(id: ID!): ImageDeletePayload! @isAuthenticated
  deleteImages(filter: ImageFilter): ImagesDeletePayload! @isAuthenticated
  createImageVariation(
    input: ImageVariationCreateInput!
  ): ImageVariationPayload! @isAuthenticated
  createImageVariations(
    input: ImageVariationsCreateInput!
  ): ImageVariationsPayload! @isAuthenticated
  updateImageVariation(
    id: ID!
    input: ImageVariationUpdateInput!
  ): ImageVariationPayload! @isAuthenticated
  updateImageVariations(
    filter: ImageVariationFilter
    input: ImageVariationUpdateInput!
  ): ImageVariationsUpdatePayload! @isAuthenticated
  deleteImageVariation(id: ID!): ImageVariationDeletePayload! @isAuthenticated
  deleteImageVariations(
    filter: ImageVariationFilter
  ): ImageVariationsDeletePayload! @isAuthenticated
  createLike(input: LikeCreateInput!): LikePayload! @isAuthenticated
  createLikes(input: LikesCreateInput!): LikesPayload! @isAuthenticated
  updateLike(id: ID!, input: LikeUpdateInput!): LikePayload! @isAuthenticated
  updateLikes(filter: LikeFilter, input: LikeUpdateInput!): LikesUpdatePayload!
    @isAuthenticated
  deleteLike(id: ID!): LikeDeletePayload! @isAuthenticated
  deleteLikes(filter: LikeFilter): LikesDeletePayload! @isAuthenticated
  createPost(input: PostCreateInput!): PostPayload! @isAuthenticated
  createPosts(input: PostsCreateInput!): PostsPayload! @isAuthenticated
  updatePost(id: ID!, input: PostUpdateInput!): PostPayload! @isAuthenticated
  updatePosts(filter: PostFilter, input: PostUpdateInput!): PostsUpdatePayload!
    @isAuthenticated
  deletePost(id: ID!): PostDeletePayload! @isAuthenticated
  deletePosts(filter: PostFilter): PostsDeletePayload! @isAuthenticated
  createUser(input: UserCreateInput!): UserPayload! @isAuthenticated
  createUsers(input: UsersCreateInput!): UsersPayload! @isAuthenticated
  updateUser(id: ID!, input: UserUpdateInput!): UserPayload! @isAuthenticated
  updateUsers(filter: UserFilter, input: UserUpdateInput!): UsersUpdatePayload!
    @isAuthenticated
  deleteUser(id: ID!): UserDeletePayload! @isAuthenticated
  deleteUsers(filter: UserFilter): UsersDeletePayload! @isAuthenticated
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createCommentLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CommentLikeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentLikeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCommentLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CommentLikesCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentLikesCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CommentCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CommentsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNCommentsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFriendship_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 FriendshipCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNFriendshipCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFriendships_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 FriendshipsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNFriendshipsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createImageVariation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImageVariationCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNImageVariationCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createImageVariations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImageVariationsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNImageVariationsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImageCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNImageCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createImages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ImagesCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNImagesCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LikeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLikeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 LikesCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNLikesCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 PostCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPostCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 PostsCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPostsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UserCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUserCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UsersCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNUsersCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCommentLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteCommentLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *CommentLikeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFriendship_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFriendships_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FriendshipFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFriendshipFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteImageVariation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteImageVariations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ImageVariationFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOImageVariationFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteImages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOImageFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LikeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCommentLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 CommentLikeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCommentLikeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCommentLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *CommentLikeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 CommentLikeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCommentLikeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 CommentUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCommentUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateComments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOCommentFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 CommentUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNCommentUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFriendship_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 FriendshipUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFriendshipUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFriendships_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *FriendshipFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOFriendshipFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 FriendshipUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNFriendshipUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateImageVariation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ImageVariationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNImageVariationUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateImageVariations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ImageVariationFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOImageVariationFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 ImageVariationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNImageVariationUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 ImageUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNImageUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateImages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *ImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOImageFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 ImageUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNImageUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 LikeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLikeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *LikeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 LikeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNLikeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 PostUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPostUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePosts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOPostFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 PostUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNPostUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUserUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg0, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		arg1, err = ec.unmarshalNUserUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_commentLike_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_commentLikes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*CommentLikeOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOCommentLikeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *CommentLikeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOCommentLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_comment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_comments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*CommentOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOCommentOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *CommentFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOCommentFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_friendship_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_friendships_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*FriendshipOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOFriendshipOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *FriendshipFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOFriendshipFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_imageVariation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_imageVariations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*ImageVariationOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOImageVariationOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *ImageVariationFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOImageVariationFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_image_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_images_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*ImageOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOImageOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *ImageFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOImageFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_like_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_likes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*LikeOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOLikeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *LikeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_post_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_posts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*PostOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOPostOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *PostFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOPostFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 ConnectionPagination
	if tmp, ok := rawArgs["pagination"]; ok {
		arg0, err = ec.unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 []*UserOrdering
	if tmp, ok := rawArgs["ordering"]; ok {
		arg1, err = ec.unmarshalOUserOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserOrderingᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ordering"] = arg1
	var arg2 *UserFilter
	if tmp, ok := rawArgs["filter"]; ok {
		arg2, err = ec.unmarshalOUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_content(ctx context.Context, field graphql.CollectedField, obj *Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_post(ctx context.Context, field graphql.CollectedField, obj *Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_user(ctx context.Context, field graphql.CollectedField, obj *Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_commentLikes(ctx context.Context, field graphql.CollectedField, obj *Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CommentLike)
	fc.Result = res
	return ec.marshalOCommentLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_edges(ctx context.Context, field graphql.CollectedField, obj *CommentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CommentEdge)
	fc.Result = res
	return ec.marshalOCommentEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *CommentConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *CommentDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *CommentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentEdge_node(ctx context.Context, field graphql.CollectedField, obj *CommentEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Comment)
	fc.Result = res
	return ec.marshalOComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLike_id(ctx context.Context, field graphql.CollectedField, obj *CommentLike) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLike",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLike_comment(ctx context.Context, field graphql.CollectedField, obj *CommentLike) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLike",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLike_user(ctx context.Context, field graphql.CollectedField, obj *CommentLike) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLike",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLike_likeType(ctx context.Context, field graphql.CollectedField, obj *CommentLike) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLike",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LikeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLike_createdAt(ctx context.Context, field graphql.CollectedField, obj *CommentLike) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLike",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *CommentLikeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CommentLikeEdge)
	fc.Result = res
	return ec.marshalOCommentLikeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *CommentLikeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *CommentLikeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikeDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *CommentLikeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikeEdge_node(ctx context.Context, field graphql.CollectedField, obj *CommentLikeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CommentLike)
	fc.Result = res
	return ec.marshalOCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikePayload_commentLike(ctx context.Context, field graphql.CollectedField, obj *CommentLikePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentLike, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLike)
	fc.Result = res
	return ec.marshalNCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *CommentLikesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikesPayload_commentLikes(ctx context.Context, field graphql.CollectedField, obj *CommentLikesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*CommentLike)
	fc.Result = res
	return ec.marshalNCommentLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentLikesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *CommentLikesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentLikesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentPayload_comment(ctx context.Context, field graphql.CollectedField, obj *CommentPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *CommentsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentsPayload_comments(ctx context.Context, field graphql.CollectedField, obj *CommentsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CommentsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *CommentsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CommentsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Friendship_id(ctx context.Context, field graphql.CollectedField, obj *Friendship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Friendship",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Friendship_createdAt(ctx context.Context, field graphql.CollectedField, obj *Friendship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Friendship",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Friendship_users(ctx context.Context, field graphql.CollectedField, obj *Friendship) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Friendship",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipConnection_edges(ctx context.Context, field graphql.CollectedField, obj *FriendshipConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*FriendshipEdge)
	fc.Result = res
	return ec.marshalOFriendshipEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *FriendshipConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *FriendshipDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *FriendshipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipEdge_node(ctx context.Context, field graphql.CollectedField, obj *FriendshipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Friendship)
	fc.Result = res
	return ec.marshalOFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipPayload_friendship(ctx context.Context, field graphql.CollectedField, obj *FriendshipPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Friendship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Friendship)
	fc.Result = res
	return ec.marshalNFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *FriendshipsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipsPayload_friendships(ctx context.Context, field graphql.CollectedField, obj *FriendshipsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Friendships, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Friendship)
	fc.Result = res
	return ec.marshalNFriendship2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FriendshipsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *FriendshipsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FriendshipsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_id(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_post(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_views(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Views, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_originalUrl(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Image_imageVariations(ctx context.Context, field graphql.CollectedField, obj *Image) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Image",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageVariations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ImageVariation)
	fc.Result = res
	return ec.marshalOImageVariation2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ImageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ImageEdge)
	fc.Result = res
	return ec.marshalOImageEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ImageConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *ImageDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ImageEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageEdge_node(ctx context.Context, field graphql.CollectedField, obj *ImageEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalOImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ImagePayload_image(ctx context.Context, field graphql.CollectedField, obj *ImagePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImagePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariation_id(ctx context.Context, field graphql.CollectedField, obj *ImageVariation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariation_image(ctx context.Context, field graphql.CollectedField, obj *ImageVariation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ImageVariationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ImageVariationEdge)
	fc.Result = res
	return ec.marshalOImageVariationEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ImageVariationConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *ImageVariationDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ImageVariationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationEdge_node(ctx context.Context, field graphql.CollectedField, obj *ImageVariationEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ImageVariation)
	fc.Result = res
	return ec.marshalOImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationPayload_imageVariation(ctx context.Context, field graphql.CollectedField, obj *ImageVariationPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageVariation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariation)
	fc.Result = res
	return ec.marshalNImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *ImageVariationsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationsPayload_imageVariations(ctx context.Context, field graphql.CollectedField, obj *ImageVariationsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageVariations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ImageVariation)
	fc.Result = res
	return ec.marshalNImageVariation2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ImageVariationsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *ImageVariationsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImageVariationsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ImagesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *ImagesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImagesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ImagesPayload_images(ctx context.Context, field graphql.CollectedField, obj *ImagesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImagesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalNImage2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _ImagesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *ImagesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ImagesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Like_id(ctx context.Context, field graphql.CollectedField, obj *Like) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Like",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Like_post(ctx context.Context, field graphql.CollectedField, obj *Like) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Like",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Like_user(ctx context.Context, field graphql.CollectedField, obj *Like) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Like",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Like_likeType(ctx context.Context, field graphql.CollectedField, obj *Like) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Like",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LikeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Like_createdAt(ctx context.Context, field graphql.CollectedField, obj *Like) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Like",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LikeConnection_edges(ctx context.Context, field graphql.CollectedField, obj *LikeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*LikeEdge)
	fc.Result = res
	return ec.marshalOLikeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _LikeConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *LikeConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikeConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _LikeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *LikeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikeDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LikeEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *LikeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LikeEdge_node(ctx context.Context, field graphql.CollectedField, obj *LikeEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikeEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Like)
	fc.Result = res
	return ec.marshalOLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, field.Selections, res)
}

func (ec *executionContext) _LikePayload_like(ctx context.Context, field graphql.CollectedField, obj *LikePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Like, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Like)
	fc.Result = res
	return ec.marshalNLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, field.Selections, res)
}

func (ec *executionContext) _LikesDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *LikesDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikesDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LikesPayload_likes(ctx context.Context, field graphql.CollectedField, obj *LikesPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikesPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Like)
	fc.Result = res
	return ec.marshalNLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _LikesUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *LikesUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "LikesUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateComment(rctx, args["input"].(CommentCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentPayload)
	fc.Result = res
	return ec.marshalNCommentPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createComments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateComments(rctx, args["input"].(CommentsCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentsPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentsPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentsPayload)
	fc.Result = res
	return ec.marshalNCommentsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateComment(rctx, args["id"].(string), args["input"].(CommentUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentPayload)
	fc.Result = res
	return ec.marshalNCommentPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateComments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateComments(rctx, args["filter"].(*CommentFilter), args["input"].(CommentUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentsUpdatePayload)
	fc.Result = res
	return ec.marshalNCommentsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteComment(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentDeletePayload)
	fc.Result = res
	return ec.marshalNCommentDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteComments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteComments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteComments(rctx, args["filter"].(*CommentFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentsDeletePayload)
	fc.Result = res
	return ec.marshalNCommentsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCommentLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCommentLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateCommentLike(rctx, args["input"].(CommentLikeCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikePayload)
	fc.Result = res
	return ec.marshalNCommentLikePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createCommentLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createCommentLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateCommentLikes(rctx, args["input"].(CommentLikesCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikesPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikesPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikesPayload)
	fc.Result = res
	return ec.marshalNCommentLikesPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCommentLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCommentLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateCommentLike(rctx, args["id"].(string), args["input"].(CommentLikeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikePayload)
	fc.Result = res
	return ec.marshalNCommentLikePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateCommentLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateCommentLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateCommentLikes(rctx, args["filter"].(*CommentLikeFilter), args["input"].(CommentLikeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikesUpdatePayload)
	fc.Result = res
	return ec.marshalNCommentLikesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCommentLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCommentLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteCommentLike(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikeDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikeDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikeDeletePayload)
	fc.Result = res
	return ec.marshalNCommentLikeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteCommentLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteCommentLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteCommentLikes(rctx, args["filter"].(*CommentLikeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikesDeletePayload)
	fc.Result = res
	return ec.marshalNCommentLikesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFriendship(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFriendship_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateFriendship(rctx, args["input"].(FriendshipCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipPayload)
	fc.Result = res
	return ec.marshalNFriendshipPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFriendships(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFriendships_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateFriendships(rctx, args["input"].(FriendshipsCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipsPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipsPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipsPayload)
	fc.Result = res
	return ec.marshalNFriendshipsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFriendship(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFriendship_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFriendship(rctx, args["id"].(string), args["input"].(FriendshipUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipPayload)
	fc.Result = res
	return ec.marshalNFriendshipPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFriendships(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFriendships_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateFriendships(rctx, args["filter"].(*FriendshipFilter), args["input"].(FriendshipUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipsUpdatePayload)
	fc.Result = res
	return ec.marshalNFriendshipsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFriendship(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFriendship_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFriendship(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipDeletePayload)
	fc.Result = res
	return ec.marshalNFriendshipDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFriendships(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFriendships_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteFriendships(rctx, args["filter"].(*FriendshipFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipsDeletePayload)
	fc.Result = res
	return ec.marshalNFriendshipsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateImage(rctx, args["input"].(ImageCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImagePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImagePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImagePayload)
	fc.Result = res
	return ec.marshalNImagePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createImages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateImages(rctx, args["input"].(ImagesCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImagesPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImagesPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImagesPayload)
	fc.Result = res
	return ec.marshalNImagesPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateImage(rctx, args["id"].(string), args["input"].(ImageUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImagePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImagePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImagePayload)
	fc.Result = res
	return ec.marshalNImagePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateImages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateImages(rctx, args["filter"].(*ImageFilter), args["input"].(ImageUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImagesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImagesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImagesUpdatePayload)
	fc.Result = res
	return ec.marshalNImagesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteImage(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageDeletePayload)
	fc.Result = res
	return ec.marshalNImageDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteImages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteImages_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteImages(rctx, args["filter"].(*ImageFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImagesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImagesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImagesDeletePayload)
	fc.Result = res
	return ec.marshalNImagesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createImageVariation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createImageVariation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateImageVariation(rctx, args["input"].(ImageVariationCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationPayload)
	fc.Result = res
	return ec.marshalNImageVariationPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createImageVariations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createImageVariations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateImageVariations(rctx, args["input"].(ImageVariationsCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationsPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationsPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationsPayload)
	fc.Result = res
	return ec.marshalNImageVariationsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateImageVariation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateImageVariation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateImageVariation(rctx, args["id"].(string), args["input"].(ImageVariationUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationPayload)
	fc.Result = res
	return ec.marshalNImageVariationPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateImageVariations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateImageVariations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateImageVariations(rctx, args["filter"].(*ImageVariationFilter), args["input"].(ImageVariationUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationsUpdatePayload)
	fc.Result = res
	return ec.marshalNImageVariationsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteImageVariation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteImageVariation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteImageVariation(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationDeletePayload)
	fc.Result = res
	return ec.marshalNImageVariationDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteImageVariations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteImageVariations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteImageVariations(rctx, args["filter"].(*ImageVariationFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationsDeletePayload)
	fc.Result = res
	return ec.marshalNImageVariationsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateLike(rctx, args["input"].(LikeCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikePayload)
	fc.Result = res
	return ec.marshalNLikePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateLikes(rctx, args["input"].(LikesCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikesPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikesPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikesPayload)
	fc.Result = res
	return ec.marshalNLikesPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLike(rctx, args["id"].(string), args["input"].(LikeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikePayload)
	fc.Result = res
	return ec.marshalNLikePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateLikes(rctx, args["filter"].(*LikeFilter), args["input"].(LikeUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikesUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikesUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikesUpdatePayload)
	fc.Result = res
	return ec.marshalNLikesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLike(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikeDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikeDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikeDeletePayload)
	fc.Result = res
	return ec.marshalNLikeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteLikes(rctx, args["filter"].(*LikeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikesDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikesDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikesDeletePayload)
	fc.Result = res
	return ec.marshalNLikesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePost(rctx, args["input"].(PostCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostPayload)
	fc.Result = res
	return ec.marshalNPostPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreatePosts(rctx, args["input"].(PostsCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostsPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostsPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostsPayload)
	fc.Result = res
	return ec.marshalNPostsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePost(rctx, args["id"].(string), args["input"].(PostUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostPayload)
	fc.Result = res
	return ec.marshalNPostPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePosts(rctx, args["filter"].(*PostFilter), args["input"].(PostUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostsUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostsUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostsUpdatePayload)
	fc.Result = res
	return ec.marshalNPostsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePost(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostDeletePayload)
	fc.Result = res
	return ec.marshalNPostDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePosts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePosts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePosts(rctx, args["filter"].(*PostFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostsDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostsDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostsDeletePayload)
	fc.Result = res
	return ec.marshalNPostsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(UserCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UserPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateUsers(rctx, args["input"].(UsersCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UsersPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UsersPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UsersPayload)
	fc.Result = res
	return ec.marshalNUsersPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateUser(rctx, args["id"].(string), args["input"].(UserUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UserPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UserPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserPayload)
	fc.Result = res
	return ec.marshalNUserPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateUsers(rctx, args["filter"].(*UserFilter), args["input"].(UserUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UsersUpdatePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UsersUpdatePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UsersUpdatePayload)
	fc.Result = res
	return ec.marshalNUsersUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersUpdatePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteUser(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UserDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UserDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserDeletePayload)
	fc.Result = res
	return ec.marshalNUserDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteUsers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteUsers(rctx, args["filter"].(*UserFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UsersDeletePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UsersDeletePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UsersDeletePayload)
	fc.Result = res
	return ec.marshalNUsersDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PageInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_id(ctx context.Context, field graphql.CollectedField, obj *Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_content(ctx context.Context, field graphql.CollectedField, obj *Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_user(ctx context.Context, field graphql.CollectedField, obj *Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_comments(ctx context.Context, field graphql.CollectedField, obj *Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_images(ctx context.Context, field graphql.CollectedField, obj *Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Image)
	fc.Result = res
	return ec.marshalOImage2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Post_likes(ctx context.Context, field graphql.CollectedField, obj *Post) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Post",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Like)
	fc.Result = res
	return ec.marshalOLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, field.Selections, res)
}

func (ec *executionContext) _PostConnection_edges(ctx context.Context, field graphql.CollectedField, obj *PostConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*PostEdge)
	fc.Result = res
	return ec.marshalOPostEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _PostConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *PostConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PostDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *PostDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PostEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *PostEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PostEdge_node(ctx context.Context, field graphql.CollectedField, obj *PostEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Post)
	fc.Result = res
	return ec.marshalOPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _PostPayload_post(ctx context.Context, field graphql.CollectedField, obj *PostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Post, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _PostsDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *PostsDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostsDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PostsPayload_posts(ctx context.Context, field graphql.CollectedField, obj *PostsPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostsPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Posts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Post)
	fc.Result = res
	return ec.marshalNPost2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _PostsUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *PostsUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PostsUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_node_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Node(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(Node)
	fc.Result = res
	return ec.marshalONode2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐNode(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_comment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_comment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Comment(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Comment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.Comment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_comments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_comments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Comments(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*CommentOrdering), args["filter"].(*CommentFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentConnection)
	fc.Result = res
	return ec.marshalNCommentConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commentLike(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commentLike_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CommentLike(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLike); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLike`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLike)
	fc.Result = res
	return ec.marshalNCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commentLikes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commentLikes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().CommentLikes(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*CommentLikeOrdering), args["filter"].(*CommentLikeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*CommentLikeConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.CommentLikeConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*CommentLikeConnection)
	fc.Result = res
	return ec.marshalNCommentLikeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_friendship(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_friendship_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Friendship(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Friendship); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.Friendship`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Friendship)
	fc.Result = res
	return ec.marshalNFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_friendships(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_friendships_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Friendships(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*FriendshipOrdering), args["filter"].(*FriendshipFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*FriendshipConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.FriendshipConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*FriendshipConnection)
	fc.Result = res
	return ec.marshalNFriendshipConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_image(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_image_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Image(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Image); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.Image`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Image)
	fc.Result = res
	return ec.marshalNImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_images(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_images_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Images(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*ImageOrdering), args["filter"].(*ImageFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageConnection)
	fc.Result = res
	return ec.marshalNImageConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_imageVariation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_imageVariation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ImageVariation(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariation); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariation`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariation)
	fc.Result = res
	return ec.marshalNImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_imageVariations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_imageVariations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ImageVariations(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*ImageVariationOrdering), args["filter"].(*ImageVariationFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*ImageVariationConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.ImageVariationConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ImageVariationConnection)
	fc.Result = res
	return ec.marshalNImageVariationConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_like(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_like_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Like(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Like); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.Like`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Like)
	fc.Result = res
	return ec.marshalNLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_likes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_likes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Likes(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*LikeOrdering), args["filter"].(*LikeFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*LikeConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.LikeConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*LikeConnection)
	fc.Result = res
	return ec.marshalNLikeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_post(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_post_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Post(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Post); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.Post`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Post)
	fc.Result = res
	return ec.marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_posts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_posts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Posts(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*PostOrdering), args["filter"].(*PostFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PostConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.PostConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PostConnection)
	fc.Result = res
	return ec.marshalNPostConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().User(rctx, args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Users(rctx, args["pagination"].(ConnectionPagination), args["ordering"].([]*UserOrdering), args["filter"].(*UserFilter))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, err
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*UserConnection); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/web-ridge/gqlgen-sqlboiler-examples/social-network/graphql_models.UserConnection`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*UserConnection)
	fc.Result = res
	return ec.marshalNUserConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_comments(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Comment)
	fc.Result = res
	return ec.marshalOComment2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _User_commentLikes(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentLikes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CommentLike)
	fc.Result = res
	return ec.marshalOCommentLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, field.Selections, res)
}

func (ec *executionContext) _User_likes(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Likes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Like)
	fc.Result = res
	return ec.marshalOLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, field.Selections, res)
}

func (ec *executionContext) _User_posts(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Posts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Post)
	fc.Result = res
	return ec.marshalOPost2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, field.Selections, res)
}

func (ec *executionContext) _User_friendships(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "User",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Friendships, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Friendship)
	fc.Result = res
	return ec.marshalOFriendship2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConnection_edges(ctx context.Context, field graphql.CollectedField, obj *UserConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*UserEdge)
	fc.Result = res
	return ec.marshalOUserEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _UserConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *UserConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserConnection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *UserDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *UserEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserEdge_node(ctx context.Context, field graphql.CollectedField, obj *UserEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserEdge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UserPayload_user(ctx context.Context, field graphql.CollectedField, obj *UserPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UserPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersDeletePayload_ids(ctx context.Context, field graphql.CollectedField, obj *UsersDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UsersDeletePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersPayload_users(ctx context.Context, field graphql.CollectedField, obj *UsersPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UsersPayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _UsersUpdatePayload_ok(ctx context.Context, field graphql.CollectedField, obj *UsersUpdatePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "UsersUpdatePayload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBooleanFilter(ctx context.Context, obj interface{}) (BooleanFilter, error) {
	var it BooleanFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentCreateInput(ctx context.Context, obj interface{}) (CommentCreateInput, error) {
	var it CommentCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "content":
			var err error
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentFilter(ctx context.Context, obj interface{}) (CommentFilter, error) {
	var it CommentFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentLikeCreateInput(ctx context.Context, obj interface{}) (CommentLikeCreateInput, error) {
	var it CommentLikeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "commentId":
			var err error
			it.CommentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "likeType":
			var err error
			it.LikeType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentLikeFilter(ctx context.Context, obj interface{}) (CommentLikeFilter, error) {
	var it CommentLikeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOCommentLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentLikeOrdering(ctx context.Context, obj interface{}) (CommentLikeOrdering, error) {
	var it CommentLikeOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNCommentLikeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentLikeUpdateInput(ctx context.Context, obj interface{}) (CommentLikeUpdateInput, error) {
	var it CommentLikeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "commentId":
			var err error
			it.CommentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "likeType":
			var err error
			it.LikeType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentLikeWhere(ctx context.Context, obj interface{}) (CommentLikeWhere, error) {
	var it CommentLikeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "comment":
			var err error
			it.Comment, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "likeType":
			var err error
			it.LikeType, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOCommentLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOCommentLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentLikesCreateInput(ctx context.Context, obj interface{}) (CommentLikesCreateInput, error) {
	var it CommentLikesCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "commentLikes":
			var err error
			it.CommentLikes, err = ec.unmarshalNCommentLikeCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentOrdering(ctx context.Context, obj interface{}) (CommentOrdering, error) {
	var it CommentOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNCommentSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentUpdateInput(ctx context.Context, obj interface{}) (CommentUpdateInput, error) {
	var it CommentUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "content":
			var err error
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentWhere(ctx context.Context, obj interface{}) (CommentWhere, error) {
	var it CommentWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error
			it.Content, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "post":
			var err error
			it.Post, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "commentLikes":
			var err error
			it.CommentLikes, err = ec.unmarshalOCommentLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommentsCreateInput(ctx context.Context, obj interface{}) (CommentsCreateInput, error) {
	var it CommentsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalNCommentCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionBackwardPagination(ctx context.Context, obj interface{}) (ConnectionBackwardPagination, error) {
	var it ConnectionBackwardPagination
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "last":
			var err error
			it.Last, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "before":
			var err error
			it.Before, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionForwardPagination(ctx context.Context, obj interface{}) (ConnectionForwardPagination, error) {
	var it ConnectionForwardPagination
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "first":
			var err error
			it.First, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "after":
			var err error
			it.After, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionPagination(ctx context.Context, obj interface{}) (ConnectionPagination, error) {
	var it ConnectionPagination
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "forward":
			var err error
			it.Forward, err = ec.unmarshalOConnectionForwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionForwardPagination(ctx, v)
			if err != nil {
				return it, err
			}
		case "backward":
			var err error
			it.Backward, err = ec.unmarshalOConnectionBackwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionBackwardPagination(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (FloatFilter, error) {
	var it FloatFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error
			it.LessThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error
			it.LessThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error
			it.MoreThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error
			it.MoreThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFriendshipCreateInput(ctx context.Context, obj interface{}) (FriendshipCreateInput, error) {
	var it FriendshipCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFriendshipFilter(ctx context.Context, obj interface{}) (FriendshipFilter, error) {
	var it FriendshipFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOFriendshipWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFriendshipOrdering(ctx context.Context, obj interface{}) (FriendshipOrdering, error) {
	var it FriendshipOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNFriendshipSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFriendshipUpdateInput(ctx context.Context, obj interface{}) (FriendshipUpdateInput, error) {
	var it FriendshipUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFriendshipWhere(ctx context.Context, obj interface{}) (FriendshipWhere, error) {
	var it FriendshipWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "users":
			var err error
			it.Users, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOFriendshipWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOFriendshipWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFriendshipsCreateInput(ctx context.Context, obj interface{}) (FriendshipsCreateInput, error) {
	var it FriendshipsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "friendships":
			var err error
			it.Friendships, err = ec.unmarshalNFriendshipCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIDFilter(ctx context.Context, obj interface{}) (IDFilter, error) {
	var it IDFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageCreateInput(ctx context.Context, obj interface{}) (ImageCreateInput, error) {
	var it ImageCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "views":
			var err error
			it.Views, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "originalUrl":
			var err error
			it.OriginalURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageFilter(ctx context.Context, obj interface{}) (ImageFilter, error) {
	var it ImageFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOImageWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageOrdering(ctx context.Context, obj interface{}) (ImageOrdering, error) {
	var it ImageOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNImageSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageUpdateInput(ctx context.Context, obj interface{}) (ImageUpdateInput, error) {
	var it ImageUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "views":
			var err error
			it.Views, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "originalUrl":
			var err error
			it.OriginalURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageVariationCreateInput(ctx context.Context, obj interface{}) (ImageVariationCreateInput, error) {
	var it ImageVariationCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "imageId":
			var err error
			it.ImageID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageVariationFilter(ctx context.Context, obj interface{}) (ImageVariationFilter, error) {
	var it ImageVariationFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOImageVariationWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageVariationOrdering(ctx context.Context, obj interface{}) (ImageVariationOrdering, error) {
	var it ImageVariationOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNImageVariationSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageVariationUpdateInput(ctx context.Context, obj interface{}) (ImageVariationUpdateInput, error) {
	var it ImageVariationUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "imageId":
			var err error
			it.ImageID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageVariationWhere(ctx context.Context, obj interface{}) (ImageVariationWhere, error) {
	var it ImageVariationWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error
			it.Image, err = ec.unmarshalOImageWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOImageVariationWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOImageVariationWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageVariationsCreateInput(ctx context.Context, obj interface{}) (ImageVariationsCreateInput, error) {
	var it ImageVariationsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "imageVariations":
			var err error
			it.ImageVariations, err = ec.unmarshalNImageVariationCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImageWhere(ctx context.Context, obj interface{}) (ImageWhere, error) {
	var it ImageWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "post":
			var err error
			it.Post, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "views":
			var err error
			it.Views, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "originalUrl":
			var err error
			it.OriginalURL, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageVariations":
			var err error
			it.ImageVariations, err = ec.unmarshalOImageVariationWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOImageWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOImageWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImagesCreateInput(ctx context.Context, obj interface{}) (ImagesCreateInput, error) {
	var it ImagesCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "images":
			var err error
			it.Images, err = ec.unmarshalNImageCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (IntFilter, error) {
	var it IntFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error
			it.LessThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error
			it.LessThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error
			it.MoreThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error
			it.MoreThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikeCreateInput(ctx context.Context, obj interface{}) (LikeCreateInput, error) {
	var it LikeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "likeType":
			var err error
			it.LikeType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikeFilter(ctx context.Context, obj interface{}) (LikeFilter, error) {
	var it LikeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikeOrdering(ctx context.Context, obj interface{}) (LikeOrdering, error) {
	var it LikeOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNLikeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikeUpdateInput(ctx context.Context, obj interface{}) (LikeUpdateInput, error) {
	var it LikeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "postId":
			var err error
			it.PostID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "likeType":
			var err error
			it.LikeType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikeWhere(ctx context.Context, obj interface{}) (LikeWhere, error) {
	var it LikeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "post":
			var err error
			it.Post, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "likeType":
			var err error
			it.LikeType, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLikesCreateInput(ctx context.Context, obj interface{}) (LikesCreateInput, error) {
	var it LikesCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "likes":
			var err error
			it.Likes, err = ec.unmarshalNLikeCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostCreateInput(ctx context.Context, obj interface{}) (PostCreateInput, error) {
	var it PostCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "content":
			var err error
			it.Content, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostFilter(ctx context.Context, obj interface{}) (PostFilter, error) {
	var it PostFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostOrdering(ctx context.Context, obj interface{}) (PostOrdering, error) {
	var it PostOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNPostSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostUpdateInput(ctx context.Context, obj interface{}) (PostUpdateInput, error) {
	var it PostUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "content":
			var err error
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostWhere(ctx context.Context, obj interface{}) (PostWhere, error) {
	var it PostWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "content":
			var err error
			it.Content, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "user":
			var err error
			it.User, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "images":
			var err error
			it.Images, err = ec.unmarshalOImageWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "likes":
			var err error
			it.Likes, err = ec.unmarshalOLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostsCreateInput(ctx context.Context, obj interface{}) (PostsCreateInput, error) {
	var it PostsCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "posts":
			var err error
			it.Posts, err = ec.unmarshalNPostCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj interface{}) (StringFilter, error) {
	var it StringFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error
			it.EqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error
			it.NotEqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error
			it.NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWith":
			var err error
			it.StartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWith":
			var err error
			it.NotStartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWith":
			var err error
			it.EndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWith":
			var err error
			it.NotEndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contain":
			var err error
			it.Contain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContain":
			var err error
			it.NotContain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWithStrict":
			var err error
			it.StartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWithStrict":
			var err error
			it.NotStartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWithStrict":
			var err error
			it.EndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWithStrict":
			var err error
			it.NotEndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "containStrict":
			var err error
			it.ContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContainStrict":
			var err error
			it.NotContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserCreateInput(ctx context.Context, obj interface{}) (UserCreateInput, error) {
	var it UserCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilter(ctx context.Context, obj interface{}) (UserFilter, error) {
	var it UserFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error
			it.Where, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserOrdering(ctx context.Context, obj interface{}) (UserOrdering, error) {
	var it UserOrdering
	var asMap = obj.(map[string]interface{})

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "sort":
			var err error
			it.Sort, err = ec.unmarshalNUserSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserSort(ctx, v)
			if err != nil {
				return it, err
			}
		case "direction":
			var err error
			it.Direction, err = ec.unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, obj interface{}) (UserUpdateInput, error) {
	var it UserUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserWhere(ctx context.Context, obj interface{}) (UserWhere, error) {
	var it UserWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error
			it.FirstName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error
			it.LastName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "comments":
			var err error
			it.Comments, err = ec.unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "commentLikes":
			var err error
			it.CommentLikes, err = ec.unmarshalOCommentLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "likes":
			var err error
			it.Likes, err = ec.unmarshalOLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "posts":
			var err error
			it.Posts, err = ec.unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "friendships":
			var err error
			it.Friendships, err = ec.unmarshalOFriendshipWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error
			it.Or, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error
			it.And, err = ec.unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUsersCreateInput(ctx context.Context, obj interface{}) (UsersCreateInput, error) {
	var it UsersCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "users":
			var err error
			it.Users, err = ec.unmarshalNUserCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case Comment:
		return ec._Comment(ctx, sel, &obj)
	case *Comment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Comment(ctx, sel, obj)
	case CommentLike:
		return ec._CommentLike(ctx, sel, &obj)
	case *CommentLike:
		if obj == nil {
			return graphql.Null
		}
		return ec._CommentLike(ctx, sel, obj)
	case Friendship:
		return ec._Friendship(ctx, sel, &obj)
	case *Friendship:
		if obj == nil {
			return graphql.Null
		}
		return ec._Friendship(ctx, sel, obj)
	case Image:
		return ec._Image(ctx, sel, &obj)
	case *Image:
		if obj == nil {
			return graphql.Null
		}
		return ec._Image(ctx, sel, obj)
	case ImageVariation:
		return ec._ImageVariation(ctx, sel, &obj)
	case *ImageVariation:
		if obj == nil {
			return graphql.Null
		}
		return ec._ImageVariation(ctx, sel, obj)
	case Like:
		return ec._Like(ctx, sel, &obj)
	case *Like:
		if obj == nil {
			return graphql.Null
		}
		return ec._Like(ctx, sel, obj)
	case Post:
		return ec._Post(ctx, sel, &obj)
	case *Post:
		if obj == nil {
			return graphql.Null
		}
		return ec._Post(ctx, sel, obj)
	case User:
		return ec._User(ctx, sel, &obj)
	case *User:
		if obj == nil {
			return graphql.Null
		}
		return ec._User(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var commentImplementors = []string{"Comment", "Node"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._Comment_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "post":
			out.Values[i] = ec._Comment_post(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Comment_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commentLikes":
			out.Values[i] = ec._Comment_commentLikes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentConnectionImplementors = []string{"CommentConnection"}

func (ec *executionContext) _CommentConnection(ctx context.Context, sel ast.SelectionSet, obj *CommentConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentConnection")
		case "edges":
			out.Values[i] = ec._CommentConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CommentConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentDeletePayloadImplementors = []string{"CommentDeletePayload"}

func (ec *executionContext) _CommentDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentDeletePayload")
		case "id":
			out.Values[i] = ec._CommentDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentEdgeImplementors = []string{"CommentEdge"}

func (ec *executionContext) _CommentEdge(ctx context.Context, sel ast.SelectionSet, obj *CommentEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentEdge")
		case "cursor":
			out.Values[i] = ec._CommentEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._CommentEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikeImplementors = []string{"CommentLike", "Node"}

func (ec *executionContext) _CommentLike(ctx context.Context, sel ast.SelectionSet, obj *CommentLike) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLike")
		case "id":
			out.Values[i] = ec._CommentLike_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._CommentLike_comment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._CommentLike_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "likeType":
			out.Values[i] = ec._CommentLike_likeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._CommentLike_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikeConnectionImplementors = []string{"CommentLikeConnection"}

func (ec *executionContext) _CommentLikeConnection(ctx context.Context, sel ast.SelectionSet, obj *CommentLikeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikeConnection")
		case "edges":
			out.Values[i] = ec._CommentLikeConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CommentLikeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikeDeletePayloadImplementors = []string{"CommentLikeDeletePayload"}

func (ec *executionContext) _CommentLikeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentLikeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikeDeletePayload")
		case "id":
			out.Values[i] = ec._CommentLikeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikeEdgeImplementors = []string{"CommentLikeEdge"}

func (ec *executionContext) _CommentLikeEdge(ctx context.Context, sel ast.SelectionSet, obj *CommentLikeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikeEdge")
		case "cursor":
			out.Values[i] = ec._CommentLikeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._CommentLikeEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikePayloadImplementors = []string{"CommentLikePayload"}

func (ec *executionContext) _CommentLikePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentLikePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikePayload")
		case "commentLike":
			out.Values[i] = ec._CommentLikePayload_commentLike(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikesDeletePayloadImplementors = []string{"CommentLikesDeletePayload"}

func (ec *executionContext) _CommentLikesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentLikesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikesDeletePayload")
		case "ids":
			out.Values[i] = ec._CommentLikesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikesPayloadImplementors = []string{"CommentLikesPayload"}

func (ec *executionContext) _CommentLikesPayload(ctx context.Context, sel ast.SelectionSet, obj *CommentLikesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikesPayload")
		case "commentLikes":
			out.Values[i] = ec._CommentLikesPayload_commentLikes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentLikesUpdatePayloadImplementors = []string{"CommentLikesUpdatePayload"}

func (ec *executionContext) _CommentLikesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentLikesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentLikesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentLikesUpdatePayload")
		case "ok":
			out.Values[i] = ec._CommentLikesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentPayloadImplementors = []string{"CommentPayload"}

func (ec *executionContext) _CommentPayload(ctx context.Context, sel ast.SelectionSet, obj *CommentPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentPayload")
		case "comment":
			out.Values[i] = ec._CommentPayload_comment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentsDeletePayloadImplementors = []string{"CommentsDeletePayload"}

func (ec *executionContext) _CommentsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentsDeletePayload")
		case "ids":
			out.Values[i] = ec._CommentsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentsPayloadImplementors = []string{"CommentsPayload"}

func (ec *executionContext) _CommentsPayload(ctx context.Context, sel ast.SelectionSet, obj *CommentsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentsPayload")
		case "comments":
			out.Values[i] = ec._CommentsPayload_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentsUpdatePayloadImplementors = []string{"CommentsUpdatePayload"}

func (ec *executionContext) _CommentsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *CommentsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommentsUpdatePayload")
		case "ok":
			out.Values[i] = ec._CommentsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipImplementors = []string{"Friendship", "Node"}

func (ec *executionContext) _Friendship(ctx context.Context, sel ast.SelectionSet, obj *Friendship) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Friendship")
		case "id":
			out.Values[i] = ec._Friendship_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Friendship_createdAt(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Friendship_users(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipConnectionImplementors = []string{"FriendshipConnection"}

func (ec *executionContext) _FriendshipConnection(ctx context.Context, sel ast.SelectionSet, obj *FriendshipConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipConnection")
		case "edges":
			out.Values[i] = ec._FriendshipConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FriendshipConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipDeletePayloadImplementors = []string{"FriendshipDeletePayload"}

func (ec *executionContext) _FriendshipDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *FriendshipDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipDeletePayload")
		case "id":
			out.Values[i] = ec._FriendshipDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipEdgeImplementors = []string{"FriendshipEdge"}

func (ec *executionContext) _FriendshipEdge(ctx context.Context, sel ast.SelectionSet, obj *FriendshipEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipEdge")
		case "cursor":
			out.Values[i] = ec._FriendshipEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._FriendshipEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipPayloadImplementors = []string{"FriendshipPayload"}

func (ec *executionContext) _FriendshipPayload(ctx context.Context, sel ast.SelectionSet, obj *FriendshipPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipPayload")
		case "friendship":
			out.Values[i] = ec._FriendshipPayload_friendship(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipsDeletePayloadImplementors = []string{"FriendshipsDeletePayload"}

func (ec *executionContext) _FriendshipsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *FriendshipsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipsDeletePayload")
		case "ids":
			out.Values[i] = ec._FriendshipsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipsPayloadImplementors = []string{"FriendshipsPayload"}

func (ec *executionContext) _FriendshipsPayload(ctx context.Context, sel ast.SelectionSet, obj *FriendshipsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipsPayload")
		case "friendships":
			out.Values[i] = ec._FriendshipsPayload_friendships(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var friendshipsUpdatePayloadImplementors = []string{"FriendshipsUpdatePayload"}

func (ec *executionContext) _FriendshipsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *FriendshipsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, friendshipsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FriendshipsUpdatePayload")
		case "ok":
			out.Values[i] = ec._FriendshipsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageImplementors = []string{"Image", "Node"}

func (ec *executionContext) _Image(ctx context.Context, sel ast.SelectionSet, obj *Image) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Image")
		case "id":
			out.Values[i] = ec._Image_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "post":
			out.Values[i] = ec._Image_post(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "views":
			out.Values[i] = ec._Image_views(ctx, field, obj)
		case "originalUrl":
			out.Values[i] = ec._Image_originalUrl(ctx, field, obj)
		case "imageVariations":
			out.Values[i] = ec._Image_imageVariations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageConnectionImplementors = []string{"ImageConnection"}

func (ec *executionContext) _ImageConnection(ctx context.Context, sel ast.SelectionSet, obj *ImageConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageConnection")
		case "edges":
			out.Values[i] = ec._ImageConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ImageConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageDeletePayloadImplementors = []string{"ImageDeletePayload"}

func (ec *executionContext) _ImageDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *ImageDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageDeletePayload")
		case "id":
			out.Values[i] = ec._ImageDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageEdgeImplementors = []string{"ImageEdge"}

func (ec *executionContext) _ImageEdge(ctx context.Context, sel ast.SelectionSet, obj *ImageEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageEdge")
		case "cursor":
			out.Values[i] = ec._ImageEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ImageEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imagePayloadImplementors = []string{"ImagePayload"}

func (ec *executionContext) _ImagePayload(ctx context.Context, sel ast.SelectionSet, obj *ImagePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imagePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImagePayload")
		case "image":
			out.Values[i] = ec._ImagePayload_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationImplementors = []string{"ImageVariation", "Node"}

func (ec *executionContext) _ImageVariation(ctx context.Context, sel ast.SelectionSet, obj *ImageVariation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariation")
		case "id":
			out.Values[i] = ec._ImageVariation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "image":
			out.Values[i] = ec._ImageVariation_image(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationConnectionImplementors = []string{"ImageVariationConnection"}

func (ec *executionContext) _ImageVariationConnection(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationConnection")
		case "edges":
			out.Values[i] = ec._ImageVariationConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ImageVariationConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationDeletePayloadImplementors = []string{"ImageVariationDeletePayload"}

func (ec *executionContext) _ImageVariationDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationDeletePayload")
		case "id":
			out.Values[i] = ec._ImageVariationDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationEdgeImplementors = []string{"ImageVariationEdge"}

func (ec *executionContext) _ImageVariationEdge(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationEdge")
		case "cursor":
			out.Values[i] = ec._ImageVariationEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._ImageVariationEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationPayloadImplementors = []string{"ImageVariationPayload"}

func (ec *executionContext) _ImageVariationPayload(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationPayload")
		case "imageVariation":
			out.Values[i] = ec._ImageVariationPayload_imageVariation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationsDeletePayloadImplementors = []string{"ImageVariationsDeletePayload"}

func (ec *executionContext) _ImageVariationsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationsDeletePayload")
		case "ids":
			out.Values[i] = ec._ImageVariationsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationsPayloadImplementors = []string{"ImageVariationsPayload"}

func (ec *executionContext) _ImageVariationsPayload(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationsPayload")
		case "imageVariations":
			out.Values[i] = ec._ImageVariationsPayload_imageVariations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageVariationsUpdatePayloadImplementors = []string{"ImageVariationsUpdatePayload"}

func (ec *executionContext) _ImageVariationsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *ImageVariationsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageVariationsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageVariationsUpdatePayload")
		case "ok":
			out.Values[i] = ec._ImageVariationsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imagesDeletePayloadImplementors = []string{"ImagesDeletePayload"}

func (ec *executionContext) _ImagesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *ImagesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imagesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImagesDeletePayload")
		case "ids":
			out.Values[i] = ec._ImagesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imagesPayloadImplementors = []string{"ImagesPayload"}

func (ec *executionContext) _ImagesPayload(ctx context.Context, sel ast.SelectionSet, obj *ImagesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imagesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImagesPayload")
		case "images":
			out.Values[i] = ec._ImagesPayload_images(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imagesUpdatePayloadImplementors = []string{"ImagesUpdatePayload"}

func (ec *executionContext) _ImagesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *ImagesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imagesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImagesUpdatePayload")
		case "ok":
			out.Values[i] = ec._ImagesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likeImplementors = []string{"Like", "Node"}

func (ec *executionContext) _Like(ctx context.Context, sel ast.SelectionSet, obj *Like) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Like")
		case "id":
			out.Values[i] = ec._Like_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "post":
			out.Values[i] = ec._Like_post(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Like_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "likeType":
			out.Values[i] = ec._Like_likeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Like_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likeConnectionImplementors = []string{"LikeConnection"}

func (ec *executionContext) _LikeConnection(ctx context.Context, sel ast.SelectionSet, obj *LikeConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likeConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikeConnection")
		case "edges":
			out.Values[i] = ec._LikeConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._LikeConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likeDeletePayloadImplementors = []string{"LikeDeletePayload"}

func (ec *executionContext) _LikeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LikeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikeDeletePayload")
		case "id":
			out.Values[i] = ec._LikeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likeEdgeImplementors = []string{"LikeEdge"}

func (ec *executionContext) _LikeEdge(ctx context.Context, sel ast.SelectionSet, obj *LikeEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likeEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikeEdge")
		case "cursor":
			out.Values[i] = ec._LikeEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._LikeEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likePayloadImplementors = []string{"LikePayload"}

func (ec *executionContext) _LikePayload(ctx context.Context, sel ast.SelectionSet, obj *LikePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikePayload")
		case "like":
			out.Values[i] = ec._LikePayload_like(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likesDeletePayloadImplementors = []string{"LikesDeletePayload"}

func (ec *executionContext) _LikesDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *LikesDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likesDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikesDeletePayload")
		case "ids":
			out.Values[i] = ec._LikesDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likesPayloadImplementors = []string{"LikesPayload"}

func (ec *executionContext) _LikesPayload(ctx context.Context, sel ast.SelectionSet, obj *LikesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikesPayload")
		case "likes":
			out.Values[i] = ec._LikesPayload_likes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var likesUpdatePayloadImplementors = []string{"LikesUpdatePayload"}

func (ec *executionContext) _LikesUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *LikesUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, likesUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LikesUpdatePayload")
		case "ok":
			out.Values[i] = ec._LikesUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createComment":
			out.Values[i] = ec._Mutation_createComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createComments":
			out.Values[i] = ec._Mutation_createComments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateComment":
			out.Values[i] = ec._Mutation_updateComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateComments":
			out.Values[i] = ec._Mutation_updateComments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteComment":
			out.Values[i] = ec._Mutation_deleteComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteComments":
			out.Values[i] = ec._Mutation_deleteComments(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCommentLike":
			out.Values[i] = ec._Mutation_createCommentLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createCommentLikes":
			out.Values[i] = ec._Mutation_createCommentLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCommentLike":
			out.Values[i] = ec._Mutation_updateCommentLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateCommentLikes":
			out.Values[i] = ec._Mutation_updateCommentLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCommentLike":
			out.Values[i] = ec._Mutation_deleteCommentLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteCommentLikes":
			out.Values[i] = ec._Mutation_deleteCommentLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFriendship":
			out.Values[i] = ec._Mutation_createFriendship(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFriendships":
			out.Values[i] = ec._Mutation_createFriendships(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFriendship":
			out.Values[i] = ec._Mutation_updateFriendship(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFriendships":
			out.Values[i] = ec._Mutation_updateFriendships(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFriendship":
			out.Values[i] = ec._Mutation_deleteFriendship(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFriendships":
			out.Values[i] = ec._Mutation_deleteFriendships(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createImage":
			out.Values[i] = ec._Mutation_createImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createImages":
			out.Values[i] = ec._Mutation_createImages(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateImage":
			out.Values[i] = ec._Mutation_updateImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateImages":
			out.Values[i] = ec._Mutation_updateImages(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteImage":
			out.Values[i] = ec._Mutation_deleteImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteImages":
			out.Values[i] = ec._Mutation_deleteImages(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createImageVariation":
			out.Values[i] = ec._Mutation_createImageVariation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createImageVariations":
			out.Values[i] = ec._Mutation_createImageVariations(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateImageVariation":
			out.Values[i] = ec._Mutation_updateImageVariation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateImageVariations":
			out.Values[i] = ec._Mutation_updateImageVariations(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteImageVariation":
			out.Values[i] = ec._Mutation_deleteImageVariation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteImageVariations":
			out.Values[i] = ec._Mutation_deleteImageVariations(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLike":
			out.Values[i] = ec._Mutation_createLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLikes":
			out.Values[i] = ec._Mutation_createLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLike":
			out.Values[i] = ec._Mutation_updateLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLikes":
			out.Values[i] = ec._Mutation_updateLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLike":
			out.Values[i] = ec._Mutation_deleteLike(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLikes":
			out.Values[i] = ec._Mutation_deleteLikes(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPost":
			out.Values[i] = ec._Mutation_createPost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPosts":
			out.Values[i] = ec._Mutation_createPosts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePost":
			out.Values[i] = ec._Mutation_updatePost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePosts":
			out.Values[i] = ec._Mutation_updatePosts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePost":
			out.Values[i] = ec._Mutation_deletePost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePosts":
			out.Values[i] = ec._Mutation_deletePosts(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUsers":
			out.Values[i] = ec._Mutation_createUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUsers":
			out.Values[i] = ec._Mutation_updateUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUser":
			out.Values[i] = ec._Mutation_deleteUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteUsers":
			out.Values[i] = ec._Mutation_deleteUsers(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postImplementors = []string{"Post", "Node"}

func (ec *executionContext) _Post(ctx context.Context, sel ast.SelectionSet, obj *Post) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Post")
		case "id":
			out.Values[i] = ec._Post_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._Post_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Post_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._Post_comments(ctx, field, obj)
		case "images":
			out.Values[i] = ec._Post_images(ctx, field, obj)
		case "likes":
			out.Values[i] = ec._Post_likes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postConnectionImplementors = []string{"PostConnection"}

func (ec *executionContext) _PostConnection(ctx context.Context, sel ast.SelectionSet, obj *PostConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostConnection")
		case "edges":
			out.Values[i] = ec._PostConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PostConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postDeletePayloadImplementors = []string{"PostDeletePayload"}

func (ec *executionContext) _PostDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *PostDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostDeletePayload")
		case "id":
			out.Values[i] = ec._PostDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postEdgeImplementors = []string{"PostEdge"}

func (ec *executionContext) _PostEdge(ctx context.Context, sel ast.SelectionSet, obj *PostEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostEdge")
		case "cursor":
			out.Values[i] = ec._PostEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._PostEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postPayloadImplementors = []string{"PostPayload"}

func (ec *executionContext) _PostPayload(ctx context.Context, sel ast.SelectionSet, obj *PostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostPayload")
		case "post":
			out.Values[i] = ec._PostPayload_post(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postsDeletePayloadImplementors = []string{"PostsDeletePayload"}

func (ec *executionContext) _PostsDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *PostsDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postsDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostsDeletePayload")
		case "ids":
			out.Values[i] = ec._PostsDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postsPayloadImplementors = []string{"PostsPayload"}

func (ec *executionContext) _PostsPayload(ctx context.Context, sel ast.SelectionSet, obj *PostsPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postsPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostsPayload")
		case "posts":
			out.Values[i] = ec._PostsPayload_posts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var postsUpdatePayloadImplementors = []string{"PostsUpdatePayload"}

func (ec *executionContext) _PostsUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *PostsUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, postsUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PostsUpdatePayload")
		case "ok":
			out.Values[i] = ec._PostsUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			})
		case "comment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_comment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "comments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_comments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commentLike":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commentLike(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commentLikes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commentLikes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "friendship":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_friendship(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "friendships":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_friendships(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "image":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_image(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "images":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_images(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "imageVariation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_imageVariation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "imageVariations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_imageVariations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "like":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_like(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "likes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_likes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "post":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_post(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "posts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_posts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User", "Node"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comments":
			out.Values[i] = ec._User_comments(ctx, field, obj)
		case "commentLikes":
			out.Values[i] = ec._User_commentLikes(ctx, field, obj)
		case "likes":
			out.Values[i] = ec._User_likes(ctx, field, obj)
		case "posts":
			out.Values[i] = ec._User_posts(ctx, field, obj)
		case "friendships":
			out.Values[i] = ec._User_friendships(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userConnectionImplementors = []string{"UserConnection"}

func (ec *executionContext) _UserConnection(ctx context.Context, sel ast.SelectionSet, obj *UserConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserConnection")
		case "edges":
			out.Values[i] = ec._UserConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._UserConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userDeletePayloadImplementors = []string{"UserDeletePayload"}

func (ec *executionContext) _UserDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *UserDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDeletePayload")
		case "id":
			out.Values[i] = ec._UserDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userEdgeImplementors = []string{"UserEdge"}

func (ec *executionContext) _UserEdge(ctx context.Context, sel ast.SelectionSet, obj *UserEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserEdge")
		case "cursor":
			out.Values[i] = ec._UserEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._UserEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userPayloadImplementors = []string{"UserPayload"}

func (ec *executionContext) _UserPayload(ctx context.Context, sel ast.SelectionSet, obj *UserPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPayload")
		case "user":
			out.Values[i] = ec._UserPayload_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersDeletePayloadImplementors = []string{"UsersDeletePayload"}

func (ec *executionContext) _UsersDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *UsersDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersDeletePayload")
		case "ids":
			out.Values[i] = ec._UsersDeletePayload_ids(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersPayloadImplementors = []string{"UsersPayload"}

func (ec *executionContext) _UsersPayload(ctx context.Context, sel ast.SelectionSet, obj *UsersPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersPayload")
		case "users":
			out.Values[i] = ec._UsersPayload_users(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usersUpdatePayloadImplementors = []string{"UsersUpdatePayload"}

func (ec *executionContext) _UsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, obj *UsersUpdatePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usersUpdatePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsersUpdatePayload")
		case "ok":
			out.Values[i] = ec._UsersUpdatePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNComment2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx context.Context, sel ast.SelectionSet, v Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx context.Context, sel ast.SelectionSet, v *Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentConnection(ctx context.Context, sel ast.SelectionSet, v CommentConnection) graphql.Marshaler {
	return ec._CommentConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentConnection(ctx context.Context, sel ast.SelectionSet, v *CommentConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInput(ctx context.Context, v interface{}) (CommentCreateInput, error) {
	return ec.unmarshalInputCommentCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCommentCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInputᚄ(ctx context.Context, v interface{}) ([]*CommentCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*CommentCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommentCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInput(ctx context.Context, v interface{}) (*CommentCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCommentDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentDeletePayload(ctx context.Context, sel ast.SelectionSet, v CommentDeletePayload) graphql.Marshaler {
	return ec._CommentDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentDeletePayload(ctx context.Context, sel ast.SelectionSet, v *CommentDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentLike2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx context.Context, sel ast.SelectionSet, v CommentLike) graphql.Marshaler {
	return ec._CommentLike(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeᚄ(ctx context.Context, sel ast.SelectionSet, v []*CommentLike) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx context.Context, sel ast.SelectionSet, v *CommentLike) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLike(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentLikeConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeConnection(ctx context.Context, sel ast.SelectionSet, v CommentLikeConnection) graphql.Marshaler {
	return ec._CommentLikeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLikeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeConnection(ctx context.Context, sel ast.SelectionSet, v *CommentLikeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLikeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentLikeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInput(ctx context.Context, v interface{}) (CommentLikeCreateInput, error) {
	return ec.unmarshalInputCommentLikeCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCommentLikeCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInputᚄ(ctx context.Context, v interface{}) ([]*CommentLikeCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*CommentLikeCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentLikeCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommentLikeCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInput(ctx context.Context, v interface{}) (*CommentLikeCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentLikeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCommentLikeDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeDeletePayload(ctx context.Context, sel ast.SelectionSet, v CommentLikeDeletePayload) graphql.Marshaler {
	return ec._CommentLikeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLikeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *CommentLikeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLikeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentLikeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeOrdering(ctx context.Context, v interface{}) (CommentLikeOrdering, error) {
	return ec.unmarshalInputCommentLikeOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNCommentLikeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeOrdering(ctx context.Context, v interface{}) (*CommentLikeOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentLikeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCommentLikePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikePayload(ctx context.Context, sel ast.SelectionSet, v CommentLikePayload) graphql.Marshaler {
	return ec._CommentLikePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLikePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikePayload(ctx context.Context, sel ast.SelectionSet, v *CommentLikePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLikePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentLikeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeSort(ctx context.Context, v interface{}) (CommentLikeSort, error) {
	var res CommentLikeSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNCommentLikeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeSort(ctx context.Context, sel ast.SelectionSet, v CommentLikeSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCommentLikeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeUpdateInput(ctx context.Context, v interface{}) (CommentLikeUpdateInput, error) {
	return ec.unmarshalInputCommentLikeUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCommentLikesCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesCreateInput(ctx context.Context, v interface{}) (CommentLikesCreateInput, error) {
	return ec.unmarshalInputCommentLikesCreateInput(ctx, v)
}

func (ec *executionContext) marshalNCommentLikesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesDeletePayload(ctx context.Context, sel ast.SelectionSet, v CommentLikesDeletePayload) graphql.Marshaler {
	return ec._CommentLikesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLikesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *CommentLikesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLikesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentLikesPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesPayload(ctx context.Context, sel ast.SelectionSet, v CommentLikesPayload) graphql.Marshaler {
	return ec._CommentLikesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLikesPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesPayload(ctx context.Context, sel ast.SelectionSet, v *CommentLikesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLikesPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentLikesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v CommentLikesUpdatePayload) graphql.Marshaler {
	return ec._CommentLikesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentLikesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *CommentLikesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentLikesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentOrdering(ctx context.Context, v interface{}) (CommentOrdering, error) {
	return ec.unmarshalInputCommentOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNCommentOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentOrdering(ctx context.Context, v interface{}) (*CommentOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNCommentOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNCommentPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentPayload(ctx context.Context, sel ast.SelectionSet, v CommentPayload) graphql.Marshaler {
	return ec._CommentPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentPayload(ctx context.Context, sel ast.SelectionSet, v *CommentPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommentSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentSort(ctx context.Context, v interface{}) (CommentSort, error) {
	var res CommentSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNCommentSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentSort(ctx context.Context, sel ast.SelectionSet, v CommentSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCommentUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentUpdateInput(ctx context.Context, v interface{}) (CommentUpdateInput, error) {
	return ec.unmarshalInputCommentUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNCommentsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsCreateInput(ctx context.Context, v interface{}) (CommentsCreateInput, error) {
	return ec.unmarshalInputCommentsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNCommentsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsDeletePayload(ctx context.Context, sel ast.SelectionSet, v CommentsDeletePayload) graphql.Marshaler {
	return ec._CommentsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *CommentsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentsPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsPayload(ctx context.Context, sel ast.SelectionSet, v CommentsPayload) graphql.Marshaler {
	return ec._CommentsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsPayload(ctx context.Context, sel ast.SelectionSet, v *CommentsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNCommentsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v CommentsUpdatePayload) graphql.Marshaler {
	return ec._CommentsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommentsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *CommentsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommentsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConnectionPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionPagination(ctx context.Context, v interface{}) (ConnectionPagination, error) {
	return ec.unmarshalInputConnectionPagination(ctx, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFriendship2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx context.Context, sel ast.SelectionSet, v Friendship) graphql.Marshaler {
	return ec._Friendship(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendship2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipᚄ(ctx context.Context, sel ast.SelectionSet, v []*Friendship) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx context.Context, sel ast.SelectionSet, v *Friendship) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Friendship(ctx, sel, v)
}

func (ec *executionContext) marshalNFriendshipConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipConnection(ctx context.Context, sel ast.SelectionSet, v FriendshipConnection) graphql.Marshaler {
	return ec._FriendshipConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendshipConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipConnection(ctx context.Context, sel ast.SelectionSet, v *FriendshipConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FriendshipConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFriendshipCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInput(ctx context.Context, v interface{}) (FriendshipCreateInput, error) {
	return ec.unmarshalInputFriendshipCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNFriendshipCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInputᚄ(ctx context.Context, v interface{}) ([]*FriendshipCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*FriendshipCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFriendshipCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFriendshipCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInput(ctx context.Context, v interface{}) (*FriendshipCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFriendshipCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNFriendshipDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipDeletePayload(ctx context.Context, sel ast.SelectionSet, v FriendshipDeletePayload) graphql.Marshaler {
	return ec._FriendshipDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendshipDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipDeletePayload(ctx context.Context, sel ast.SelectionSet, v *FriendshipDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FriendshipDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFriendshipOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipOrdering(ctx context.Context, v interface{}) (FriendshipOrdering, error) {
	return ec.unmarshalInputFriendshipOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNFriendshipOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipOrdering(ctx context.Context, v interface{}) (*FriendshipOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFriendshipOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNFriendshipPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipPayload(ctx context.Context, sel ast.SelectionSet, v FriendshipPayload) graphql.Marshaler {
	return ec._FriendshipPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendshipPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipPayload(ctx context.Context, sel ast.SelectionSet, v *FriendshipPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FriendshipPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFriendshipSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipSort(ctx context.Context, v interface{}) (FriendshipSort, error) {
	var res FriendshipSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNFriendshipSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipSort(ctx context.Context, sel ast.SelectionSet, v FriendshipSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFriendshipUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipUpdateInput(ctx context.Context, v interface{}) (FriendshipUpdateInput, error) {
	return ec.unmarshalInputFriendshipUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNFriendshipsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsCreateInput(ctx context.Context, v interface{}) (FriendshipsCreateInput, error) {
	return ec.unmarshalInputFriendshipsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNFriendshipsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsDeletePayload(ctx context.Context, sel ast.SelectionSet, v FriendshipsDeletePayload) graphql.Marshaler {
	return ec._FriendshipsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendshipsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *FriendshipsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FriendshipsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFriendshipsPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsPayload(ctx context.Context, sel ast.SelectionSet, v FriendshipsPayload) graphql.Marshaler {
	return ec._FriendshipsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendshipsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsPayload(ctx context.Context, sel ast.SelectionSet, v *FriendshipsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FriendshipsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFriendshipsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v FriendshipsUpdatePayload) graphql.Marshaler {
	return ec._FriendshipsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFriendshipsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *FriendshipsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FriendshipsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNImage2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx context.Context, sel ast.SelectionSet, v Image) graphql.Marshaler {
	return ec._Image(ctx, sel, &v)
}

func (ec *executionContext) marshalNImage2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*Image) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *Image) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) marshalNImageConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageConnection(ctx context.Context, sel ast.SelectionSet, v ImageConnection) graphql.Marshaler {
	return ec._ImageConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageConnection(ctx context.Context, sel ast.SelectionSet, v *ImageConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInput(ctx context.Context, v interface{}) (ImageCreateInput, error) {
	return ec.unmarshalInputImageCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNImageCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInputᚄ(ctx context.Context, v interface{}) ([]*ImageCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ImageCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNImageCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNImageCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInput(ctx context.Context, v interface{}) (*ImageCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNImageCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNImageDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageDeletePayload(ctx context.Context, sel ast.SelectionSet, v ImageDeletePayload) graphql.Marshaler {
	return ec._ImageDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageDeletePayload(ctx context.Context, sel ast.SelectionSet, v *ImageDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageOrdering(ctx context.Context, v interface{}) (ImageOrdering, error) {
	return ec.unmarshalInputImageOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNImageOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageOrdering(ctx context.Context, v interface{}) (*ImageOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNImageOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNImagePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagePayload(ctx context.Context, sel ast.SelectionSet, v ImagePayload) graphql.Marshaler {
	return ec._ImagePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImagePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagePayload(ctx context.Context, sel ast.SelectionSet, v *ImagePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImagePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageSort(ctx context.Context, v interface{}) (ImageSort, error) {
	var res ImageSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNImageSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageSort(ctx context.Context, sel ast.SelectionSet, v ImageSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNImageUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageUpdateInput(ctx context.Context, v interface{}) (ImageUpdateInput, error) {
	return ec.unmarshalInputImageUpdateInput(ctx, v)
}

func (ec *executionContext) marshalNImageVariation2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx context.Context, sel ast.SelectionSet, v ImageVariation) graphql.Marshaler {
	return ec._ImageVariation(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariation2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationᚄ(ctx context.Context, sel ast.SelectionSet, v []*ImageVariation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx context.Context, sel ast.SelectionSet, v *ImageVariation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariation(ctx, sel, v)
}

func (ec *executionContext) marshalNImageVariationConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationConnection(ctx context.Context, sel ast.SelectionSet, v ImageVariationConnection) graphql.Marshaler {
	return ec._ImageVariationConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariationConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationConnection(ctx context.Context, sel ast.SelectionSet, v *ImageVariationConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariationConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageVariationCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInput(ctx context.Context, v interface{}) (ImageVariationCreateInput, error) {
	return ec.unmarshalInputImageVariationCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNImageVariationCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInputᚄ(ctx context.Context, v interface{}) ([]*ImageVariationCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ImageVariationCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNImageVariationCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNImageVariationCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInput(ctx context.Context, v interface{}) (*ImageVariationCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNImageVariationCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNImageVariationDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationDeletePayload(ctx context.Context, sel ast.SelectionSet, v ImageVariationDeletePayload) graphql.Marshaler {
	return ec._ImageVariationDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariationDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationDeletePayload(ctx context.Context, sel ast.SelectionSet, v *ImageVariationDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariationDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageVariationOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationOrdering(ctx context.Context, v interface{}) (ImageVariationOrdering, error) {
	return ec.unmarshalInputImageVariationOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNImageVariationOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationOrdering(ctx context.Context, v interface{}) (*ImageVariationOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNImageVariationOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNImageVariationPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationPayload(ctx context.Context, sel ast.SelectionSet, v ImageVariationPayload) graphql.Marshaler {
	return ec._ImageVariationPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariationPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationPayload(ctx context.Context, sel ast.SelectionSet, v *ImageVariationPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariationPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImageVariationSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationSort(ctx context.Context, v interface{}) (ImageVariationSort, error) {
	var res ImageVariationSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNImageVariationSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationSort(ctx context.Context, sel ast.SelectionSet, v ImageVariationSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNImageVariationUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationUpdateInput(ctx context.Context, v interface{}) (ImageVariationUpdateInput, error) {
	return ec.unmarshalInputImageVariationUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNImageVariationsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsCreateInput(ctx context.Context, v interface{}) (ImageVariationsCreateInput, error) {
	return ec.unmarshalInputImageVariationsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNImageVariationsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsDeletePayload(ctx context.Context, sel ast.SelectionSet, v ImageVariationsDeletePayload) graphql.Marshaler {
	return ec._ImageVariationsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariationsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *ImageVariationsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariationsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNImageVariationsPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsPayload(ctx context.Context, sel ast.SelectionSet, v ImageVariationsPayload) graphql.Marshaler {
	return ec._ImageVariationsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariationsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsPayload(ctx context.Context, sel ast.SelectionSet, v *ImageVariationsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariationsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNImageVariationsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v ImageVariationsUpdatePayload) graphql.Marshaler {
	return ec._ImageVariationsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImageVariationsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *ImageVariationsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImageVariationsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNImagesCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesCreateInput(ctx context.Context, v interface{}) (ImagesCreateInput, error) {
	return ec.unmarshalInputImagesCreateInput(ctx, v)
}

func (ec *executionContext) marshalNImagesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesDeletePayload(ctx context.Context, sel ast.SelectionSet, v ImagesDeletePayload) graphql.Marshaler {
	return ec._ImagesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImagesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *ImagesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImagesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNImagesPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesPayload(ctx context.Context, sel ast.SelectionSet, v ImagesPayload) graphql.Marshaler {
	return ec._ImagesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImagesPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesPayload(ctx context.Context, sel ast.SelectionSet, v *ImagesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImagesPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNImagesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v ImagesUpdatePayload) graphql.Marshaler {
	return ec._ImagesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNImagesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImagesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *ImagesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ImagesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLike2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx context.Context, sel ast.SelectionSet, v Like) graphql.Marshaler {
	return ec._Like(ctx, sel, &v)
}

func (ec *executionContext) marshalNLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeᚄ(ctx context.Context, sel ast.SelectionSet, v []*Like) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx context.Context, sel ast.SelectionSet, v *Like) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Like(ctx, sel, v)
}

func (ec *executionContext) marshalNLikeConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeConnection(ctx context.Context, sel ast.SelectionSet, v LikeConnection) graphql.Marshaler {
	return ec._LikeConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNLikeConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeConnection(ctx context.Context, sel ast.SelectionSet, v *LikeConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LikeConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLikeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInput(ctx context.Context, v interface{}) (LikeCreateInput, error) {
	return ec.unmarshalInputLikeCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNLikeCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInputᚄ(ctx context.Context, v interface{}) ([]*LikeCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LikeCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLikeCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNLikeCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInput(ctx context.Context, v interface{}) (*LikeCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLikeCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLikeDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeDeletePayload(ctx context.Context, sel ast.SelectionSet, v LikeDeletePayload) graphql.Marshaler {
	return ec._LikeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLikeDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LikeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LikeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLikeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeOrdering(ctx context.Context, v interface{}) (LikeOrdering, error) {
	return ec.unmarshalInputLikeOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNLikeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeOrdering(ctx context.Context, v interface{}) (*LikeOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNLikeOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNLikePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikePayload(ctx context.Context, sel ast.SelectionSet, v LikePayload) graphql.Marshaler {
	return ec._LikePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLikePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikePayload(ctx context.Context, sel ast.SelectionSet, v *LikePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LikePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLikeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeSort(ctx context.Context, v interface{}) (LikeSort, error) {
	var res LikeSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNLikeSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeSort(ctx context.Context, sel ast.SelectionSet, v LikeSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNLikeUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeUpdateInput(ctx context.Context, v interface{}) (LikeUpdateInput, error) {
	return ec.unmarshalInputLikeUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNLikesCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesCreateInput(ctx context.Context, v interface{}) (LikesCreateInput, error) {
	return ec.unmarshalInputLikesCreateInput(ctx, v)
}

func (ec *executionContext) marshalNLikesDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesDeletePayload(ctx context.Context, sel ast.SelectionSet, v LikesDeletePayload) graphql.Marshaler {
	return ec._LikesDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLikesDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesDeletePayload(ctx context.Context, sel ast.SelectionSet, v *LikesDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LikesDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLikesPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesPayload(ctx context.Context, sel ast.SelectionSet, v LikesPayload) graphql.Marshaler {
	return ec._LikesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLikesPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesPayload(ctx context.Context, sel ast.SelectionSet, v *LikesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LikesPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLikesUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v LikesUpdatePayload) graphql.Marshaler {
	return ec._LikesUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLikesUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikesUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *LikesUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LikesUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPageInfo2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPost2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx context.Context, sel ast.SelectionSet, v Post) graphql.Marshaler {
	return ec._Post(ctx, sel, &v)
}

func (ec *executionContext) marshalNPost2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostᚄ(ctx context.Context, sel ast.SelectionSet, v []*Post) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx context.Context, sel ast.SelectionSet, v *Post) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) marshalNPostConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostConnection(ctx context.Context, sel ast.SelectionSet, v PostConnection) graphql.Marshaler {
	return ec._PostConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostConnection(ctx context.Context, sel ast.SelectionSet, v *PostConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInput(ctx context.Context, v interface{}) (PostCreateInput, error) {
	return ec.unmarshalInputPostCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNPostCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInputᚄ(ctx context.Context, v interface{}) ([]*PostCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PostCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNPostCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPostCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInput(ctx context.Context, v interface{}) (*PostCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNPostCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNPostDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostDeletePayload(ctx context.Context, sel ast.SelectionSet, v PostDeletePayload) graphql.Marshaler {
	return ec._PostDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostDeletePayload(ctx context.Context, sel ast.SelectionSet, v *PostDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostOrdering(ctx context.Context, v interface{}) (PostOrdering, error) {
	return ec.unmarshalInputPostOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNPostOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostOrdering(ctx context.Context, v interface{}) (*PostOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNPostOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNPostPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostPayload(ctx context.Context, sel ast.SelectionSet, v PostPayload) graphql.Marshaler {
	return ec._PostPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostPayload(ctx context.Context, sel ast.SelectionSet, v *PostPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPostSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostSort(ctx context.Context, v interface{}) (PostSort, error) {
	var res PostSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNPostSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostSort(ctx context.Context, sel ast.SelectionSet, v PostSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPostUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostUpdateInput(ctx context.Context, v interface{}) (PostUpdateInput, error) {
	return ec.unmarshalInputPostUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNPostsCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsCreateInput(ctx context.Context, v interface{}) (PostsCreateInput, error) {
	return ec.unmarshalInputPostsCreateInput(ctx, v)
}

func (ec *executionContext) marshalNPostsDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsDeletePayload(ctx context.Context, sel ast.SelectionSet, v PostsDeletePayload) graphql.Marshaler {
	return ec._PostsDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostsDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsDeletePayload(ctx context.Context, sel ast.SelectionSet, v *PostsDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostsDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPostsPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsPayload(ctx context.Context, sel ast.SelectionSet, v PostsPayload) graphql.Marshaler {
	return ec._PostsPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostsPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsPayload(ctx context.Context, sel ast.SelectionSet, v *PostsPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostsPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNPostsUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v PostsUpdatePayload) graphql.Marshaler {
	return ec._PostsUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPostsUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostsUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *PostsUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PostsUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx context.Context, v interface{}) (SortDirection, error) {
	var res SortDirection
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNSortDirection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐSortDirection(ctx context.Context, sel ast.SelectionSet, v SortDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx context.Context, sel ast.SelectionSet, v User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserConnection2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v UserConnection) graphql.Marshaler {
	return ec._UserConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserConnection2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserConnection(ctx context.Context, sel ast.SelectionSet, v *UserConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInput(ctx context.Context, v interface{}) (UserCreateInput, error) {
	return ec.unmarshalInputUserCreateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUserCreateInput2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInputᚄ(ctx context.Context, v interface{}) ([]*UserCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserCreateInput, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNUserCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUserCreateInput2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInput(ctx context.Context, v interface{}) (*UserCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserCreateInput(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUserDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserDeletePayload(ctx context.Context, sel ast.SelectionSet, v UserDeletePayload) graphql.Marshaler {
	return ec._UserDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserDeletePayload(ctx context.Context, sel ast.SelectionSet, v *UserDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserDeletePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserOrdering(ctx context.Context, v interface{}) (UserOrdering, error) {
	return ec.unmarshalInputUserOrdering(ctx, v)
}

func (ec *executionContext) unmarshalNUserOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserOrdering(ctx context.Context, v interface{}) (*UserOrdering, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNUserOrdering2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserOrdering(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNUserPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v UserPayload) graphql.Marshaler {
	return ec._UserPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserPayload(ctx context.Context, sel ast.SelectionSet, v *UserPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UserPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserSort(ctx context.Context, v interface{}) (UserSort, error) {
	var res UserSort
	return res, res.UnmarshalGQL(v)
}

func (ec *executionContext) marshalNUserSort2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserSort(ctx context.Context, sel ast.SelectionSet, v UserSort) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUserUpdateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserUpdateInput(ctx context.Context, v interface{}) (UserUpdateInput, error) {
	return ec.unmarshalInputUserUpdateInput(ctx, v)
}

func (ec *executionContext) unmarshalNUsersCreateInput2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersCreateInput(ctx context.Context, v interface{}) (UsersCreateInput, error) {
	return ec.unmarshalInputUsersCreateInput(ctx, v)
}

func (ec *executionContext) marshalNUsersDeletePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, v UsersDeletePayload) graphql.Marshaler {
	return ec._UsersDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersDeletePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersDeletePayload(ctx context.Context, sel ast.SelectionSet, v *UsersDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNUsersPayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersPayload(ctx context.Context, sel ast.SelectionSet, v UsersPayload) graphql.Marshaler {
	return ec._UsersPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersPayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersPayload(ctx context.Context, sel ast.SelectionSet, v *UsersPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNUsersUpdatePayload2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v UsersUpdatePayload) graphql.Marshaler {
	return ec._UsersUpdatePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUsersUpdatePayload2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUsersUpdatePayload(ctx context.Context, sel ast.SelectionSet, v *UsersUpdatePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._UsersUpdatePayload(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOComment2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx context.Context, sel ast.SelectionSet, v Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalOComment2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx context.Context, sel ast.SelectionSet, v []*Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOComment2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐComment(ctx context.Context, sel ast.SelectionSet, v *Comment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalOCommentEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v CommentEdge) graphql.Marshaler {
	return ec._CommentEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommentEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v []*CommentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommentEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommentEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentEdge(ctx context.Context, sel ast.SelectionSet, v *CommentEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentFilter(ctx context.Context, v interface{}) (CommentFilter, error) {
	return ec.unmarshalInputCommentFilter(ctx, v)
}

func (ec *executionContext) unmarshalOCommentFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentFilter(ctx context.Context, v interface{}) (*CommentFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCommentLike2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx context.Context, sel ast.SelectionSet, v CommentLike) graphql.Marshaler {
	return ec._CommentLike(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommentLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx context.Context, sel ast.SelectionSet, v []*CommentLike) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommentLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLike(ctx context.Context, sel ast.SelectionSet, v *CommentLike) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentLike(ctx, sel, v)
}

func (ec *executionContext) marshalOCommentLikeEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeEdge(ctx context.Context, sel ast.SelectionSet, v CommentLikeEdge) graphql.Marshaler {
	return ec._CommentLikeEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommentLikeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeEdge(ctx context.Context, sel ast.SelectionSet, v []*CommentLikeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommentLikeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommentLikeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeEdge(ctx context.Context, sel ast.SelectionSet, v *CommentLikeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommentLikeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommentLikeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeFilter(ctx context.Context, v interface{}) (CommentLikeFilter, error) {
	return ec.unmarshalInputCommentLikeFilter(ctx, v)
}

func (ec *executionContext) unmarshalOCommentLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeFilter(ctx context.Context, v interface{}) (*CommentLikeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentLikeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCommentLikeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeOrderingᚄ(ctx context.Context, v interface{}) ([]*CommentLikeOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*CommentLikeOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentLikeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCommentLikeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx context.Context, v interface{}) (CommentLikeWhere, error) {
	return ec.unmarshalInputCommentLikeWhere(ctx, v)
}

func (ec *executionContext) unmarshalOCommentLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx context.Context, v interface{}) (*CommentLikeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentLikeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentLikeWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOCommentOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentOrderingᚄ(ctx context.Context, v interface{}) ([]*CommentOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*CommentOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommentOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCommentWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx context.Context, v interface{}) (CommentWhere, error) {
	return ec.unmarshalInputCommentWhere(ctx, v)
}

func (ec *executionContext) unmarshalOCommentWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx context.Context, v interface{}) (*CommentWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommentWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐCommentWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOConnectionBackwardPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionBackwardPagination(ctx context.Context, v interface{}) (ConnectionBackwardPagination, error) {
	return ec.unmarshalInputConnectionBackwardPagination(ctx, v)
}

func (ec *executionContext) unmarshalOConnectionBackwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionBackwardPagination(ctx context.Context, v interface{}) (*ConnectionBackwardPagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOConnectionBackwardPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionBackwardPagination(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOConnectionForwardPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionForwardPagination(ctx context.Context, v interface{}) (ConnectionForwardPagination, error) {
	return ec.unmarshalInputConnectionForwardPagination(ctx, v)
}

func (ec *executionContext) unmarshalOConnectionForwardPagination2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionForwardPagination(ctx context.Context, v interface{}) (*ConnectionForwardPagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOConnectionForwardPagination2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐConnectionForwardPagination(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2float64(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2float64(ctx, sel, *v)
}

func (ec *executionContext) marshalOFriendship2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx context.Context, sel ast.SelectionSet, v Friendship) graphql.Marshaler {
	return ec._Friendship(ctx, sel, &v)
}

func (ec *executionContext) marshalOFriendship2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx context.Context, sel ast.SelectionSet, v []*Friendship) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFriendship2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendship(ctx context.Context, sel ast.SelectionSet, v *Friendship) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Friendship(ctx, sel, v)
}

func (ec *executionContext) marshalOFriendshipEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipEdge(ctx context.Context, sel ast.SelectionSet, v FriendshipEdge) graphql.Marshaler {
	return ec._FriendshipEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOFriendshipEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipEdge(ctx context.Context, sel ast.SelectionSet, v []*FriendshipEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFriendshipEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFriendshipEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipEdge(ctx context.Context, sel ast.SelectionSet, v *FriendshipEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FriendshipEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFriendshipFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipFilter(ctx context.Context, v interface{}) (FriendshipFilter, error) {
	return ec.unmarshalInputFriendshipFilter(ctx, v)
}

func (ec *executionContext) unmarshalOFriendshipFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipFilter(ctx context.Context, v interface{}) (*FriendshipFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFriendshipFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOFriendshipOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipOrderingᚄ(ctx context.Context, v interface{}) ([]*FriendshipOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*FriendshipOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNFriendshipOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFriendshipWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx context.Context, v interface{}) (FriendshipWhere, error) {
	return ec.unmarshalInputFriendshipWhere(ctx, v)
}

func (ec *executionContext) unmarshalOFriendshipWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx context.Context, v interface{}) (*FriendshipWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFriendshipWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐFriendshipWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOID2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOID2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIDFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx context.Context, v interface{}) (IDFilter, error) {
	return ec.unmarshalInputIDFilter(ctx, v)
}

func (ec *executionContext) unmarshalOIDFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx context.Context, v interface{}) (*IDFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIDFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIDFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOImage2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx context.Context, sel ast.SelectionSet, v Image) graphql.Marshaler {
	return ec._Image(ctx, sel, &v)
}

func (ec *executionContext) marshalOImage2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx context.Context, sel ast.SelectionSet, v []*Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOImage2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImage(ctx context.Context, sel ast.SelectionSet, v *Image) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Image(ctx, sel, v)
}

func (ec *executionContext) marshalOImageEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageEdge(ctx context.Context, sel ast.SelectionSet, v ImageEdge) graphql.Marshaler {
	return ec._ImageEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOImageEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageEdge(ctx context.Context, sel ast.SelectionSet, v []*ImageEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImageEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOImageEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageEdge(ctx context.Context, sel ast.SelectionSet, v *ImageEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ImageEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImageFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageFilter(ctx context.Context, v interface{}) (ImageFilter, error) {
	return ec.unmarshalInputImageFilter(ctx, v)
}

func (ec *executionContext) unmarshalOImageFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageFilter(ctx context.Context, v interface{}) (*ImageFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOImageFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOImageOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageOrderingᚄ(ctx context.Context, v interface{}) ([]*ImageOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ImageOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNImageOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOImageVariation2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx context.Context, sel ast.SelectionSet, v ImageVariation) graphql.Marshaler {
	return ec._ImageVariation(ctx, sel, &v)
}

func (ec *executionContext) marshalOImageVariation2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx context.Context, sel ast.SelectionSet, v []*ImageVariation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOImageVariation2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariation(ctx context.Context, sel ast.SelectionSet, v *ImageVariation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ImageVariation(ctx, sel, v)
}

func (ec *executionContext) marshalOImageVariationEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationEdge(ctx context.Context, sel ast.SelectionSet, v ImageVariationEdge) graphql.Marshaler {
	return ec._ImageVariationEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOImageVariationEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationEdge(ctx context.Context, sel ast.SelectionSet, v []*ImageVariationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOImageVariationEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOImageVariationEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationEdge(ctx context.Context, sel ast.SelectionSet, v *ImageVariationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ImageVariationEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImageVariationFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationFilter(ctx context.Context, v interface{}) (ImageVariationFilter, error) {
	return ec.unmarshalInputImageVariationFilter(ctx, v)
}

func (ec *executionContext) unmarshalOImageVariationFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationFilter(ctx context.Context, v interface{}) (*ImageVariationFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOImageVariationFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOImageVariationOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationOrderingᚄ(ctx context.Context, v interface{}) ([]*ImageVariationOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ImageVariationOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNImageVariationOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOImageVariationWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx context.Context, v interface{}) (ImageVariationWhere, error) {
	return ec.unmarshalInputImageVariationWhere(ctx, v)
}

func (ec *executionContext) unmarshalOImageVariationWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx context.Context, v interface{}) (*ImageVariationWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOImageVariationWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageVariationWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOImageWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx context.Context, v interface{}) (ImageWhere, error) {
	return ec.unmarshalInputImageWhere(ctx, v)
}

func (ec *executionContext) unmarshalOImageWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx context.Context, v interface{}) (*ImageWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOImageWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐImageWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIntFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx context.Context, v interface{}) (IntFilter, error) {
	return ec.unmarshalInputIntFilter(ctx, v)
}

func (ec *executionContext) unmarshalOIntFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx context.Context, v interface{}) (*IntFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOIntFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐIntFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOLike2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx context.Context, sel ast.SelectionSet, v Like) graphql.Marshaler {
	return ec._Like(ctx, sel, &v)
}

func (ec *executionContext) marshalOLike2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx context.Context, sel ast.SelectionSet, v []*Like) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLike2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLike(ctx context.Context, sel ast.SelectionSet, v *Like) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Like(ctx, sel, v)
}

func (ec *executionContext) marshalOLikeEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeEdge(ctx context.Context, sel ast.SelectionSet, v LikeEdge) graphql.Marshaler {
	return ec._LikeEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOLikeEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeEdge(ctx context.Context, sel ast.SelectionSet, v []*LikeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLikeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLikeEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeEdge(ctx context.Context, sel ast.SelectionSet, v *LikeEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LikeEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLikeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeFilter(ctx context.Context, v interface{}) (LikeFilter, error) {
	return ec.unmarshalInputLikeFilter(ctx, v)
}

func (ec *executionContext) unmarshalOLikeFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeFilter(ctx context.Context, v interface{}) (*LikeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLikeFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOLikeOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeOrderingᚄ(ctx context.Context, v interface{}) ([]*LikeOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*LikeOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNLikeOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOLikeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx context.Context, v interface{}) (LikeWhere, error) {
	return ec.unmarshalInputLikeWhere(ctx, v)
}

func (ec *executionContext) unmarshalOLikeWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx context.Context, v interface{}) (*LikeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOLikeWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐLikeWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalONode2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐNode(ctx context.Context, sel ast.SelectionSet, v Node) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOPost2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx context.Context, sel ast.SelectionSet, v Post) graphql.Marshaler {
	return ec._Post(ctx, sel, &v)
}

func (ec *executionContext) marshalOPost2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx context.Context, sel ast.SelectionSet, v []*Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPost2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPost(ctx context.Context, sel ast.SelectionSet, v *Post) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Post(ctx, sel, v)
}

func (ec *executionContext) marshalOPostEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostEdge(ctx context.Context, sel ast.SelectionSet, v PostEdge) graphql.Marshaler {
	return ec._PostEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOPostEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostEdge(ctx context.Context, sel ast.SelectionSet, v []*PostEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPostEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPostEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostEdge(ctx context.Context, sel ast.SelectionSet, v *PostEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PostEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPostFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostFilter(ctx context.Context, v interface{}) (PostFilter, error) {
	return ec.unmarshalInputPostFilter(ctx, v)
}

func (ec *executionContext) unmarshalOPostFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostFilter(ctx context.Context, v interface{}) (*PostFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOPostOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostOrderingᚄ(ctx context.Context, v interface{}) ([]*PostOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PostOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNPostOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPostWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx context.Context, v interface{}) (PostWhere, error) {
	return ec.unmarshalInputPostWhere(ctx, v)
}

func (ec *executionContext) unmarshalOPostWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx context.Context, v interface{}) (*PostWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOPostWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐPostWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOStringFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx context.Context, v interface{}) (StringFilter, error) {
	return ec.unmarshalInputStringFilter(ctx, v)
}

func (ec *executionContext) unmarshalOStringFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx context.Context, v interface{}) (*StringFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOStringFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐStringFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOUser2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx context.Context, sel ast.SelectionSet, v User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx context.Context, sel ast.SelectionSet, v []*User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserEdge2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v UserEdge) graphql.Marshaler {
	return ec._UserEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOUserEdge2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v []*UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserEdge2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserEdge(ctx context.Context, sel ast.SelectionSet, v *UserEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserFilter(ctx context.Context, v interface{}) (UserFilter, error) {
	return ec.unmarshalInputUserFilter(ctx, v)
}

func (ec *executionContext) unmarshalOUserFilter2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserFilter(ctx context.Context, v interface{}) (*UserFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserFilter2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserFilter(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOUserOrdering2ᚕᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserOrderingᚄ(ctx context.Context, v interface{}) ([]*UserOrdering, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserOrdering, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNUserOrdering2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserOrdering(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx context.Context, v interface{}) (UserWhere, error) {
	return ec.unmarshalInputUserWhere(ctx, v)
}

func (ec *executionContext) unmarshalOUserWhere2ᚖgithubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx context.Context, v interface{}) (*UserWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOUserWhere2githubᚗcomᚋwebᚑridgeᚋgqlgenᚑsqlboilerᚑexamplesᚋsocialᚑnetworkᚋgraphql_modelsᚐUserWhere(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
